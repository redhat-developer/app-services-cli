 
[artifact.cmd.description.short]
one = 'Manage Service Registry Artifacts'

[artifact.cmd.description.long]
one = '''
Manage Service Registry Artifacts using the currently selected Service Registry.

Commands are executed on the currently selected Service Registry instance that can be overridden by --instance-id flag.

Apicurio Registry Artifacts enables developers to manage and share the structure of their data.
For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy.
Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time.
For example, this includes rules for content validation and version compatibility.

Artifact commands enable client applications to manage the artifacts in the registry.
This set of commands provide create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.
'''

[artifact.cmd.example]
one = '''
## Create artifact in my-group from schema.json file
rhoas service-registry artifact create --artifact-id=my-artifact --group=my-group artifact.json

## Get artifact content
rhoas service-registry artifact get --artifact-id=my-artifact --group=my-group --output-file=artifact.json

## Get artifact content by hash
rhoas service-registry artifact download --hash=cab4...al9 --output-file=artifact.json

## Delete artifact
rhoas service-registry artifact delete --artifact-id=my-artifact

## Get artifact metadata
rhoas service-registry artifact metadata --artifact-id=my-artifact --group=my-group

## Update artifact
rhoas service-registry artifact update --artifact-id=my-artifact artifact-new.json

## List Artifacts
rhoas service-registry artifact list --group=my-group --limit=10 page=1

## View artifact versions
rhoas service-registry artifact versions --artifact-id=my-artifact --group=my-group
'''

[artifact.common.file.location]
one = 'File location of the artifact'

[artifact.common.delete.without.prompt]
one = 'Delete without prompt'

[artifact.common.registryIdToUse]
one = 'Id of the registry to be used. By default uses currently selected registry'

[artifact.common.id]
one = 'Id of the artifact'

[artifact.common.group]
one = 'Artifact group'

[artifact.common.sha]
one = 'SHA-256 hash of the artifact'

[artifact.common.version]
one = 'Version of the artifact'

[artifact.common.custom.version]
one = 'Custom version of the artifact (for example 1.0.0)'

[artifact.common.custom.name]
one = 'Custom name of the artifact'

[artifact.common.custom.description]
one = 'Custom description of the artifact'

[artifact.common.type]
one = 'Type of artifact. Choose from: {{.AllowedTypes}}'

[artifact.common.global.id]
one = 'Global ID of the artifact'

[artifact.common.content.id]
one = 'ContentId of the artifact'

[artifact.common.page.number]
one = 'Page number'

[artifact.common.page.limit]
one = 'Page limit'

[artifact.common.instance.id]
one = 'Id of the registry to be used. By default uses currently selected registry'

[artifact.common.message.no.group]
one = 'Group was not specified. Using {{.DefaultArtifactGroup}} artifacts group.'

[artifact.common.message.opening.file]
one = 'Opening file: {{.FileName}}'

[artifact.common.message.file.location]
one = 'Location of the output file'

[artifact.common.message.output.format]
one = 'Output format (json, yaml, yml)'

[artifact.common.message.no.artifact.available.for.group.and.registry]
one = 'No artifacts available for {{.Group}} group and registry id {{.Registry}}'

[artifact.common.message.reading.file]
one = 'Reading file content from standard input'

[artifact.common.message.deleteAllArtifactsInGroup]
one = 'Artifact was not specified. Command will delete all artifacts in the group'

[artifact.common.message.deleteAllArtifactsFromGroup]
one = 'Do you want to delete ALL ARTIFACTS from group {{.GroupName}}'

[artifact.common.message.AllArtifactsInGroupDeleted]
one = 'Artifacts in group {{.GroupName}} deleted'

[artifact.common.message.created]
one = 'Artifact created'

[artifact.common.message.deleted]
one = 'Artifact deleted: {{.Name}}'

[artifact.common.message.updated]
one = 'Artifact updated'

[artifact.common.message.deleting.artifact]
one = 'Deleting artifact {{.Name}}'

[artifact.common.message.deleting.artifactFromGroup]
one = 'Do you want to delete artifact {{.Name}} from group {{.Group}}'

[artifact.common.message.fetching.artifact]
one = 'Fetching artifact'

[artifact.common.message.fetching.with.version]
one = 'Fetching artifact with version: {{.Version}}'

[artifact.common.message.fetching.latest]
one = 'Fetching latest artifact'

[artifact.common.message.artifact.metadata.fetching]
one = 'Fetching artifact metadata'

[artifact.common.message.artifact.metadata.fetched]
one = 'Successfully fetched artifact metadata'

[artifact.common.message.artifact.versions.fetching]
one = 'Fetching artifact versions'

[artifact.common.message.artifact.versions.fetched]
one = 'Successfully fetched artifact versions'

[artifact.common.message.artifact.metadata.updating]
one = 'Updating artifact metadata'

[artifact.common.message.artifact.metadata.updated]
one = 'Successfully updated artifact metadata'

[artifact.common.message.fetched.successfully]
one = 'Successfully fetched artifact'

[artifact.common.message.artifactIdRequired]
one = 'artifact id is required. Please specify artifact by using --artifact-id flag'

[artifact.common.message.running.editor.with.editable.metadata]
one = 'Running editor with editable metadata. Please save contents and close editor to continue...'

[artifact.common.error.artifact.id.required]
one = 'artifact is required. Please specify artifact by using --artifact-id flag'

[artifact.common.error.artifact.notFound]
one = 'artifact {{.Name}} not found'

[artifact.common.error.page.and.limit.too.small]
one = 'page and limit values should be bigger than 1'

[artifact.cmd.common.error.noServiceRegistrySelected]
one = '''no service Registry selected. Use 'rhoas service-registry use' use to select your registry'''

[artifact.cmd.common.error.specify.contentId.globalId.hash]
one = 'please specify at least one flag: [contentId, global-id, hash]'

[artifact.cmd.common.error.no.editor.mode.in.non.interactive]
one = 'editor mode cannot be started in non-interactive mode. Please use --name and --description flags'

[artifact.cmd.create.description.short]
one = 'Creates new artifact from file or standard input'

[artifact.cmd.create.description.long]
one = '''
Creates a new artifact by posting the artifact content to the registry.

Artifacts can be typically in JSON format for most of the supported types, but may be in another format for a few (for example, PROTOBUF).
The registry attempts to figure out what kind of artifact is being added from the following supported list:

- Avro (AVRO)
- Protobuf (PROTOBUF)
- JSON Schema (JSON)
- Kafka Connect (KCONNECT)
- OpenAPI (OPENAPI)
- AsyncAPI (ASYNCAPI)
- GraphQL (GRAPHQL)
- Web Services Description Language (WSDL)
- XML Schema (XSD)

An artifact is created using the content provided in the body of the request.
This content is created under a unique artifact ID that can be provided by user.
If not provided in the request, the server generates a unique ID for the artifact.
It is typically recommended that callers provide the ID, because this is a meaningful identifier, and for most use cases should be supplied by the caller.
If an artifact with the provided artifact ID already exists command will fail with error.


When --group parameter is missing the command will use "default" group.
when --instance-id is missing the command will create a new artifact for currently active service registry (visible in rhoas service-registry describe)
'''

[artifact.cmd.create.example]
one = '''
# Create an artifact in default group
rhoas service-registry artifact create my-artifact.json

# Create an artifact with specified type
rhoas service-registry artifact create --type=JSON my-artifact.json
'''

[artifact.cmd.create.error.invalidArtifactType]
one = 'invalid artifact type. Please use one of following values: {{.AllowedTypes}}'

[artifact.cmd.delete.description.short]
one = 'Deletes single or all artifacts in a given group'

[artifact.cmd.delete.description.long]
one = '''
Deletes single or all artifacts in a given group.

When called without arguments delete will delete all artifacts in the group
When --artifact-id is specified delete deletes only single artifact and its version
When --group parameter is missing the command will use "default" group.
'''

[artifact.cmd.delete.example]
one = '''
## Delete all artifacts in the group "default"
rhoas service-registry artifact delete

## Delete artifact in the group "default" with name "my-artifact"
rhoas service-registry artifact delete --artifact-id=my-artifact
'''

[artifact.cmd.get.description.short]
one = 'Get artifact by id and group'

[artifact.cmd.get.description.long]
one = '''
Get artifact by specifying id and group.
Command will fetch the latest artifact from the registry based on the artifact-id and group.

When --version is specified command will fetch the specific version of the artifact.
Get command will fetch artifacts based on --group and --artifact-id and --version.
For fetching artifacts using global identifiers please use "service-registry download" command
'''

[artifact.cmd.get.example]
one = '''
## Get latest artifact with name "my-artifact" and print it out to standard out
rhoas service-registry artifact get --artifact-id=my-artifact

## Get latest artifact with name "my-artifact" from group "my-group" and save it to artifact.json file
rhoas service-registry artifact get --artifact-id=my-artifact --group=my-group --output-file=artifact.json

## Get latest artifact and pipe it to other command
rhoas service-registry artifact get --artifact-id=my-artifact | grep -i 'user'

## Get artifact with custom version and print it out to standard out
rhoas service-registry artifact get --artifact-id=myartifact --version=4
'''

[artifact.cmd.list.description.short]
one = 'List artifacts'

[artifact.cmd.list.description.long]
one = 'List all artifacts for the group by specified output format (by default table)'

[artifact.cmd.list.example]
one = '''
## List all artifacts for the "default" artifacts group
rhoas service-registry artifact list

## List all artifacts with "my-group" group
rhoas service-registry artifact list --group=my-group

## List all artifacts with limit and group
rhoas service-registry artifact list --page=2 --limit=10
'''

[artifact.cmd.update.description.short]
one = 'Update artifact'

[artifact.cmd.update.description.long]
one = '''
Update artifact from file or directly standard input

Artifacts can be typically in JSON format for most of the supported types, but may be in another format for a few (for example, PROTOBUF).
The type of the content should be compatible with the current artifact's type.

When successful, this creates a new version of the artifact, making it the most recent (and therefore official) version of the artifact.

An artifact is update using the content provided in the body of the request.
This content is updated under a unique artifactId provided by user.
'''

[artifact.cmd.update.example]
one = '''
## update artifact from group and artifact-id
rhoas service-registry artifact update --artifact-id=my-artifact --group my-group my-artifact.json

## update artifact from group and artifact-id
rhoas service-registry artifact update --artifact-id=my-artifact --group my-group my-artifact.json
'''

[artifact.cmd.download.description.short]
one = 'Download artifacts from registry by using global identifiers'

[artifact.cmd.download.description.long]
one = '''
Get single or more artifacts by group, content, hash or globalIds.
NOTE: Use "service-registry get" command if you wish to download artifact by artifactId.

Flags are used to specify the artifact to download:

--contentId - id if the content from metadata
--globalId - globalId of the content from metadata
--hash - SHA-256 hash of the content
'''

[artifact.cmd.download.example]
one = '''
## Get latest artifact by content id
rhoas service-registry artifact download --content-id=183282932983

## Get latest artifact by content id to specific file
rhoas service-registry artifact download --content-id=183282932983 --output-file=schema.json

## Get latest artifact by global id
rhoas service-registry artifact download --global-id=383282932983

## Get latest artifact by hash
rhoas service-registry artifact download --hash=c71d239df91726fc519c6eb72d318ec65820627232b2f796219e87dcf35d0ab4
'''

[artifact.cmd.metadata.get.description.short]
one = 'Get artifact metadata'

[artifact.cmd.metadata.get.description.long]
one = '''
Gets the metadata for an artifact in the service registry.
The returned metadata includes both generated (read-only) and editable metadata (such as name and description).
'''

[artifact.cmd.metadata.get.example]
one = '''
## Get latest artifact metadata for default group
rhoas service-registry artifact metadata --artifact-id=my-artifact

## Get latest artifact metadata for my-group group
rhoas service-registry artifact metadata --artifact-id=my-artifact --group mygroup
'''


[artifact.cmd.metadata.set.description.short]
one = 'Update artifact metadata'

[artifact.cmd.metadata.set.description.long]
one = '''
Updates the metadata for an artifact in the service registry.
Editable metadata includes fields like name and description
'''

[artifact.cmd.metadata.set.example]
one = '''
##  Update the metadata for an artifact
rhoas service-registry artifact metadata-set --artifact-id=my-artifact --group=my-group --name=my-name --description=my-description

##  Update the metadata for an artifact using your default editor ($EDITOR)
rhoas service-registry artifact metadata-set --artifact-id=my-artifact

##  Update the metadata for an artifact using visual studio code
EDITOR="code -w" rhoas service-registry artifact metadata-set --artifact-id=my-artifact
'''

[artifact.cmd.versions.description.short]
one = 'Get latest artifact versions by artifact-id and group'

[artifact.cmd.versions.description.long]
one = 'Get latest artifact versions by specifying group and artifact-id'

[artifact.cmd.versions.example]
one = '''
## Get latest artifact versions for default group
rhoas service-registry artifact versions --artifact-id=my-artifact

## Get latest artifact versions for my-group group
rhoas service-registry artifact versions --artifact-id=my-artifact --group mygroup
'''
