[cluster.kubernetes.log.info.statusMessage]
one = '''
This command will link your cluster with Cloud Services by creating custom resources and secrets.
In case of problems please execute "rhoas cluster status" to check if your cluster is properly configured
'''

[cluster.kubernetes.statusInfo]
one = '''
Connection Details:

Apache Kafka instance:  {{.InstanceName}}
Kubernetes Namespace:   {{.Namespace}}
Service Account Secret: {{.ServiceAccountSecretName}}
'''

[cluster.kubernetes.error.configNotFoundError]
one = 'missing kubeconfig file'

[cluster.kubernetes.error.loadConfigError]
one = 'failed to load kubeconfig'

[cluster.kubernetes.connect.input.confirm.message]
one = 'Do you want to continue?'

[cluster.kubernetes.connect.log.debug.cancellingConnect]
one = 'Cancelling cluster connection'

[cluster.kubernetes.createKafkaCR.error.marshalError]
one = 'could not marshal KafkaConnection to JSON object'

[cluster.kubernetes.createKafkaCR.log.info.customResourceCreated]
one = 'KafkaConnection resource "{{.Name}}" has been created'

[cluster.kubernetes.watchForKafkaStatus.error.format]
one = '''invalid result from operator. Status object is not compatible with expected result from CLI.
'''

[cluster.kubernetes.watchForKafkaStatus.error.status]
one = '''error when processing KafkaConnection: %v
'''

[cluster.kubernetes.watchForKafkaStatus.log.info.success]
one = '''
KafkaConnection successfully installed on your cluster.
To view it execute:

oc get akc -o=yaml -n {{.Namespace}} {{.Name}}

'''

[cluster.kubernetes.watchForKafkaStatus.error.timeout]
one = '''process of watching KafkaConnection timed out'''

[cluster.kubernetes.watchForKafkaStatus.log.info.wait]
one = '''
Waiting for status from KafkaConnection resource.
Created KafkaConnection can be already injected to your application.

To bind you need to have Service Binding Operator installed:
https://github.com/redhat-developer/service-binding-operator
'''

[cluster.kubernetes.watchForKafkaStatus.binding]
one = '''
cat <<EOF | kubectl apply -f - 
apiVersion: binding.operators.coreos.com/v1alpha1
kind: ServiceBinding
metadata:
  name: kafka-config
  namespace: {{.Namespace}}
spec:
  application:
    group: apps
    name: name-of-your-application
    resource: deployments
    version: v1
    
  bindAsFiles: true
  services:
  - group: {{.Group}}
    version: {{.Version}}
    kind: {{.Kind}}
    name: {{.Name}}
EOF

'''



[cluster.kubernetes.serviceaccountsecret.error.createError]
one = 'could not create Service Account secret'

[cluster.kubernetes.tokensecret.log.info.found]
one = 'Access token already exist on the specified namespace'

[cluster.kubernetes.createTokenSecret.log.info.createSuccess]
one = 'Token Secret "{{.Name}}" created successfully'

[cluster.kubernetes.createSASecret.log.info.createSuccess]
one = 'Service Account Secret "{{.Name}}" created successfully'

[cluster.kubernetes.createTokenSecret.log.info.createFailed]
one = 'Creation of the "{{.Name}}" secret failed:'

[cluster.kubernetes.createServiceAccount.error.createError]
one = 'could not create service account'

[cluster.kubernetes.serviceaccountsecret.log.info.exist]
one = 'Service account secret already exist.'

[cluster.kubernetes.checkIfConnectionExist.existError]
one = 'KafkaConnection already exist'
