// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package connection

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/cli/pkg/api/managedservices"
	"sync"
)

// Ensure, that IConnectionMock does implement IConnection.
// If this is not the case, regenerate this file with moq.
var _ IConnection = &IConnectionMock{}

// IConnectionMock is a mock implementation of IConnection.
//
//     func TestSomethingThatUsesIConnection(t *testing.T) {
//
//         // make and configure a mocked IConnection
//         mockedIConnection := &IConnectionMock{
//             LogoutFunc: func(ctx context.Context) error {
// 	               panic("mock out the Logout method")
//             },
//             NewMASClientFunc: func() *managedservices.APIClient {
// 	               panic("mock out the NewMASClient method")
//             },
//             RefreshTokensFunc: func(ctx context.Context) (string, string, error) {
// 	               panic("mock out the RefreshTokens method")
//             },
//         }
//
//         // use mockedIConnection in code that requires IConnection
//         // and then make assertions.
//
//     }
type IConnectionMock struct {
	// LogoutFunc mocks the Logout method.
	LogoutFunc func(ctx context.Context) error

	// NewMASClientFunc mocks the NewMASClient method.
	NewMASClientFunc func() *managedservices.APIClient

	// RefreshTokensFunc mocks the RefreshTokens method.
	RefreshTokensFunc func(ctx context.Context) (string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Logout holds details about calls to the Logout method.
		Logout []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// NewMASClient holds details about calls to the NewMASClient method.
		NewMASClient []struct {
		}
		// RefreshTokens holds details about calls to the RefreshTokens method.
		RefreshTokens []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockLogout        sync.RWMutex
	lockNewMASClient  sync.RWMutex
	lockRefreshTokens sync.RWMutex
}

// Logout calls LogoutFunc.
func (mock *IConnectionMock) Logout(ctx context.Context) error {
	if mock.LogoutFunc == nil {
		panic("IConnectionMock.LogoutFunc: method is nil but IConnection.Logout was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockLogout.Lock()
	mock.calls.Logout = append(mock.calls.Logout, callInfo)
	mock.lockLogout.Unlock()
	return mock.LogoutFunc(ctx)
}

// LogoutCalls gets all the calls that were made to Logout.
// Check the length with:
//     len(mockedIConnection.LogoutCalls())
func (mock *IConnectionMock) LogoutCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockLogout.RLock()
	calls = mock.calls.Logout
	mock.lockLogout.RUnlock()
	return calls
}

// NewMASClient calls NewMASClientFunc.
func (mock *IConnectionMock) NewMASClient() *managedservices.APIClient {
	if mock.NewMASClientFunc == nil {
		panic("IConnectionMock.NewMASClientFunc: method is nil but IConnection.NewMASClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNewMASClient.Lock()
	mock.calls.NewMASClient = append(mock.calls.NewMASClient, callInfo)
	mock.lockNewMASClient.Unlock()
	return mock.NewMASClientFunc()
}

// NewMASClientCalls gets all the calls that were made to NewMASClient.
// Check the length with:
//     len(mockedIConnection.NewMASClientCalls())
func (mock *IConnectionMock) NewMASClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNewMASClient.RLock()
	calls = mock.calls.NewMASClient
	mock.lockNewMASClient.RUnlock()
	return calls
}

// RefreshTokens calls RefreshTokensFunc.
func (mock *IConnectionMock) RefreshTokens(ctx context.Context) (string, string, error) {
	if mock.RefreshTokensFunc == nil {
		panic("IConnectionMock.RefreshTokensFunc: method is nil but IConnection.RefreshTokens was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRefreshTokens.Lock()
	mock.calls.RefreshTokens = append(mock.calls.RefreshTokens, callInfo)
	mock.lockRefreshTokens.Unlock()
	return mock.RefreshTokensFunc(ctx)
}

// RefreshTokensCalls gets all the calls that were made to RefreshTokens.
// Check the length with:
//     len(mockedIConnection.RefreshTokensCalls())
func (mock *IConnectionMock) RefreshTokensCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRefreshTokens.RLock()
	calls = mock.calls.RefreshTokens
	mock.lockRefreshTokens.RUnlock()
	return calls
}
