[connector.cluster.addonParams.cmd.shortDescription]
one = 'Get Connectors add-on parameters'

[connector.cluster.addonParams.cmd.longDescription]
one = 'Get a list of the OpenShift Connectors service add-on parameters'

[connector.cluster.addonParams.cmd.example]
one = '''
# Get a list of the OpenShift Connectors service add-on parameters
rhoas connector cluster addon-parameters
'''

[connector.cluster.cmd.shortDescription]
one = 'Create, delete, and list Connectors clusters'

[connector.cluster.cmd.longDescription]
one = '''
A Connectors cluster is an OpenShift Dedicated instance for deploying your Connectors instances. Use the "connector cluster" command to create, delete, and view a list of Connectors clusters.
'''

[connector.cluster.cmd.example]
one = '''
# Create a Connectors cluster that is named "my-connectors-cluster"
rhoas connector cluster create --name=my-connectors-cluster

# Delete a Connectors cluster that has ID c980124otd37bufiemj0
rhoas connector cluster delete --id=c980124otd37bufiemj0

# List Connectors clusters
rhoas connector cluster list
'''

[connector.cluster.create.cmd.shortDescription]
one = 'Create a Connectors cluster'

[connector.cluster.create.cmd.longDescription]
one = 'Create a Connectors cluster and specify its name. You must have administrator access to run this command.'

[connector.cluster.create.flag.name.description]
one = 'Name of the Connectors cluster to create'

[connector.cluster.create.cmd.example]
one = '''
# Create a Connectors cluster that is named "my-connectors-cluster"
rhoas connector cluster create --name=my-connectors-cluster
'''

[connector.sa.created]
one = '''
Service account created.
Name: {{.Name}}
Client ID: {{.ClientId}}  
Secret: {{.ClientSecret}}
'''

[connector.cluster.create.info.success]
one = 'Successfully created the Connectors cluster named "{{.NAME}}" '

[connector.cluster.delete.cmd.shortDescription]
one = 'Delete a Connectors cluster'

[connector.cluster.delete.cmd.longDescription]
one = '''
Delete a Connectors cluster by specifying its cluster ID. To see a list of all Connectors clusters and their ID values, use the "connector cluster list" command.
'''

[connector.cluster.delete.cmd.example]
one = '''
# Delete a Connectors cluster that has ID c980124otd37bufiemj0
rhoas connector cluster delete --id=c980124otd37bufiemj0
'''

[connector.cluster.delete.id.flag.description]
one = 'The ID of the Connectors cluster to delete'

[connector.cluster.delete.info.success]
one = 'Successfully deleted the Connectors cluster'

[connector.cluster.delete.confirmDialog.message]
one = 'Are you sure that you want to delete the Connectors cluster with ID "{{.ID}}"?'

[connector.cluster.list.cmd.shortDescription]
one = 'List the Connectors clusters'

[connector.cluster.list.cmd.longDescription]
one = '''List all Connectors clusters in the OpenShift Dedicated environment. The returned list includes the ID value for each Connectors cluster.
'''
[connector.cluster.list.cmd.example]
one = '''
# List Connectors clusters
rhoas connector cluster list
'''

[connector.cluster.update.cmd.shortDescription]
one = 'Update a Connectors cluster'

[connector.cluster.update.cmd.longDescription]
one = 'Update a Connectors cluster'

[connector.cluster.update.cmd.example]
one = '''
# Update name of a connector cluster
rhoas connector cluster update --id cdh0s0bjdpqd9bgomcbg --name my-connector

# Update annotations of a connector cluster
rhoas connector cluster update --id cdh0s0bjdpqd9bgomcbg --annotations h1=head
'''

[connector.cluster.update.flag.id.description]
one = 'ID of the Connectors cluster to update'

[connector.cluster.update.flag.name.description]
one = 'Name of the Connectors cluster'

[connector.cluster.update.flag.annotations.description]
one = 'comma-separated list of string annotations in `key=value` format'

[connector.cluster.update.log.info.nothingToUpdate]
one = 'Nothing to update'

[connector.cluster.update.log.info.updateSuccess]
one = 'Connectors cluster has been updated.'

[connector.cluster.update.error.notFound]
one = 'Connectors cluster with ID "{{.ID}}" does not exist'

[connector.cluster.update.error.authTokenInvalid]
one = 'The auth token used is invalid when updating connectors cluster'

[connector.cluster.update.error.doesNotExistAnymore]
one = 'The requested resource does not exist anymore'

[connector.cluster.type.create.error.other]

[connector.common.id.flag]
one = 'Unique identifier'

[connector.common.list.flag.page]
one = 'Page number'

[connector.common.list.flag.limit]
one = 'Page limit'

[connector.common.log.info.noResults]
one = 'No results returned from the current command'

[connector.common.validation.namespace.error.invalidChars]
one = 'Invalid name for namespace "{{.Name}}"'

[connector.cmd.shortDescription]
one = 'Connectors commands'

[connector.cmd.longDescription]
one = '''
With Red Hat OpenShift Connectors, you can create and configure connections between Red Hat OpenShift Streams for Apache Kafka and third-party systems. You can configure Connectors that retrieve data (data source Connectors) and Connectors that specify where to send data (data sink Connectors).

To get started:
1. Decide which type of connector you want to create.
   Use the "rhoas connector type list" command to see a list of connector types
2. Build a configuration file based on one of the connector types.
   Use the "rhoas connector build" command to build a configuration file.
3. Optionally, edit the configuration file.
   Use a text editor of your choice to edit the configuration file.
4. Create a Connectors instance by specifying the configuration file.
   Use the "rhoas connector create" command to create a Connectors instance.
5. Start the Connectors instance by using the "rhoas connector start" command.
6. Stop the Connectors instance by using the "rhoas connector stop" command.
'''

[connector.cmd.example]
one = '''   
# List all connector types
rhoas connector type list

# Build a Connectors configuration file named "my_aws_lambda_connector.json" that is based on the "aws_lambda_sink_0.1" connector type
rhoas connector build --name=my_aws_lambda_connector --type=--type=aws_lambda_sink_0.1

# Create a Connectors instance by specifying a configuration file
rhoas connector create --file=myconnector.json

# Update an existing Connectors instance by specifying a configuration file
rhoas connector update --id=my-connector --file=myconnector.json

# List of Connectors instances
rhoas connector list

# Start the Connectors instance with ID my-connector
rhoas connector start --id=my-connector

# Stop the current Connectors instance
rhoas connector stop

# Delete a Connectors instance with ID my-connector
rhoas connector delete --id=my-connector
'''

[connector.type.cmd.shortDescription]
description = "Short description of connector type command"
one = 'View a list of supported connector types'

[connector.type.cmd.longDescription]
description = "Long description of connector type command"
one = '''
List and get details of connector types that are available in the connector catalog. 

To see a list of all available connector types, use the "type list" command.
You can optionally use the "--search" flag to filter the requested results by Connector types that start with or contain text that you specify. 

To see a description of a specific connector type, use the "type details" command.
'''

[connector.type.cmd.example]
description = "Example commands for connector type"
one = '''
# List all connector types
rhoas connector type list

# List all connector types that start with "Amazon"
rhoas connector type list --search=Amazon%

# Get all of the details for the connector type by specifying the type ID
rhoas connector type describe --type=aws_kinesis_sink_0.1
'''

[connector.type.list.cmd.shortDescription]
description = "Short description of connector type list command"
one = 'List connector types'

[connector.type.list.cmd.longDescription]
description = "Long description of connector type list command"
one = '''
List the types of connectors that are available in the Connectors catalog.'

Use filter options, such as --limit, --page, and --search
'''

[connector.type.list.cmd.example]
description = "Example commands for connector type list"
one = '''
# List all connector types
rhoas connector type list

# List connector types with a limit of 10 connector types and 2 pages
rhoas connector type list --limit=10 --page=2

# List all connector types that start with "Amazon"
rhoas connector type list --search=Amazon%

# List all connector types that contain the word "Amazon"
rhoas connector type list --search=%Amazon%
'''

[connector.type.list.flag.page.description]
one = 'Page of the list based on the limit value'

[connector.type.list.flag.search.description]
one = 'Search query for name of connector type'

[connector.type.list.flag.limit.description]
one = 'The maximum number of connector types to return in a page'

[connector.type.describe.info.success]
one = 'The connector type details were returned successfully'

[connector.type.error.notFound]
one = 'The connector type with ID "{{.Id}}" does not exist'

[connector.type.error.noType]
one = 'No type ID was passed to the command'

[connector.type.create.error.other]
one = 'error returned by the API when creating a Connectors instance: {{.Error}}'

[connector.type.describe.flag.id]
one = 'The ID of the connector type that you want to get details about'

[connector.type.describe.cmd.shortDescription]
one = 'Get the details of a connector type'

[connector.type.describe.cmd.longDescription]
one = 'Get the full list of details for a connector type by using its type ID'

[connector.type.describe.cmd.example]
one = '''
# Describe connector type with ID of "slack_source_0.1"
rhoas connector type describe --type=slack_source_0.1 

# Describe the connector type with ID of "slack_source_0.1" and use YAML for the output format
rhoas connector type describe --type=slack_source_0.1 -o yaml
'''

[connector.build.cmd.shortDescription]
one = 'Build a configuration file based on a connector type'

[connector.build.cmd.longDescription]
one = '''
Build a configuration file by specifying a connector type.

For a list of available connector types, use the "connector type list" command.

The "connector build" command prompts you to provide values for the connector configuration properties.

After you build a configuration file, you can optionally edit it in a text editor.

You can then create a Connectors instance by using the "connector create" command and providing the name of the configuration file that you built.
'''

[connector.build.cmd.example]
one = '''
# Build a Connectors configuration file based on the "aws_lambda_sink_0.1" connector type. The default configuration file name is "connector.json"
rhoas connector build --type=aws_lambda_sink_0.1

# Build a Connectors configuration file named "my_aws_lambda_connector.json" that is based on the "aws_lambda_sink_0.1" connector type. Use "my-aws-lamda-sink.json" for the configuration file name.
rhoas connector build --name=my_aws_lambda_connector --type=aws_lambda_sink_0.1 --output-file=my-aws-lamda-sink.json
''' 

[connector.create.cmd.shortDescription]
one = 'Create a Connectors instance'

[connector.create.cmd.longDescription]
one = '''
Create a Connectors instance. 

A Connectors instance is an instance of a one of the supported Connectors types.
Use the "connector" command to create, delete, and view a list of Connectors instances.

Before you create a Connectors instance:
- Create a Kafka instance. Use the "rhoas kafka create" command.
- Create a service account (you need the service account ID and secret). Use the "rhoas service-account create" command.
- Create a Kafka topic. Use the "rhoas kafka topic create" command.
- Create a Connectors namespace. Use the "rhoas connector namespace create" command.
- Create a configuration file for the type of connector that you want to create. Use the "rhoas connector build" command. 
'''

[connector.create.cmd.example]
one = '''
# Create a Connectors instance by specifying a configuration file
rhoas connector create --file=myconnector.json
'''

[connector.start.cmd.shortDescription]
one = 'Start a Connectors instance'

[connector.start.cmd.longDescription]
one = 'Start the current Connectors instance or start a Connectors instance by specifying its ID'

[connector.start.cmd.example]
one = '''
# Start the current Connectors instance
rhoas connector start

# Start a Connectors instance by specifying its ID
rhoas connector start --id=IJD76DUH675234
'''

[connector.stop.cmd.shortDescription]
one = 'Stop a Connectors instance'

[connector.stop.cmd.longDescription]
one = 'Stop the current Connectors instance or stop a Connectors instance by providing its ID.'

[connector.stop.cmd.example]
one = '''
# Stop the current Connectors instance
rhoas connector stop

# Stop a Connectors instance by specifying its ID
rhoas connector stop --id=IJD76DUH675234
'''

[connector.create.info.success]
one = 'Successfully created the Connectors instance'

[connector.create.input.message]
one = '{{.Field}}:'

[connector.create.interactive.error]
one = 'The connector configuration file is missing a required value for: {{.Field}}'

[connector.create.start]
one = 'Creating a Connectors instance based on the connector configuration file'

[connector.update.cmd.shortDescription]
one = 'Update a Connectors instance'

[connector.update.cmd.longDescription]
one = '''
Update a Connectors instance.

You can change the details of an existing Connectors instance by editing its configuration file in a text editor. 

Note: To specify an editor, use the EDITOR environment variable before you run the "rhoas connector update" command. For example:
export EDITOR=nvim
export EDITOR=vim
export EDITOR="code -w"

After you edit the configuration file, use the "connector update" command to update an existing Connectors instance by specifying the configuration file.
'''

[connector.update.cmd.example]
one = '''
# Update name of the current Connectors instance
rhoas connector update --name=my-connector

# Update Kafka Instance of a Connectors instance by ID
rhoas connector update --kafka-id ce6pg07k09f3rs6us7sg --id ce6tgb1mk0orirpo5i70
'''

[connector.update.info.success]
one = 'Successfully updated the Connectors instance'

[connector.file.flag.description]
one = 'The location of the configuration file that defines the Connectors instance'

[connector.flag.kafka.description]
one = 'ID of the Kafka instance (the default is the Kafka instance for the current context)'

[connector.flag.kafkaID.description]
one = 'ID of of the Kafka instance that you want the Connectors instance to use'

[connector.flag.namespace.description]
one = 'ID of the namespace for the Connectors instance (the default is the namespace for the current context)'

[connector.flag.id.description]
one = 'ID of the Connectors instance to be updated (the default is the instance in current context)'

[connector.flag.name.description]
one = 'Override the name of the Connectors instance (the default name is the name specified in the connector configuration file)'

[connector.flag.sa.description]
one = 'If set, the Connectors instance is created with the specified service account'

[connector.build.file.flag.description]
one = 'The file name of the connector configuration file'

[connector.build.name.flag.description]
one = 'The name of the connector type that was used to build a configuration file'

[connector.build.overwrite.flag.description]
one = 'Overwrite the file if it aready exists'

[connector.build.info.msg]
one = 'Creating a connector configuraton file'

[connector.build.type.flag.description]
one = 'The type of the connector in the catalog - this value is the same as the ID value for the connector in the catalog'

[connector.build.info.success]
one = '''
The connector configuration file was successfully created.

Optionally, you can edit the configuration file in your text editor.

Note that you can leave the service account and the namespace values empty in the configuration file. You specify those values when you create a Connectors instance. 

To create a Connectors instance, use the "rhoas connector create --file={{.PATH}}" command.
'''

[connector.delete.cmd.shortDescription]
one = 'Delete a Connectors instance'

[connector.delete.cmd.longDescription]
one = 'Delete a Connectors instance by specifying its ID. Use the "connector list" command to see a list of all Connectors instances, their names, and their ID values.'

[connector.delete.cmd.example]
one = '''
# Delete a Connectors instance with ID "myconnector"
rhoas connector delete --id=myconnector
'''

[connector.delete.flag.id.description]
one = 'The ID of the Connectors instance to delete'

[connector.delete.info.success]
one = 'Successfully deleted the Connectors instance'

[connector.delete.confirmDialog.message]
one = 'Are you sure that you want to delete the Connectors instance with ID "{{.ID}}"?'

[connector.describe.cmd.shortDescription]
one = 'Get the details for the Connectors instance'

[connector.describe.cmd.longDescription]
one = 'Get the details for the Connectors instance by specifying its ID. Use the "connector list" command to see a list of all Connectors instances, their names, and their ID values.'

[connector.describe.cmd.example]
one = '''
#Get the Connectors instance details
rhoas connector describe --id=c980124otd37bufiemj0
'''

[connector.common.flag.id.description]
one = 'The ID for the Connectors instance'

[connector.common.flag.name.description]
one = 'The name for the Connectors instance'

[connector.describe.info.success]
one = 'The Connectors instance details were returned successfully'

[connector.list.cmd.shortDescription]
one = 'List of Connectors instances'

[connector.list.cmd.longDescription]
one = '''
List of Connectors instances. The returned list includes the ID and name for each Connectors instance.
'''

[connector.list.cmd.example]
one = '''
# List of Connectors instance
rhoas connector list
'''

[connector.namespace.cmd.shortDescription]
one = 'Connectors namespace commands'

[connector.namespace.cmd.longDescription]
one = '''
Commands to manage namespaces for Connectors. A Connectors namespace is the logical hosting location for deploying your Connectors instances on a Connectors cluster.

For your own OpenShift Dedicated environment, a Connectors namespace does not automatically expire. You use the information about your Connectors namespace to configure the OpenShift Connectors add-on so that you can use Connectors.

For the Service Preview evaluation site, a Connectors namespace expires 48 hours after you create it.
'''

[connector.namespace.cmd.example]
one = '''
# Create a Connectors namespace
rhoas connector namespace create --name "eval-namespace"

# List the namespaces for the Connectors cluster
$ rhoas connector namespace list
'''

[connector.namespace.create.flag.name.description]
one = 'The name of the Connectors namespace'

[connector.namespace.create.flag.eval.description]
one = 'Create an evaluation Connectors namespace'

[connector.namespace.list.cmd.shortDescription]
one = 'Get a list of Connectors namespaces'

[connector.namespace.list.cmd.longDescription]
one = '''
Get a list of Connectors namespaces for the Connectors cluster. The "connector namespace list" command returns details about the namespaces including their ID values.
'''

[connector.namespace.list.cmd.example]
one = '''
# Get a list of Connectors namespaces
rhoas connector namespace list
'''

[connector.namespace.create.cmd.shortDescription]
one = 'Create a Connectors namespace'

[connector.namespace.create.cmd.longDescription]
one = 'Create a Connectors namespace'

[connector.namespace.create.cmd.example]
one = '''
# Create a Connectors namespace and name it "my-namespace"
rhoas connector namespace create --name my-namespace
'''

[connector.namespace.create.info.success]
one = 'Successfully created the "{{.Name}}" namespace'

[connector.namespace.delete.cmd.shortDescription]
one = 'Delete a Connectors namespace'

[connector.namespace.delete.cmd.longDescription]
one = 'Delete a Connectors namespace by specifying its ID. Use the "connector namespace list" command to see a list of all Connectors namespaces and their ID values.'

[connector.namespace.delete.cmd.example]
one = '''
# Delete the Connectors namespace with ID jdhdhdhmmf
rhoas connector namespace delete --id jdhdhdhmmf
'''

[connector.namespace.delete.info.success]
one = 'Successfully deleted the namespace'

[connector.namespace.delete.confirmDialog.message]
one = 'Are you sure that you want to delete the Connectors namespace with id "{{.ID}}"?'

[connector.use.error.idOrNameRequired]
one= 'You must provide the --id flag or the --name flag to identify the current Connectors instance'

[connector.use.flag.id]
description = 'Description for the --id flag'
one = 'The unique ID of the Connectors instance that you want to set as the current instance'

[connector.use.flag.name]
description = 'Description for the --name flag'
one = 'The name of the Connectors instance that you want to set as the current instance'

[connector.use.log.info.useSuccess]
description = 'Info message when current connector was set'
one = 'Connectors instance "{{.Name}}" is now the current instance'

[kafka.common.log.info.noKafkaInstances]
description = 'Info message when no Kafka instances were found'
one = 'No Kafka instances were found.'

[connector.error.interactive.noConnectors]
description = 'Info message when no Connectors instances were found when selecting in interactive mode'
one = 'No Connectors instances were found.'

[connector.error.interactive.noNamespaces]
description = 'Info message when no Connectors namespace instances were found when selecting in interactive mode'
one = 'No namespaces were found to select from, try creating one'

[connector.common.input.instanceName.message]
one = 'Set the Connectors namespace:'

[connector.use.cmd.shortDescription]
description = "Short description for command"
one = "Set the current Connectors instance"

[connector.use.cmd.longDescription]
description = "Long description for command"
one = '''
Set a Connectors instance as the current instance. The rhoas CLI uses the 
current Connectors instance when you run any "rhoas connector cluster" commands.

You can set a Connectors instance as the current instance by providing its name or ID.
'''

[connector.use.cmd.example]
description = 'Examples of how to use the command'
one = '''
# Set the current Connectors instance by providing the name of a Connectors instance
$ rhoas connector use --name=my-connector

# Set the current Connectors instance by providing the ID of a Connectors instance
$ rhoas connector use --id=1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
'''

[connector.common.error.idNotFound]
description = "Error message for when a Connectors instance ID is not found"
one = "Connectors instance with ID {{.ID}} not found"

[connector.common.error.nameNotFound]
description = "Error message for when a Connectors instance name is not found"
one = "Connectors instance with name {{.Name}} not found"

[connector.common.error.unauthorized]
one = 'Auth token provided is invalid'

[connector.common.error.parse.search]
one = 'Failed to parse search query'

[connector.common.error.internalServerError]
one = 'Unexpected internal server error occured'

[connector.message.reading.file.error]
one = 'supplied file is invalid. Make sure that the file exists and that it contains a connector configuration'

[connector.common.error.FileAlreadyExists]
one = 'provided {{.Name}} file already exists. Specify the --overwrite flag if you want to overwrite the existing file'

[connector.interactive.error]
one = 'The connector configuration is missing a required value for: {{.Field}}'

[connector.type.update.error.other]
one = 'Error while updating Connectors instance {{.Error}}'

[connector.update.error.authTokenInvalid]
one = 'The auth token used is invalid when updating connector'

[connector.update.error.noMatchingResource]
one = 'There was no matching resource to the one requested when updating the Connectors instance'

[connector.update.error.doesNotExistAnymore]
one = 'The requested resource does not exist anymore'

[connector.update.error.unexpectedError]
one = 'Unexpected error occured when updating the Connectors instance'

[connector.update.info.editor.open]
one = 'Opening a text editor to edit the Connectors instance details, close the text editor to continue'

[connector.common.page.prompt]
one = 'Page'

