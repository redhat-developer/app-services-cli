// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafkamgmtv1

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that DefaultApiMock does implement DefaultApi.
// If this is not the case, regenerate this file with moq.
var _ DefaultApi = &DefaultApiMock{}

// DefaultApiMock is a mock implementation of DefaultApi.
//
// 	func TestSomethingThatUsesDefaultApi(t *testing.T) {
//
// 		// make and configure a mocked DefaultApi
// 		mockedDefaultApi := &DefaultApiMock{
// 			CreateKafkaFunc: func(ctx _context.Context) ApiCreateKafkaRequest {
// 				panic("mock out the CreateKafka method")
// 			},
// 			CreateKafkaExecuteFunc: func(r ApiCreateKafkaRequest) (KafkaRequest, *_nethttp.Response, error) {
// 				panic("mock out the CreateKafkaExecute method")
// 			},
// 			CreateServiceAccountFunc: func(ctx _context.Context) ApiCreateServiceAccountRequest {
// 				panic("mock out the CreateServiceAccount method")
// 			},
// 			CreateServiceAccountExecuteFunc: func(r ApiCreateServiceAccountRequest) (ServiceAccount, *_nethttp.Response, error) {
// 				panic("mock out the CreateServiceAccountExecute method")
// 			},
// 			DeleteKafkaByIdFunc: func(ctx _context.Context, id string) ApiDeleteKafkaByIdRequest {
// 				panic("mock out the DeleteKafkaById method")
// 			},
// 			DeleteKafkaByIdExecuteFunc: func(r ApiDeleteKafkaByIdRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the DeleteKafkaByIdExecute method")
// 			},
// 			DeleteServiceAccountFunc: func(ctx _context.Context, id string) ApiDeleteServiceAccountRequest {
// 				panic("mock out the DeleteServiceAccount method")
// 			},
// 			DeleteServiceAccountExecuteFunc: func(r ApiDeleteServiceAccountRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the DeleteServiceAccountExecute method")
// 			},
// 			GetKafkaByIdFunc: func(ctx _context.Context, id string) ApiGetKafkaByIdRequest {
// 				panic("mock out the GetKafkaById method")
// 			},
// 			GetKafkaByIdExecuteFunc: func(r ApiGetKafkaByIdRequest) (KafkaRequest, *_nethttp.Response, error) {
// 				panic("mock out the GetKafkaByIdExecute method")
// 			},
// 			GetMetricsByInstantQueryFunc: func(ctx _context.Context, id string) ApiGetMetricsByInstantQueryRequest {
// 				panic("mock out the GetMetricsByInstantQuery method")
// 			},
// 			GetMetricsByInstantQueryExecuteFunc: func(r ApiGetMetricsByInstantQueryRequest) (MetricsInstantQueryList, *_nethttp.Response, error) {
// 				panic("mock out the GetMetricsByInstantQueryExecute method")
// 			},
// 			GetMetricsByRangeQueryFunc: func(ctx _context.Context, id string) ApiGetMetricsByRangeQueryRequest {
// 				panic("mock out the GetMetricsByRangeQuery method")
// 			},
// 			GetMetricsByRangeQueryExecuteFunc: func(r ApiGetMetricsByRangeQueryRequest) (MetricsRangeQueryList, *_nethttp.Response, error) {
// 				panic("mock out the GetMetricsByRangeQueryExecute method")
// 			},
// 			GetServiceAccountByIdFunc: func(ctx _context.Context, id string) ApiGetServiceAccountByIdRequest {
// 				panic("mock out the GetServiceAccountById method")
// 			},
// 			GetServiceAccountByIdExecuteFunc: func(r ApiGetServiceAccountByIdRequest) (ServiceAccount, *_nethttp.Response, error) {
// 				panic("mock out the GetServiceAccountByIdExecute method")
// 			},
// 			ListCloudProviderRegionsFunc: func(ctx _context.Context, id string) ApiListCloudProviderRegionsRequest {
// 				panic("mock out the ListCloudProviderRegions method")
// 			},
// 			ListCloudProviderRegionsExecuteFunc: func(r ApiListCloudProviderRegionsRequest) (CloudRegionList, *_nethttp.Response, error) {
// 				panic("mock out the ListCloudProviderRegionsExecute method")
// 			},
// 			ListCloudProvidersFunc: func(ctx _context.Context) ApiListCloudProvidersRequest {
// 				panic("mock out the ListCloudProviders method")
// 			},
// 			ListCloudProvidersExecuteFunc: func(r ApiListCloudProvidersRequest) (CloudProviderList, *_nethttp.Response, error) {
// 				panic("mock out the ListCloudProvidersExecute method")
// 			},
// 			ListKafkasFunc: func(ctx _context.Context) ApiListKafkasRequest {
// 				panic("mock out the ListKafkas method")
// 			},
// 			ListKafkasExecuteFunc: func(r ApiListKafkasRequest) (KafkaRequestList, *_nethttp.Response, error) {
// 				panic("mock out the ListKafkasExecute method")
// 			},
// 			ListServiceAccountsFunc: func(ctx _context.Context) ApiListServiceAccountsRequest {
// 				panic("mock out the ListServiceAccounts method")
// 			},
// 			ListServiceAccountsExecuteFunc: func(r ApiListServiceAccountsRequest) (ServiceAccountList, *_nethttp.Response, error) {
// 				panic("mock out the ListServiceAccountsExecute method")
// 			},
// 			ResetServiceAccountCredsFunc: func(ctx _context.Context, id string) ApiResetServiceAccountCredsRequest {
// 				panic("mock out the ResetServiceAccountCreds method")
// 			},
// 			ResetServiceAccountCredsExecuteFunc: func(r ApiResetServiceAccountCredsRequest) (ServiceAccount, *_nethttp.Response, error) {
// 				panic("mock out the ResetServiceAccountCredsExecute method")
// 			},
// 			ServiceStatusFunc: func(ctx _context.Context) ApiServiceStatusRequest {
// 				panic("mock out the ServiceStatus method")
// 			},
// 			ServiceStatusExecuteFunc: func(r ApiServiceStatusRequest) (ServiceStatus, *_nethttp.Response, error) {
// 				panic("mock out the ServiceStatusExecute method")
// 			},
// 			VersionMetadataFunc: func(ctx _context.Context) ApiVersionMetadataRequest {
// 				panic("mock out the VersionMetadata method")
// 			},
// 			VersionMetadataExecuteFunc: func(r ApiVersionMetadataRequest) (VersionMetadata, *_nethttp.Response, error) {
// 				panic("mock out the VersionMetadataExecute method")
// 			},
// 		}
//
// 		// use mockedDefaultApi in code that requires DefaultApi
// 		// and then make assertions.
//
// 	}
type DefaultApiMock struct {
	// CreateKafkaFunc mocks the CreateKafka method.
	CreateKafkaFunc func(ctx _context.Context) ApiCreateKafkaRequest

	// CreateKafkaExecuteFunc mocks the CreateKafkaExecute method.
	CreateKafkaExecuteFunc func(r ApiCreateKafkaRequest) (KafkaRequest, *_nethttp.Response, error)

	// CreateServiceAccountFunc mocks the CreateServiceAccount method.
	CreateServiceAccountFunc func(ctx _context.Context) ApiCreateServiceAccountRequest

	// CreateServiceAccountExecuteFunc mocks the CreateServiceAccountExecute method.
	CreateServiceAccountExecuteFunc func(r ApiCreateServiceAccountRequest) (ServiceAccount, *_nethttp.Response, error)

	// DeleteKafkaByIdFunc mocks the DeleteKafkaById method.
	DeleteKafkaByIdFunc func(ctx _context.Context, id string) ApiDeleteKafkaByIdRequest

	// DeleteKafkaByIdExecuteFunc mocks the DeleteKafkaByIdExecute method.
	DeleteKafkaByIdExecuteFunc func(r ApiDeleteKafkaByIdRequest) (Error, *_nethttp.Response, error)

	// DeleteServiceAccountFunc mocks the DeleteServiceAccount method.
	DeleteServiceAccountFunc func(ctx _context.Context, id string) ApiDeleteServiceAccountRequest

	// DeleteServiceAccountExecuteFunc mocks the DeleteServiceAccountExecute method.
	DeleteServiceAccountExecuteFunc func(r ApiDeleteServiceAccountRequest) (Error, *_nethttp.Response, error)

	// GetKafkaByIdFunc mocks the GetKafkaById method.
	GetKafkaByIdFunc func(ctx _context.Context, id string) ApiGetKafkaByIdRequest

	// GetKafkaByIdExecuteFunc mocks the GetKafkaByIdExecute method.
	GetKafkaByIdExecuteFunc func(r ApiGetKafkaByIdRequest) (KafkaRequest, *_nethttp.Response, error)

	// GetMetricsByInstantQueryFunc mocks the GetMetricsByInstantQuery method.
	GetMetricsByInstantQueryFunc func(ctx _context.Context, id string) ApiGetMetricsByInstantQueryRequest

	// GetMetricsByInstantQueryExecuteFunc mocks the GetMetricsByInstantQueryExecute method.
	GetMetricsByInstantQueryExecuteFunc func(r ApiGetMetricsByInstantQueryRequest) (MetricsInstantQueryList, *_nethttp.Response, error)

	// GetMetricsByRangeQueryFunc mocks the GetMetricsByRangeQuery method.
	GetMetricsByRangeQueryFunc func(ctx _context.Context, id string) ApiGetMetricsByRangeQueryRequest

	// GetMetricsByRangeQueryExecuteFunc mocks the GetMetricsByRangeQueryExecute method.
	GetMetricsByRangeQueryExecuteFunc func(r ApiGetMetricsByRangeQueryRequest) (MetricsRangeQueryList, *_nethttp.Response, error)

	// GetServiceAccountByIdFunc mocks the GetServiceAccountById method.
	GetServiceAccountByIdFunc func(ctx _context.Context, id string) ApiGetServiceAccountByIdRequest

	// GetServiceAccountByIdExecuteFunc mocks the GetServiceAccountByIdExecute method.
	GetServiceAccountByIdExecuteFunc func(r ApiGetServiceAccountByIdRequest) (ServiceAccount, *_nethttp.Response, error)

	// ListCloudProviderRegionsFunc mocks the ListCloudProviderRegions method.
	ListCloudProviderRegionsFunc func(ctx _context.Context, id string) ApiListCloudProviderRegionsRequest

	// ListCloudProviderRegionsExecuteFunc mocks the ListCloudProviderRegionsExecute method.
	ListCloudProviderRegionsExecuteFunc func(r ApiListCloudProviderRegionsRequest) (CloudRegionList, *_nethttp.Response, error)

	// ListCloudProvidersFunc mocks the ListCloudProviders method.
	ListCloudProvidersFunc func(ctx _context.Context) ApiListCloudProvidersRequest

	// ListCloudProvidersExecuteFunc mocks the ListCloudProvidersExecute method.
	ListCloudProvidersExecuteFunc func(r ApiListCloudProvidersRequest) (CloudProviderList, *_nethttp.Response, error)

	// ListKafkasFunc mocks the ListKafkas method.
	ListKafkasFunc func(ctx _context.Context) ApiListKafkasRequest

	// ListKafkasExecuteFunc mocks the ListKafkasExecute method.
	ListKafkasExecuteFunc func(r ApiListKafkasRequest) (KafkaRequestList, *_nethttp.Response, error)

	// ListServiceAccountsFunc mocks the ListServiceAccounts method.
	ListServiceAccountsFunc func(ctx _context.Context) ApiListServiceAccountsRequest

	// ListServiceAccountsExecuteFunc mocks the ListServiceAccountsExecute method.
	ListServiceAccountsExecuteFunc func(r ApiListServiceAccountsRequest) (ServiceAccountList, *_nethttp.Response, error)

	// ResetServiceAccountCredsFunc mocks the ResetServiceAccountCreds method.
	ResetServiceAccountCredsFunc func(ctx _context.Context, id string) ApiResetServiceAccountCredsRequest

	// ResetServiceAccountCredsExecuteFunc mocks the ResetServiceAccountCredsExecute method.
	ResetServiceAccountCredsExecuteFunc func(r ApiResetServiceAccountCredsRequest) (ServiceAccount, *_nethttp.Response, error)

	// ServiceStatusFunc mocks the ServiceStatus method.
	ServiceStatusFunc func(ctx _context.Context) ApiServiceStatusRequest

	// ServiceStatusExecuteFunc mocks the ServiceStatusExecute method.
	ServiceStatusExecuteFunc func(r ApiServiceStatusRequest) (ServiceStatus, *_nethttp.Response, error)

	// VersionMetadataFunc mocks the VersionMetadata method.
	VersionMetadataFunc func(ctx _context.Context) ApiVersionMetadataRequest

	// VersionMetadataExecuteFunc mocks the VersionMetadataExecute method.
	VersionMetadataExecuteFunc func(r ApiVersionMetadataRequest) (VersionMetadata, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateKafka holds details about calls to the CreateKafka method.
		CreateKafka []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateKafkaExecute holds details about calls to the CreateKafkaExecute method.
		CreateKafkaExecute []struct {
			// R is the r argument value.
			R ApiCreateKafkaRequest
		}
		// CreateServiceAccount holds details about calls to the CreateServiceAccount method.
		CreateServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateServiceAccountExecute holds details about calls to the CreateServiceAccountExecute method.
		CreateServiceAccountExecute []struct {
			// R is the r argument value.
			R ApiCreateServiceAccountRequest
		}
		// DeleteKafkaById holds details about calls to the DeleteKafkaById method.
		DeleteKafkaById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteKafkaByIdExecute holds details about calls to the DeleteKafkaByIdExecute method.
		DeleteKafkaByIdExecute []struct {
			// R is the r argument value.
			R ApiDeleteKafkaByIdRequest
		}
		// DeleteServiceAccount holds details about calls to the DeleteServiceAccount method.
		DeleteServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteServiceAccountExecute holds details about calls to the DeleteServiceAccountExecute method.
		DeleteServiceAccountExecute []struct {
			// R is the r argument value.
			R ApiDeleteServiceAccountRequest
		}
		// GetKafkaById holds details about calls to the GetKafkaById method.
		GetKafkaById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetKafkaByIdExecute holds details about calls to the GetKafkaByIdExecute method.
		GetKafkaByIdExecute []struct {
			// R is the r argument value.
			R ApiGetKafkaByIdRequest
		}
		// GetMetricsByInstantQuery holds details about calls to the GetMetricsByInstantQuery method.
		GetMetricsByInstantQuery []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetMetricsByInstantQueryExecute holds details about calls to the GetMetricsByInstantQueryExecute method.
		GetMetricsByInstantQueryExecute []struct {
			// R is the r argument value.
			R ApiGetMetricsByInstantQueryRequest
		}
		// GetMetricsByRangeQuery holds details about calls to the GetMetricsByRangeQuery method.
		GetMetricsByRangeQuery []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetMetricsByRangeQueryExecute holds details about calls to the GetMetricsByRangeQueryExecute method.
		GetMetricsByRangeQueryExecute []struct {
			// R is the r argument value.
			R ApiGetMetricsByRangeQueryRequest
		}
		// GetServiceAccountById holds details about calls to the GetServiceAccountById method.
		GetServiceAccountById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetServiceAccountByIdExecute holds details about calls to the GetServiceAccountByIdExecute method.
		GetServiceAccountByIdExecute []struct {
			// R is the r argument value.
			R ApiGetServiceAccountByIdRequest
		}
		// ListCloudProviderRegions holds details about calls to the ListCloudProviderRegions method.
		ListCloudProviderRegions []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// ListCloudProviderRegionsExecute holds details about calls to the ListCloudProviderRegionsExecute method.
		ListCloudProviderRegionsExecute []struct {
			// R is the r argument value.
			R ApiListCloudProviderRegionsRequest
		}
		// ListCloudProviders holds details about calls to the ListCloudProviders method.
		ListCloudProviders []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListCloudProvidersExecute holds details about calls to the ListCloudProvidersExecute method.
		ListCloudProvidersExecute []struct {
			// R is the r argument value.
			R ApiListCloudProvidersRequest
		}
		// ListKafkas holds details about calls to the ListKafkas method.
		ListKafkas []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListKafkasExecute holds details about calls to the ListKafkasExecute method.
		ListKafkasExecute []struct {
			// R is the r argument value.
			R ApiListKafkasRequest
		}
		// ListServiceAccounts holds details about calls to the ListServiceAccounts method.
		ListServiceAccounts []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListServiceAccountsExecute holds details about calls to the ListServiceAccountsExecute method.
		ListServiceAccountsExecute []struct {
			// R is the r argument value.
			R ApiListServiceAccountsRequest
		}
		// ResetServiceAccountCreds holds details about calls to the ResetServiceAccountCreds method.
		ResetServiceAccountCreds []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// ResetServiceAccountCredsExecute holds details about calls to the ResetServiceAccountCredsExecute method.
		ResetServiceAccountCredsExecute []struct {
			// R is the r argument value.
			R ApiResetServiceAccountCredsRequest
		}
		// ServiceStatus holds details about calls to the ServiceStatus method.
		ServiceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ServiceStatusExecute holds details about calls to the ServiceStatusExecute method.
		ServiceStatusExecute []struct {
			// R is the r argument value.
			R ApiServiceStatusRequest
		}
		// VersionMetadata holds details about calls to the VersionMetadata method.
		VersionMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// VersionMetadataExecute holds details about calls to the VersionMetadataExecute method.
		VersionMetadataExecute []struct {
			// R is the r argument value.
			R ApiVersionMetadataRequest
		}
	}
	lockCreateKafka                     sync.RWMutex
	lockCreateKafkaExecute              sync.RWMutex
	lockCreateServiceAccount            sync.RWMutex
	lockCreateServiceAccountExecute     sync.RWMutex
	lockDeleteKafkaById                 sync.RWMutex
	lockDeleteKafkaByIdExecute          sync.RWMutex
	lockDeleteServiceAccount            sync.RWMutex
	lockDeleteServiceAccountExecute     sync.RWMutex
	lockGetKafkaById                    sync.RWMutex
	lockGetKafkaByIdExecute             sync.RWMutex
	lockGetMetricsByInstantQuery        sync.RWMutex
	lockGetMetricsByInstantQueryExecute sync.RWMutex
	lockGetMetricsByRangeQuery          sync.RWMutex
	lockGetMetricsByRangeQueryExecute   sync.RWMutex
	lockGetServiceAccountById           sync.RWMutex
	lockGetServiceAccountByIdExecute    sync.RWMutex
	lockListCloudProviderRegions        sync.RWMutex
	lockListCloudProviderRegionsExecute sync.RWMutex
	lockListCloudProviders              sync.RWMutex
	lockListCloudProvidersExecute       sync.RWMutex
	lockListKafkas                      sync.RWMutex
	lockListKafkasExecute               sync.RWMutex
	lockListServiceAccounts             sync.RWMutex
	lockListServiceAccountsExecute      sync.RWMutex
	lockResetServiceAccountCreds        sync.RWMutex
	lockResetServiceAccountCredsExecute sync.RWMutex
	lockServiceStatus                   sync.RWMutex
	lockServiceStatusExecute            sync.RWMutex
	lockVersionMetadata                 sync.RWMutex
	lockVersionMetadataExecute          sync.RWMutex
}

// CreateKafka calls CreateKafkaFunc.
func (mock *DefaultApiMock) CreateKafka(ctx _context.Context) ApiCreateKafkaRequest {
	if mock.CreateKafkaFunc == nil {
		panic("DefaultApiMock.CreateKafkaFunc: method is nil but DefaultApi.CreateKafka was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateKafka.Lock()
	mock.calls.CreateKafka = append(mock.calls.CreateKafka, callInfo)
	mock.lockCreateKafka.Unlock()
	return mock.CreateKafkaFunc(ctx)
}

// CreateKafkaCalls gets all the calls that were made to CreateKafka.
// Check the length with:
//     len(mockedDefaultApi.CreateKafkaCalls())
func (mock *DefaultApiMock) CreateKafkaCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateKafka.RLock()
	calls = mock.calls.CreateKafka
	mock.lockCreateKafka.RUnlock()
	return calls
}

// CreateKafkaExecute calls CreateKafkaExecuteFunc.
func (mock *DefaultApiMock) CreateKafkaExecute(r ApiCreateKafkaRequest) (KafkaRequest, *_nethttp.Response, error) {
	if mock.CreateKafkaExecuteFunc == nil {
		panic("DefaultApiMock.CreateKafkaExecuteFunc: method is nil but DefaultApi.CreateKafkaExecute was just called")
	}
	callInfo := struct {
		R ApiCreateKafkaRequest
	}{
		R: r,
	}
	mock.lockCreateKafkaExecute.Lock()
	mock.calls.CreateKafkaExecute = append(mock.calls.CreateKafkaExecute, callInfo)
	mock.lockCreateKafkaExecute.Unlock()
	return mock.CreateKafkaExecuteFunc(r)
}

// CreateKafkaExecuteCalls gets all the calls that were made to CreateKafkaExecute.
// Check the length with:
//     len(mockedDefaultApi.CreateKafkaExecuteCalls())
func (mock *DefaultApiMock) CreateKafkaExecuteCalls() []struct {
	R ApiCreateKafkaRequest
} {
	var calls []struct {
		R ApiCreateKafkaRequest
	}
	mock.lockCreateKafkaExecute.RLock()
	calls = mock.calls.CreateKafkaExecute
	mock.lockCreateKafkaExecute.RUnlock()
	return calls
}

// CreateServiceAccount calls CreateServiceAccountFunc.
func (mock *DefaultApiMock) CreateServiceAccount(ctx _context.Context) ApiCreateServiceAccountRequest {
	if mock.CreateServiceAccountFunc == nil {
		panic("DefaultApiMock.CreateServiceAccountFunc: method is nil but DefaultApi.CreateServiceAccount was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateServiceAccount.Lock()
	mock.calls.CreateServiceAccount = append(mock.calls.CreateServiceAccount, callInfo)
	mock.lockCreateServiceAccount.Unlock()
	return mock.CreateServiceAccountFunc(ctx)
}

// CreateServiceAccountCalls gets all the calls that were made to CreateServiceAccount.
// Check the length with:
//     len(mockedDefaultApi.CreateServiceAccountCalls())
func (mock *DefaultApiMock) CreateServiceAccountCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateServiceAccount.RLock()
	calls = mock.calls.CreateServiceAccount
	mock.lockCreateServiceAccount.RUnlock()
	return calls
}

// CreateServiceAccountExecute calls CreateServiceAccountExecuteFunc.
func (mock *DefaultApiMock) CreateServiceAccountExecute(r ApiCreateServiceAccountRequest) (ServiceAccount, *_nethttp.Response, error) {
	if mock.CreateServiceAccountExecuteFunc == nil {
		panic("DefaultApiMock.CreateServiceAccountExecuteFunc: method is nil but DefaultApi.CreateServiceAccountExecute was just called")
	}
	callInfo := struct {
		R ApiCreateServiceAccountRequest
	}{
		R: r,
	}
	mock.lockCreateServiceAccountExecute.Lock()
	mock.calls.CreateServiceAccountExecute = append(mock.calls.CreateServiceAccountExecute, callInfo)
	mock.lockCreateServiceAccountExecute.Unlock()
	return mock.CreateServiceAccountExecuteFunc(r)
}

// CreateServiceAccountExecuteCalls gets all the calls that were made to CreateServiceAccountExecute.
// Check the length with:
//     len(mockedDefaultApi.CreateServiceAccountExecuteCalls())
func (mock *DefaultApiMock) CreateServiceAccountExecuteCalls() []struct {
	R ApiCreateServiceAccountRequest
} {
	var calls []struct {
		R ApiCreateServiceAccountRequest
	}
	mock.lockCreateServiceAccountExecute.RLock()
	calls = mock.calls.CreateServiceAccountExecute
	mock.lockCreateServiceAccountExecute.RUnlock()
	return calls
}

// DeleteKafkaById calls DeleteKafkaByIdFunc.
func (mock *DefaultApiMock) DeleteKafkaById(ctx _context.Context, id string) ApiDeleteKafkaByIdRequest {
	if mock.DeleteKafkaByIdFunc == nil {
		panic("DefaultApiMock.DeleteKafkaByIdFunc: method is nil but DefaultApi.DeleteKafkaById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteKafkaById.Lock()
	mock.calls.DeleteKafkaById = append(mock.calls.DeleteKafkaById, callInfo)
	mock.lockDeleteKafkaById.Unlock()
	return mock.DeleteKafkaByIdFunc(ctx, id)
}

// DeleteKafkaByIdCalls gets all the calls that were made to DeleteKafkaById.
// Check the length with:
//     len(mockedDefaultApi.DeleteKafkaByIdCalls())
func (mock *DefaultApiMock) DeleteKafkaByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockDeleteKafkaById.RLock()
	calls = mock.calls.DeleteKafkaById
	mock.lockDeleteKafkaById.RUnlock()
	return calls
}

// DeleteKafkaByIdExecute calls DeleteKafkaByIdExecuteFunc.
func (mock *DefaultApiMock) DeleteKafkaByIdExecute(r ApiDeleteKafkaByIdRequest) (Error, *_nethttp.Response, error) {
	if mock.DeleteKafkaByIdExecuteFunc == nil {
		panic("DefaultApiMock.DeleteKafkaByIdExecuteFunc: method is nil but DefaultApi.DeleteKafkaByIdExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteKafkaByIdRequest
	}{
		R: r,
	}
	mock.lockDeleteKafkaByIdExecute.Lock()
	mock.calls.DeleteKafkaByIdExecute = append(mock.calls.DeleteKafkaByIdExecute, callInfo)
	mock.lockDeleteKafkaByIdExecute.Unlock()
	return mock.DeleteKafkaByIdExecuteFunc(r)
}

// DeleteKafkaByIdExecuteCalls gets all the calls that were made to DeleteKafkaByIdExecute.
// Check the length with:
//     len(mockedDefaultApi.DeleteKafkaByIdExecuteCalls())
func (mock *DefaultApiMock) DeleteKafkaByIdExecuteCalls() []struct {
	R ApiDeleteKafkaByIdRequest
} {
	var calls []struct {
		R ApiDeleteKafkaByIdRequest
	}
	mock.lockDeleteKafkaByIdExecute.RLock()
	calls = mock.calls.DeleteKafkaByIdExecute
	mock.lockDeleteKafkaByIdExecute.RUnlock()
	return calls
}

// DeleteServiceAccount calls DeleteServiceAccountFunc.
func (mock *DefaultApiMock) DeleteServiceAccount(ctx _context.Context, id string) ApiDeleteServiceAccountRequest {
	if mock.DeleteServiceAccountFunc == nil {
		panic("DefaultApiMock.DeleteServiceAccountFunc: method is nil but DefaultApi.DeleteServiceAccount was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteServiceAccount.Lock()
	mock.calls.DeleteServiceAccount = append(mock.calls.DeleteServiceAccount, callInfo)
	mock.lockDeleteServiceAccount.Unlock()
	return mock.DeleteServiceAccountFunc(ctx, id)
}

// DeleteServiceAccountCalls gets all the calls that were made to DeleteServiceAccount.
// Check the length with:
//     len(mockedDefaultApi.DeleteServiceAccountCalls())
func (mock *DefaultApiMock) DeleteServiceAccountCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockDeleteServiceAccount.RLock()
	calls = mock.calls.DeleteServiceAccount
	mock.lockDeleteServiceAccount.RUnlock()
	return calls
}

// DeleteServiceAccountExecute calls DeleteServiceAccountExecuteFunc.
func (mock *DefaultApiMock) DeleteServiceAccountExecute(r ApiDeleteServiceAccountRequest) (Error, *_nethttp.Response, error) {
	if mock.DeleteServiceAccountExecuteFunc == nil {
		panic("DefaultApiMock.DeleteServiceAccountExecuteFunc: method is nil but DefaultApi.DeleteServiceAccountExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteServiceAccountRequest
	}{
		R: r,
	}
	mock.lockDeleteServiceAccountExecute.Lock()
	mock.calls.DeleteServiceAccountExecute = append(mock.calls.DeleteServiceAccountExecute, callInfo)
	mock.lockDeleteServiceAccountExecute.Unlock()
	return mock.DeleteServiceAccountExecuteFunc(r)
}

// DeleteServiceAccountExecuteCalls gets all the calls that were made to DeleteServiceAccountExecute.
// Check the length with:
//     len(mockedDefaultApi.DeleteServiceAccountExecuteCalls())
func (mock *DefaultApiMock) DeleteServiceAccountExecuteCalls() []struct {
	R ApiDeleteServiceAccountRequest
} {
	var calls []struct {
		R ApiDeleteServiceAccountRequest
	}
	mock.lockDeleteServiceAccountExecute.RLock()
	calls = mock.calls.DeleteServiceAccountExecute
	mock.lockDeleteServiceAccountExecute.RUnlock()
	return calls
}

// GetKafkaById calls GetKafkaByIdFunc.
func (mock *DefaultApiMock) GetKafkaById(ctx _context.Context, id string) ApiGetKafkaByIdRequest {
	if mock.GetKafkaByIdFunc == nil {
		panic("DefaultApiMock.GetKafkaByIdFunc: method is nil but DefaultApi.GetKafkaById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetKafkaById.Lock()
	mock.calls.GetKafkaById = append(mock.calls.GetKafkaById, callInfo)
	mock.lockGetKafkaById.Unlock()
	return mock.GetKafkaByIdFunc(ctx, id)
}

// GetKafkaByIdCalls gets all the calls that were made to GetKafkaById.
// Check the length with:
//     len(mockedDefaultApi.GetKafkaByIdCalls())
func (mock *DefaultApiMock) GetKafkaByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetKafkaById.RLock()
	calls = mock.calls.GetKafkaById
	mock.lockGetKafkaById.RUnlock()
	return calls
}

// GetKafkaByIdExecute calls GetKafkaByIdExecuteFunc.
func (mock *DefaultApiMock) GetKafkaByIdExecute(r ApiGetKafkaByIdRequest) (KafkaRequest, *_nethttp.Response, error) {
	if mock.GetKafkaByIdExecuteFunc == nil {
		panic("DefaultApiMock.GetKafkaByIdExecuteFunc: method is nil but DefaultApi.GetKafkaByIdExecute was just called")
	}
	callInfo := struct {
		R ApiGetKafkaByIdRequest
	}{
		R: r,
	}
	mock.lockGetKafkaByIdExecute.Lock()
	mock.calls.GetKafkaByIdExecute = append(mock.calls.GetKafkaByIdExecute, callInfo)
	mock.lockGetKafkaByIdExecute.Unlock()
	return mock.GetKafkaByIdExecuteFunc(r)
}

// GetKafkaByIdExecuteCalls gets all the calls that were made to GetKafkaByIdExecute.
// Check the length with:
//     len(mockedDefaultApi.GetKafkaByIdExecuteCalls())
func (mock *DefaultApiMock) GetKafkaByIdExecuteCalls() []struct {
	R ApiGetKafkaByIdRequest
} {
	var calls []struct {
		R ApiGetKafkaByIdRequest
	}
	mock.lockGetKafkaByIdExecute.RLock()
	calls = mock.calls.GetKafkaByIdExecute
	mock.lockGetKafkaByIdExecute.RUnlock()
	return calls
}

// GetMetricsByInstantQuery calls GetMetricsByInstantQueryFunc.
func (mock *DefaultApiMock) GetMetricsByInstantQuery(ctx _context.Context, id string) ApiGetMetricsByInstantQueryRequest {
	if mock.GetMetricsByInstantQueryFunc == nil {
		panic("DefaultApiMock.GetMetricsByInstantQueryFunc: method is nil but DefaultApi.GetMetricsByInstantQuery was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetMetricsByInstantQuery.Lock()
	mock.calls.GetMetricsByInstantQuery = append(mock.calls.GetMetricsByInstantQuery, callInfo)
	mock.lockGetMetricsByInstantQuery.Unlock()
	return mock.GetMetricsByInstantQueryFunc(ctx, id)
}

// GetMetricsByInstantQueryCalls gets all the calls that were made to GetMetricsByInstantQuery.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByInstantQueryCalls())
func (mock *DefaultApiMock) GetMetricsByInstantQueryCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetMetricsByInstantQuery.RLock()
	calls = mock.calls.GetMetricsByInstantQuery
	mock.lockGetMetricsByInstantQuery.RUnlock()
	return calls
}

// GetMetricsByInstantQueryExecute calls GetMetricsByInstantQueryExecuteFunc.
func (mock *DefaultApiMock) GetMetricsByInstantQueryExecute(r ApiGetMetricsByInstantQueryRequest) (MetricsInstantQueryList, *_nethttp.Response, error) {
	if mock.GetMetricsByInstantQueryExecuteFunc == nil {
		panic("DefaultApiMock.GetMetricsByInstantQueryExecuteFunc: method is nil but DefaultApi.GetMetricsByInstantQueryExecute was just called")
	}
	callInfo := struct {
		R ApiGetMetricsByInstantQueryRequest
	}{
		R: r,
	}
	mock.lockGetMetricsByInstantQueryExecute.Lock()
	mock.calls.GetMetricsByInstantQueryExecute = append(mock.calls.GetMetricsByInstantQueryExecute, callInfo)
	mock.lockGetMetricsByInstantQueryExecute.Unlock()
	return mock.GetMetricsByInstantQueryExecuteFunc(r)
}

// GetMetricsByInstantQueryExecuteCalls gets all the calls that were made to GetMetricsByInstantQueryExecute.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByInstantQueryExecuteCalls())
func (mock *DefaultApiMock) GetMetricsByInstantQueryExecuteCalls() []struct {
	R ApiGetMetricsByInstantQueryRequest
} {
	var calls []struct {
		R ApiGetMetricsByInstantQueryRequest
	}
	mock.lockGetMetricsByInstantQueryExecute.RLock()
	calls = mock.calls.GetMetricsByInstantQueryExecute
	mock.lockGetMetricsByInstantQueryExecute.RUnlock()
	return calls
}

// GetMetricsByRangeQuery calls GetMetricsByRangeQueryFunc.
func (mock *DefaultApiMock) GetMetricsByRangeQuery(ctx _context.Context, id string) ApiGetMetricsByRangeQueryRequest {
	if mock.GetMetricsByRangeQueryFunc == nil {
		panic("DefaultApiMock.GetMetricsByRangeQueryFunc: method is nil but DefaultApi.GetMetricsByRangeQuery was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetMetricsByRangeQuery.Lock()
	mock.calls.GetMetricsByRangeQuery = append(mock.calls.GetMetricsByRangeQuery, callInfo)
	mock.lockGetMetricsByRangeQuery.Unlock()
	return mock.GetMetricsByRangeQueryFunc(ctx, id)
}

// GetMetricsByRangeQueryCalls gets all the calls that were made to GetMetricsByRangeQuery.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByRangeQueryCalls())
func (mock *DefaultApiMock) GetMetricsByRangeQueryCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetMetricsByRangeQuery.RLock()
	calls = mock.calls.GetMetricsByRangeQuery
	mock.lockGetMetricsByRangeQuery.RUnlock()
	return calls
}

// GetMetricsByRangeQueryExecute calls GetMetricsByRangeQueryExecuteFunc.
func (mock *DefaultApiMock) GetMetricsByRangeQueryExecute(r ApiGetMetricsByRangeQueryRequest) (MetricsRangeQueryList, *_nethttp.Response, error) {
	if mock.GetMetricsByRangeQueryExecuteFunc == nil {
		panic("DefaultApiMock.GetMetricsByRangeQueryExecuteFunc: method is nil but DefaultApi.GetMetricsByRangeQueryExecute was just called")
	}
	callInfo := struct {
		R ApiGetMetricsByRangeQueryRequest
	}{
		R: r,
	}
	mock.lockGetMetricsByRangeQueryExecute.Lock()
	mock.calls.GetMetricsByRangeQueryExecute = append(mock.calls.GetMetricsByRangeQueryExecute, callInfo)
	mock.lockGetMetricsByRangeQueryExecute.Unlock()
	return mock.GetMetricsByRangeQueryExecuteFunc(r)
}

// GetMetricsByRangeQueryExecuteCalls gets all the calls that were made to GetMetricsByRangeQueryExecute.
// Check the length with:
//     len(mockedDefaultApi.GetMetricsByRangeQueryExecuteCalls())
func (mock *DefaultApiMock) GetMetricsByRangeQueryExecuteCalls() []struct {
	R ApiGetMetricsByRangeQueryRequest
} {
	var calls []struct {
		R ApiGetMetricsByRangeQueryRequest
	}
	mock.lockGetMetricsByRangeQueryExecute.RLock()
	calls = mock.calls.GetMetricsByRangeQueryExecute
	mock.lockGetMetricsByRangeQueryExecute.RUnlock()
	return calls
}

// GetServiceAccountById calls GetServiceAccountByIdFunc.
func (mock *DefaultApiMock) GetServiceAccountById(ctx _context.Context, id string) ApiGetServiceAccountByIdRequest {
	if mock.GetServiceAccountByIdFunc == nil {
		panic("DefaultApiMock.GetServiceAccountByIdFunc: method is nil but DefaultApi.GetServiceAccountById was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetServiceAccountById.Lock()
	mock.calls.GetServiceAccountById = append(mock.calls.GetServiceAccountById, callInfo)
	mock.lockGetServiceAccountById.Unlock()
	return mock.GetServiceAccountByIdFunc(ctx, id)
}

// GetServiceAccountByIdCalls gets all the calls that were made to GetServiceAccountById.
// Check the length with:
//     len(mockedDefaultApi.GetServiceAccountByIdCalls())
func (mock *DefaultApiMock) GetServiceAccountByIdCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetServiceAccountById.RLock()
	calls = mock.calls.GetServiceAccountById
	mock.lockGetServiceAccountById.RUnlock()
	return calls
}

// GetServiceAccountByIdExecute calls GetServiceAccountByIdExecuteFunc.
func (mock *DefaultApiMock) GetServiceAccountByIdExecute(r ApiGetServiceAccountByIdRequest) (ServiceAccount, *_nethttp.Response, error) {
	if mock.GetServiceAccountByIdExecuteFunc == nil {
		panic("DefaultApiMock.GetServiceAccountByIdExecuteFunc: method is nil but DefaultApi.GetServiceAccountByIdExecute was just called")
	}
	callInfo := struct {
		R ApiGetServiceAccountByIdRequest
	}{
		R: r,
	}
	mock.lockGetServiceAccountByIdExecute.Lock()
	mock.calls.GetServiceAccountByIdExecute = append(mock.calls.GetServiceAccountByIdExecute, callInfo)
	mock.lockGetServiceAccountByIdExecute.Unlock()
	return mock.GetServiceAccountByIdExecuteFunc(r)
}

// GetServiceAccountByIdExecuteCalls gets all the calls that were made to GetServiceAccountByIdExecute.
// Check the length with:
//     len(mockedDefaultApi.GetServiceAccountByIdExecuteCalls())
func (mock *DefaultApiMock) GetServiceAccountByIdExecuteCalls() []struct {
	R ApiGetServiceAccountByIdRequest
} {
	var calls []struct {
		R ApiGetServiceAccountByIdRequest
	}
	mock.lockGetServiceAccountByIdExecute.RLock()
	calls = mock.calls.GetServiceAccountByIdExecute
	mock.lockGetServiceAccountByIdExecute.RUnlock()
	return calls
}

// ListCloudProviderRegions calls ListCloudProviderRegionsFunc.
func (mock *DefaultApiMock) ListCloudProviderRegions(ctx _context.Context, id string) ApiListCloudProviderRegionsRequest {
	if mock.ListCloudProviderRegionsFunc == nil {
		panic("DefaultApiMock.ListCloudProviderRegionsFunc: method is nil but DefaultApi.ListCloudProviderRegions was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockListCloudProviderRegions.Lock()
	mock.calls.ListCloudProviderRegions = append(mock.calls.ListCloudProviderRegions, callInfo)
	mock.lockListCloudProviderRegions.Unlock()
	return mock.ListCloudProviderRegionsFunc(ctx, id)
}

// ListCloudProviderRegionsCalls gets all the calls that were made to ListCloudProviderRegions.
// Check the length with:
//     len(mockedDefaultApi.ListCloudProviderRegionsCalls())
func (mock *DefaultApiMock) ListCloudProviderRegionsCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockListCloudProviderRegions.RLock()
	calls = mock.calls.ListCloudProviderRegions
	mock.lockListCloudProviderRegions.RUnlock()
	return calls
}

// ListCloudProviderRegionsExecute calls ListCloudProviderRegionsExecuteFunc.
func (mock *DefaultApiMock) ListCloudProviderRegionsExecute(r ApiListCloudProviderRegionsRequest) (CloudRegionList, *_nethttp.Response, error) {
	if mock.ListCloudProviderRegionsExecuteFunc == nil {
		panic("DefaultApiMock.ListCloudProviderRegionsExecuteFunc: method is nil but DefaultApi.ListCloudProviderRegionsExecute was just called")
	}
	callInfo := struct {
		R ApiListCloudProviderRegionsRequest
	}{
		R: r,
	}
	mock.lockListCloudProviderRegionsExecute.Lock()
	mock.calls.ListCloudProviderRegionsExecute = append(mock.calls.ListCloudProviderRegionsExecute, callInfo)
	mock.lockListCloudProviderRegionsExecute.Unlock()
	return mock.ListCloudProviderRegionsExecuteFunc(r)
}

// ListCloudProviderRegionsExecuteCalls gets all the calls that were made to ListCloudProviderRegionsExecute.
// Check the length with:
//     len(mockedDefaultApi.ListCloudProviderRegionsExecuteCalls())
func (mock *DefaultApiMock) ListCloudProviderRegionsExecuteCalls() []struct {
	R ApiListCloudProviderRegionsRequest
} {
	var calls []struct {
		R ApiListCloudProviderRegionsRequest
	}
	mock.lockListCloudProviderRegionsExecute.RLock()
	calls = mock.calls.ListCloudProviderRegionsExecute
	mock.lockListCloudProviderRegionsExecute.RUnlock()
	return calls
}

// ListCloudProviders calls ListCloudProvidersFunc.
func (mock *DefaultApiMock) ListCloudProviders(ctx _context.Context) ApiListCloudProvidersRequest {
	if mock.ListCloudProvidersFunc == nil {
		panic("DefaultApiMock.ListCloudProvidersFunc: method is nil but DefaultApi.ListCloudProviders was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListCloudProviders.Lock()
	mock.calls.ListCloudProviders = append(mock.calls.ListCloudProviders, callInfo)
	mock.lockListCloudProviders.Unlock()
	return mock.ListCloudProvidersFunc(ctx)
}

// ListCloudProvidersCalls gets all the calls that were made to ListCloudProviders.
// Check the length with:
//     len(mockedDefaultApi.ListCloudProvidersCalls())
func (mock *DefaultApiMock) ListCloudProvidersCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListCloudProviders.RLock()
	calls = mock.calls.ListCloudProviders
	mock.lockListCloudProviders.RUnlock()
	return calls
}

// ListCloudProvidersExecute calls ListCloudProvidersExecuteFunc.
func (mock *DefaultApiMock) ListCloudProvidersExecute(r ApiListCloudProvidersRequest) (CloudProviderList, *_nethttp.Response, error) {
	if mock.ListCloudProvidersExecuteFunc == nil {
		panic("DefaultApiMock.ListCloudProvidersExecuteFunc: method is nil but DefaultApi.ListCloudProvidersExecute was just called")
	}
	callInfo := struct {
		R ApiListCloudProvidersRequest
	}{
		R: r,
	}
	mock.lockListCloudProvidersExecute.Lock()
	mock.calls.ListCloudProvidersExecute = append(mock.calls.ListCloudProvidersExecute, callInfo)
	mock.lockListCloudProvidersExecute.Unlock()
	return mock.ListCloudProvidersExecuteFunc(r)
}

// ListCloudProvidersExecuteCalls gets all the calls that were made to ListCloudProvidersExecute.
// Check the length with:
//     len(mockedDefaultApi.ListCloudProvidersExecuteCalls())
func (mock *DefaultApiMock) ListCloudProvidersExecuteCalls() []struct {
	R ApiListCloudProvidersRequest
} {
	var calls []struct {
		R ApiListCloudProvidersRequest
	}
	mock.lockListCloudProvidersExecute.RLock()
	calls = mock.calls.ListCloudProvidersExecute
	mock.lockListCloudProvidersExecute.RUnlock()
	return calls
}

// ListKafkas calls ListKafkasFunc.
func (mock *DefaultApiMock) ListKafkas(ctx _context.Context) ApiListKafkasRequest {
	if mock.ListKafkasFunc == nil {
		panic("DefaultApiMock.ListKafkasFunc: method is nil but DefaultApi.ListKafkas was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListKafkas.Lock()
	mock.calls.ListKafkas = append(mock.calls.ListKafkas, callInfo)
	mock.lockListKafkas.Unlock()
	return mock.ListKafkasFunc(ctx)
}

// ListKafkasCalls gets all the calls that were made to ListKafkas.
// Check the length with:
//     len(mockedDefaultApi.ListKafkasCalls())
func (mock *DefaultApiMock) ListKafkasCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListKafkas.RLock()
	calls = mock.calls.ListKafkas
	mock.lockListKafkas.RUnlock()
	return calls
}

// ListKafkasExecute calls ListKafkasExecuteFunc.
func (mock *DefaultApiMock) ListKafkasExecute(r ApiListKafkasRequest) (KafkaRequestList, *_nethttp.Response, error) {
	if mock.ListKafkasExecuteFunc == nil {
		panic("DefaultApiMock.ListKafkasExecuteFunc: method is nil but DefaultApi.ListKafkasExecute was just called")
	}
	callInfo := struct {
		R ApiListKafkasRequest
	}{
		R: r,
	}
	mock.lockListKafkasExecute.Lock()
	mock.calls.ListKafkasExecute = append(mock.calls.ListKafkasExecute, callInfo)
	mock.lockListKafkasExecute.Unlock()
	return mock.ListKafkasExecuteFunc(r)
}

// ListKafkasExecuteCalls gets all the calls that were made to ListKafkasExecute.
// Check the length with:
//     len(mockedDefaultApi.ListKafkasExecuteCalls())
func (mock *DefaultApiMock) ListKafkasExecuteCalls() []struct {
	R ApiListKafkasRequest
} {
	var calls []struct {
		R ApiListKafkasRequest
	}
	mock.lockListKafkasExecute.RLock()
	calls = mock.calls.ListKafkasExecute
	mock.lockListKafkasExecute.RUnlock()
	return calls
}

// ListServiceAccounts calls ListServiceAccountsFunc.
func (mock *DefaultApiMock) ListServiceAccounts(ctx _context.Context) ApiListServiceAccountsRequest {
	if mock.ListServiceAccountsFunc == nil {
		panic("DefaultApiMock.ListServiceAccountsFunc: method is nil but DefaultApi.ListServiceAccounts was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListServiceAccounts.Lock()
	mock.calls.ListServiceAccounts = append(mock.calls.ListServiceAccounts, callInfo)
	mock.lockListServiceAccounts.Unlock()
	return mock.ListServiceAccountsFunc(ctx)
}

// ListServiceAccountsCalls gets all the calls that were made to ListServiceAccounts.
// Check the length with:
//     len(mockedDefaultApi.ListServiceAccountsCalls())
func (mock *DefaultApiMock) ListServiceAccountsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListServiceAccounts.RLock()
	calls = mock.calls.ListServiceAccounts
	mock.lockListServiceAccounts.RUnlock()
	return calls
}

// ListServiceAccountsExecute calls ListServiceAccountsExecuteFunc.
func (mock *DefaultApiMock) ListServiceAccountsExecute(r ApiListServiceAccountsRequest) (ServiceAccountList, *_nethttp.Response, error) {
	if mock.ListServiceAccountsExecuteFunc == nil {
		panic("DefaultApiMock.ListServiceAccountsExecuteFunc: method is nil but DefaultApi.ListServiceAccountsExecute was just called")
	}
	callInfo := struct {
		R ApiListServiceAccountsRequest
	}{
		R: r,
	}
	mock.lockListServiceAccountsExecute.Lock()
	mock.calls.ListServiceAccountsExecute = append(mock.calls.ListServiceAccountsExecute, callInfo)
	mock.lockListServiceAccountsExecute.Unlock()
	return mock.ListServiceAccountsExecuteFunc(r)
}

// ListServiceAccountsExecuteCalls gets all the calls that were made to ListServiceAccountsExecute.
// Check the length with:
//     len(mockedDefaultApi.ListServiceAccountsExecuteCalls())
func (mock *DefaultApiMock) ListServiceAccountsExecuteCalls() []struct {
	R ApiListServiceAccountsRequest
} {
	var calls []struct {
		R ApiListServiceAccountsRequest
	}
	mock.lockListServiceAccountsExecute.RLock()
	calls = mock.calls.ListServiceAccountsExecute
	mock.lockListServiceAccountsExecute.RUnlock()
	return calls
}

// ResetServiceAccountCreds calls ResetServiceAccountCredsFunc.
func (mock *DefaultApiMock) ResetServiceAccountCreds(ctx _context.Context, id string) ApiResetServiceAccountCredsRequest {
	if mock.ResetServiceAccountCredsFunc == nil {
		panic("DefaultApiMock.ResetServiceAccountCredsFunc: method is nil but DefaultApi.ResetServiceAccountCreds was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockResetServiceAccountCreds.Lock()
	mock.calls.ResetServiceAccountCreds = append(mock.calls.ResetServiceAccountCreds, callInfo)
	mock.lockResetServiceAccountCreds.Unlock()
	return mock.ResetServiceAccountCredsFunc(ctx, id)
}

// ResetServiceAccountCredsCalls gets all the calls that were made to ResetServiceAccountCreds.
// Check the length with:
//     len(mockedDefaultApi.ResetServiceAccountCredsCalls())
func (mock *DefaultApiMock) ResetServiceAccountCredsCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockResetServiceAccountCreds.RLock()
	calls = mock.calls.ResetServiceAccountCreds
	mock.lockResetServiceAccountCreds.RUnlock()
	return calls
}

// ResetServiceAccountCredsExecute calls ResetServiceAccountCredsExecuteFunc.
func (mock *DefaultApiMock) ResetServiceAccountCredsExecute(r ApiResetServiceAccountCredsRequest) (ServiceAccount, *_nethttp.Response, error) {
	if mock.ResetServiceAccountCredsExecuteFunc == nil {
		panic("DefaultApiMock.ResetServiceAccountCredsExecuteFunc: method is nil but DefaultApi.ResetServiceAccountCredsExecute was just called")
	}
	callInfo := struct {
		R ApiResetServiceAccountCredsRequest
	}{
		R: r,
	}
	mock.lockResetServiceAccountCredsExecute.Lock()
	mock.calls.ResetServiceAccountCredsExecute = append(mock.calls.ResetServiceAccountCredsExecute, callInfo)
	mock.lockResetServiceAccountCredsExecute.Unlock()
	return mock.ResetServiceAccountCredsExecuteFunc(r)
}

// ResetServiceAccountCredsExecuteCalls gets all the calls that were made to ResetServiceAccountCredsExecute.
// Check the length with:
//     len(mockedDefaultApi.ResetServiceAccountCredsExecuteCalls())
func (mock *DefaultApiMock) ResetServiceAccountCredsExecuteCalls() []struct {
	R ApiResetServiceAccountCredsRequest
} {
	var calls []struct {
		R ApiResetServiceAccountCredsRequest
	}
	mock.lockResetServiceAccountCredsExecute.RLock()
	calls = mock.calls.ResetServiceAccountCredsExecute
	mock.lockResetServiceAccountCredsExecute.RUnlock()
	return calls
}

// ServiceStatus calls ServiceStatusFunc.
func (mock *DefaultApiMock) ServiceStatus(ctx _context.Context) ApiServiceStatusRequest {
	if mock.ServiceStatusFunc == nil {
		panic("DefaultApiMock.ServiceStatusFunc: method is nil but DefaultApi.ServiceStatus was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockServiceStatus.Lock()
	mock.calls.ServiceStatus = append(mock.calls.ServiceStatus, callInfo)
	mock.lockServiceStatus.Unlock()
	return mock.ServiceStatusFunc(ctx)
}

// ServiceStatusCalls gets all the calls that were made to ServiceStatus.
// Check the length with:
//     len(mockedDefaultApi.ServiceStatusCalls())
func (mock *DefaultApiMock) ServiceStatusCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockServiceStatus.RLock()
	calls = mock.calls.ServiceStatus
	mock.lockServiceStatus.RUnlock()
	return calls
}

// ServiceStatusExecute calls ServiceStatusExecuteFunc.
func (mock *DefaultApiMock) ServiceStatusExecute(r ApiServiceStatusRequest) (ServiceStatus, *_nethttp.Response, error) {
	if mock.ServiceStatusExecuteFunc == nil {
		panic("DefaultApiMock.ServiceStatusExecuteFunc: method is nil but DefaultApi.ServiceStatusExecute was just called")
	}
	callInfo := struct {
		R ApiServiceStatusRequest
	}{
		R: r,
	}
	mock.lockServiceStatusExecute.Lock()
	mock.calls.ServiceStatusExecute = append(mock.calls.ServiceStatusExecute, callInfo)
	mock.lockServiceStatusExecute.Unlock()
	return mock.ServiceStatusExecuteFunc(r)
}

// ServiceStatusExecuteCalls gets all the calls that were made to ServiceStatusExecute.
// Check the length with:
//     len(mockedDefaultApi.ServiceStatusExecuteCalls())
func (mock *DefaultApiMock) ServiceStatusExecuteCalls() []struct {
	R ApiServiceStatusRequest
} {
	var calls []struct {
		R ApiServiceStatusRequest
	}
	mock.lockServiceStatusExecute.RLock()
	calls = mock.calls.ServiceStatusExecute
	mock.lockServiceStatusExecute.RUnlock()
	return calls
}

// VersionMetadata calls VersionMetadataFunc.
func (mock *DefaultApiMock) VersionMetadata(ctx _context.Context) ApiVersionMetadataRequest {
	if mock.VersionMetadataFunc == nil {
		panic("DefaultApiMock.VersionMetadataFunc: method is nil but DefaultApi.VersionMetadata was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockVersionMetadata.Lock()
	mock.calls.VersionMetadata = append(mock.calls.VersionMetadata, callInfo)
	mock.lockVersionMetadata.Unlock()
	return mock.VersionMetadataFunc(ctx)
}

// VersionMetadataCalls gets all the calls that were made to VersionMetadata.
// Check the length with:
//     len(mockedDefaultApi.VersionMetadataCalls())
func (mock *DefaultApiMock) VersionMetadataCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockVersionMetadata.RLock()
	calls = mock.calls.VersionMetadata
	mock.lockVersionMetadata.RUnlock()
	return calls
}

// VersionMetadataExecute calls VersionMetadataExecuteFunc.
func (mock *DefaultApiMock) VersionMetadataExecute(r ApiVersionMetadataRequest) (VersionMetadata, *_nethttp.Response, error) {
	if mock.VersionMetadataExecuteFunc == nil {
		panic("DefaultApiMock.VersionMetadataExecuteFunc: method is nil but DefaultApi.VersionMetadataExecute was just called")
	}
	callInfo := struct {
		R ApiVersionMetadataRequest
	}{
		R: r,
	}
	mock.lockVersionMetadataExecute.Lock()
	mock.calls.VersionMetadataExecute = append(mock.calls.VersionMetadataExecute, callInfo)
	mock.lockVersionMetadataExecute.Unlock()
	return mock.VersionMetadataExecuteFunc(r)
}

// VersionMetadataExecuteCalls gets all the calls that were made to VersionMetadataExecute.
// Check the length with:
//     len(mockedDefaultApi.VersionMetadataExecuteCalls())
func (mock *DefaultApiMock) VersionMetadataExecuteCalls() []struct {
	R ApiVersionMetadataRequest
} {
	var calls []struct {
		R ApiVersionMetadataRequest
	}
	mock.lockVersionMetadataExecute.RLock()
	calls = mock.calls.VersionMetadataExecute
	mock.lockVersionMetadataExecute.RUnlock()
	return calls
}
