/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amsclient

import (
	"encoding/json"
)

// FeatureToggle struct for FeatureToggle
type FeatureToggle struct {
	Href    *string `json:"href,omitempty"`
	Id      *string `json:"id,omitempty"`
	Kind    *string `json:"kind,omitempty"`
	Enabled bool    `json:"enabled"`
}

// NewFeatureToggle instantiates a new FeatureToggle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureToggle(enabled bool) *FeatureToggle {
	this := FeatureToggle{}
	this.Enabled = enabled
	return &this
}

// NewFeatureToggleWithDefaults instantiates a new FeatureToggle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureToggleWithDefaults() *FeatureToggle {
	this := FeatureToggle{}
	var enabled bool = false
	this.Enabled = enabled
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *FeatureToggle) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureToggle) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *FeatureToggle) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *FeatureToggle) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FeatureToggle) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureToggle) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FeatureToggle) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FeatureToggle) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *FeatureToggle) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureToggle) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *FeatureToggle) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *FeatureToggle) SetKind(v string) {
	o.Kind = &v
}

// GetEnabled returns the Enabled field value
func (o *FeatureToggle) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FeatureToggle) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FeatureToggle) SetEnabled(v bool) {
	o.Enabled = v
}

func (o FeatureToggle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableFeatureToggle struct {
	value *FeatureToggle
	isSet bool
}

func (v NullableFeatureToggle) Get() *FeatureToggle {
	return v.value
}

func (v *NullableFeatureToggle) Set(val *FeatureToggle) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureToggle) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureToggle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureToggle(val *FeatureToggle) *NullableFeatureToggle {
	return &NullableFeatureToggle{value: val, isSet: true}
}

func (v NullableFeatureToggle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureToggle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
