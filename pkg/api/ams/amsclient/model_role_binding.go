/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amsclient

import (
	"encoding/json"
	"time"
)

// RoleBinding struct for RoleBinding
type RoleBinding struct {
	Href          *string          `json:"href,omitempty"`
	Id            *string          `json:"id,omitempty"`
	Kind          *string          `json:"kind,omitempty"`
	Account       *ObjectReference `json:"account,omitempty"`
	ConfigManaged *bool            `json:"config_managed,omitempty"`
	CreatedAt     *time.Time       `json:"created_at,omitempty"`
	Organization  *ObjectReference `json:"organization,omitempty"`
	Role          *ObjectReference `json:"role,omitempty"`
	Subscription  *ObjectReference `json:"subscription,omitempty"`
	Type          *string          `json:"type,omitempty"`
	UpdatedAt     *time.Time       `json:"updated_at,omitempty"`
}

// NewRoleBinding instantiates a new RoleBinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleBinding() *RoleBinding {
	this := RoleBinding{}
	return &this
}

// NewRoleBindingWithDefaults instantiates a new RoleBinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleBindingWithDefaults() *RoleBinding {
	this := RoleBinding{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RoleBinding) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RoleBinding) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RoleBinding) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleBinding) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleBinding) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleBinding) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *RoleBinding) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *RoleBinding) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *RoleBinding) SetKind(v string) {
	o.Kind = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *RoleBinding) GetAccount() ObjectReference {
	if o == nil || o.Account == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetAccountOk() (*ObjectReference, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *RoleBinding) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given ObjectReference and assigns it to the Account field.
func (o *RoleBinding) SetAccount(v ObjectReference) {
	o.Account = &v
}

// GetConfigManaged returns the ConfigManaged field value if set, zero value otherwise.
func (o *RoleBinding) GetConfigManaged() bool {
	if o == nil || o.ConfigManaged == nil {
		var ret bool
		return ret
	}
	return *o.ConfigManaged
}

// GetConfigManagedOk returns a tuple with the ConfigManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetConfigManagedOk() (*bool, bool) {
	if o == nil || o.ConfigManaged == nil {
		return nil, false
	}
	return o.ConfigManaged, true
}

// HasConfigManaged returns a boolean if a field has been set.
func (o *RoleBinding) HasConfigManaged() bool {
	if o != nil && o.ConfigManaged != nil {
		return true
	}

	return false
}

// SetConfigManaged gets a reference to the given bool and assigns it to the ConfigManaged field.
func (o *RoleBinding) SetConfigManaged(v bool) {
	o.ConfigManaged = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RoleBinding) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RoleBinding) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *RoleBinding) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *RoleBinding) GetOrganization() ObjectReference {
	if o == nil || o.Organization == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetOrganizationOk() (*ObjectReference, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *RoleBinding) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given ObjectReference and assigns it to the Organization field.
func (o *RoleBinding) SetOrganization(v ObjectReference) {
	o.Organization = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleBinding) GetRole() ObjectReference {
	if o == nil || o.Role == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetRoleOk() (*ObjectReference, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleBinding) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given ObjectReference and assigns it to the Role field.
func (o *RoleBinding) SetRole(v ObjectReference) {
	o.Role = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *RoleBinding) GetSubscription() ObjectReference {
	if o == nil || o.Subscription == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetSubscriptionOk() (*ObjectReference, bool) {
	if o == nil || o.Subscription == nil {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *RoleBinding) HasSubscription() bool {
	if o != nil && o.Subscription != nil {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given ObjectReference and assigns it to the Subscription field.
func (o *RoleBinding) SetSubscription(v ObjectReference) {
	o.Subscription = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleBinding) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleBinding) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoleBinding) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RoleBinding) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleBinding) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RoleBinding) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *RoleBinding) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o RoleBinding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.ConfigManaged != nil {
		toSerialize["config_managed"] = o.ConfigManaged
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableRoleBinding struct {
	value *RoleBinding
	isSet bool
}

func (v NullableRoleBinding) Get() *RoleBinding {
	return v.value
}

func (v *NullableRoleBinding) Set(val *RoleBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleBinding(val *RoleBinding) *NullableRoleBinding {
	return &NullableRoleBinding{value: val, isSet: true}
}

func (v NullableRoleBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
