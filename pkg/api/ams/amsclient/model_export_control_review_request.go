/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amsclient

import (
	"encoding/json"
)

// ExportControlReviewRequest struct for ExportControlReviewRequest
type ExportControlReviewRequest struct {
	AccountUsername string `json:"account_username"`
	IgnoreCache     *bool  `json:"ignore_cache,omitempty"`
}

// NewExportControlReviewRequest instantiates a new ExportControlReviewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportControlReviewRequest(accountUsername string) *ExportControlReviewRequest {
	this := ExportControlReviewRequest{}
	this.AccountUsername = accountUsername
	return &this
}

// NewExportControlReviewRequestWithDefaults instantiates a new ExportControlReviewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportControlReviewRequestWithDefaults() *ExportControlReviewRequest {
	this := ExportControlReviewRequest{}
	return &this
}

// GetAccountUsername returns the AccountUsername field value
func (o *ExportControlReviewRequest) GetAccountUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountUsername
}

// GetAccountUsernameOk returns a tuple with the AccountUsername field value
// and a boolean to check if the value has been set.
func (o *ExportControlReviewRequest) GetAccountUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountUsername, true
}

// SetAccountUsername sets field value
func (o *ExportControlReviewRequest) SetAccountUsername(v string) {
	o.AccountUsername = v
}

// GetIgnoreCache returns the IgnoreCache field value if set, zero value otherwise.
func (o *ExportControlReviewRequest) GetIgnoreCache() bool {
	if o == nil || o.IgnoreCache == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreCache
}

// GetIgnoreCacheOk returns a tuple with the IgnoreCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportControlReviewRequest) GetIgnoreCacheOk() (*bool, bool) {
	if o == nil || o.IgnoreCache == nil {
		return nil, false
	}
	return o.IgnoreCache, true
}

// HasIgnoreCache returns a boolean if a field has been set.
func (o *ExportControlReviewRequest) HasIgnoreCache() bool {
	if o != nil && o.IgnoreCache != nil {
		return true
	}

	return false
}

// SetIgnoreCache gets a reference to the given bool and assigns it to the IgnoreCache field.
func (o *ExportControlReviewRequest) SetIgnoreCache(v bool) {
	o.IgnoreCache = &v
}

func (o ExportControlReviewRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_username"] = o.AccountUsername
	}
	if o.IgnoreCache != nil {
		toSerialize["ignore_cache"] = o.IgnoreCache
	}
	return json.Marshal(toSerialize)
}

type NullableExportControlReviewRequest struct {
	value *ExportControlReviewRequest
	isSet bool
}

func (v NullableExportControlReviewRequest) Get() *ExportControlReviewRequest {
	return v.value
}

func (v *NullableExportControlReviewRequest) Set(val *ExportControlReviewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExportControlReviewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExportControlReviewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportControlReviewRequest(val *ExportControlReviewRequest) *NullableExportControlReviewRequest {
	return &NullableExportControlReviewRequest{value: val, isSet: true}
}

func (v NullableExportControlReviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportControlReviewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
