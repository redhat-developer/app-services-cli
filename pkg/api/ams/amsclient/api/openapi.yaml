openapi: 3.0.0
info:
  description: Manage user subscriptions and clusters
  title: Account Management Service API
  version: 0.0.1
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: current domain
  url: /
paths:
  /api/accounts_mgmt/v1/access_token:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenCfg'
          description: access token from registries in docker format
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cannot find registry
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Return access token generated from registries in docker format
  /api/accounts_mgmt/v1/accounts:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Supplies a comma-separated list of fields to be returned.
          Fields of sub-structures and of arrays use <structure>.<field> notation.
          <stucture>.* means all field of a structure
          Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

          ```
          ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
          ```
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the capabilities on a subscription in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchCapabilities
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
          description: A JSON array of account objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of accounts
    post:
      parameters:
      - description: If true, instructs API to avoid making any changes, but rather
          run through validations only.
        explode: true
        in: query
        name: dryRun
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: Account data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account can be created without dryRun parameter
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the account
      security:
      - Bearer: []
      summary: Create a new account
  /api/accounts_mgmt/v1/accounts/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the capabilities on a subscription in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchCapabilities
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No account with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get an account by id
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPatchRequest'
        description: Updated account data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No account with specified id exists
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating account
      security:
      - Bearer: []
      summary: Update an account
  /api/accounts_mgmt/v1/accounts/{id}/labels:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelList'
          description: A JSON array of label
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of labels
    post:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: Label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created or updated label successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the label
      security:
      - Bearer: []
      summary: Create a new label or update an existing label
  /api/accounts_mgmt/v1/accounts/{id}/labels/{key}:
    delete:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Label successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No label with specified key on specified organizations id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the label
      security:
      - Bearer: []
      summary: Delete a label
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Labels found by key
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No label with specified key on specified organizations id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get subscription labels by label key
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: Label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created or updated label successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Label already exists and cannot be updated
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating organizations label
      security:
      - Bearer: []
      summary: Create a new label or update an existing label
  /api/accounts_mgmt/v1/cluster_authorizations:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterAuthorizationRequest'
        description: Cluster and authorization data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterAuthorizationResponse'
          description: The authorization is successful, the requested cluster has
            a valid subscription and is within resource limits.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: AMS subscription exists but is associated with another account
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The limits for this subscription are exceeded.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Other cluster authorization error
      security:
      - Bearer: []
      summary: Authorizes new cluster creation against an exsiting RH Subscription.
  /api/accounts_mgmt/v1/cluster_registrations:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRegistrationRequest'
        description: Cluster and authorization data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRegistrationResponse'
          description: A cluster with the specified cluster_id exists and belongs
            to the user with the specified registry credential token
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterRegistrationResponse'
          description: No cluster with the specified cluster exists, one was successfully
            created and associated with the account with the specified registry credential
            token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Registry credential token is invalid
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cluster with specified cluster_id already associated with another
            user
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: cluster_id provided is invalid
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Too many clusters have been associated with this user recently
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Other cluster registration error
      security:
      - Bearer: []
      summary: Finds or creates a cluster registration with a registy credential token
        and cluster ID
  /api/accounts_mgmt/v1/current_account:
    get:
      parameters:
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account found via JWT
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get the authenticated account
  /api/accounts_mgmt/v1/errors:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: A JSON array or errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      summary: Returns a list of errors
  /api/accounts_mgmt/v1/errors/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No error with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      summary: Get an error by id
  /api/accounts_mgmt/v1/feature_toggles/{id}/query:
    post:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureToggleQueryRequest'
        description: The context of the query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureToggle'
          description: Feature toggle found by id
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Query a feature toggle by id
  /api/accounts_mgmt/v1/labels:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelList'
          description: A JSON array of label objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of labels
  /api/accounts_mgmt/v1/metrics:
    get:
      parameters:
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsList'
          description: A JSON array of metrics objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of metrics
  /api/accounts_mgmt/v1/notify:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        description: The contents of the notification to send to the owner of a cluster/subscription
          in addition to the set of template parameters which are sent automatically
          ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
        required: true
      responses:
        "202":
          description: Notification created and queued to be sent soon
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Notify the owner of cluster/subscription
  /api/accounts_mgmt/v1/organizations:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the capabilities on a subscription in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchCapabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Supplies a comma-separated list of fields to be returned.
          Fields of sub-structures and of arrays use <structure>.<field> notation.
          <stucture>.* means all field of a structure
          Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

          ```
          ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
          ```
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationList'
          description: A JSON array of organization objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of organizations
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        description: Organization data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the organization
      security:
      - Bearer: []
      summary: Create a new organization
  /api/accounts_mgmt/v1/organizations/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the capabilities on a subscription in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchCapabilities
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No organization with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get an organization by id
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationPatchRequest'
        description: Updated organization data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No organization with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating organization
      security:
      - Bearer: []
      summary: Update an organization
  /api/accounts_mgmt/v1/organizations/{id}/labels:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelList'
          description: A JSON array of label
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of labels
    post:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: Label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created or updated label successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the label
      security:
      - Bearer: []
      summary: Create a new label or update an existing label
  /api/accounts_mgmt/v1/organizations/{id}/labels/{key}:
    delete:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Label successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No label with specified key on specified organizations id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the label
      security:
      - Bearer: []
      summary: Delete a label
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Labels found by key
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No label with specified key on specified organizations id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get subscription labels by label key
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: Label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created or updated label successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Label already exists and cannot be updated
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating organizations label
      security:
      - Bearer: []
      summary: Create a new label or update an existing label
  /api/accounts_mgmt/v1/organizations/{id}/summary_dashboard:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
          description: A JSON array of metrics objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a summary of organizations clusters based on metrics
  /api/accounts_mgmt/v1/organizations/{orgId}/quota_cost:
    get:
      parameters:
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: If true, includes the related resources in the output. Could
          slow request response time.
        explode: true
        in: query
        name: fetchRelatedResources
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaCostList'
          description: A JSON array of QuotaCost objects
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No organization with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred when getting this resource
      security:
      - Bearer: []
      summary: Returns a summary of quota cost
  /api/accounts_mgmt/v1/organizations/{orgId}/quota_summary:
    get:
      deprecated: true
      parameters:
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaSummaryList'
          description: A JSON array of QuotaSummary objects
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No organization with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred when getting this resource
      security:
      - Bearer: []
      summary: Returns a summary of resource quota
  /api/accounts_mgmt/v1/organizations/{orgId}/resource_quota:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuotaList'
          description: A JSON array of ResourceQuota objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No organization with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred when getting this resource
      security:
      - Bearer: []
      summary: Returns a list of resource quota objects
    post:
      parameters:
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuotaRequest'
        description: Resource quota data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ResourceQuota already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the resource quota
      security:
      - Bearer: []
      summary: Create a new resource quota
  /api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}:
    delete:
      parameters:
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of quota
        explode: false
        in: path
        name: quotaId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Resource Quota successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No Resource Quota with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the Resource Quota
      security:
      - Bearer: []
      summary: Delete a resource quota
    get:
      parameters:
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of quota
        explode: false
        in: path
        name: quotaId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
          description: Resource quota found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No resource quota with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred when getting this resource
      security:
      - Bearer: []
      summary: Get a resource quota by id
    patch:
      parameters:
      - description: The id of organization
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of quota
        explode: false
        in: path
        name: quotaId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuotaRequest'
        description: Updated resource quota data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
          description: Resource Quota updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No resource quota with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating resource quota
      security:
      - Bearer: []
      summary: Update a resource quota
  /api/accounts_mgmt/v1/plans:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanList'
          description: Plans list
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get all plans
  /api/accounts_mgmt/v1/plans/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
          description: Plan found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No plan with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a plan by id
  /api/accounts_mgmt/v1/pull_secrets:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullSecretRequest'
        description: Identifier of the resource in the external service that this
          pull secret relates to
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenCfg'
          description: access token from registries in docker format
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Cannot find registry
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Return access token generated from registries in docker format
  /api/accounts_mgmt/v1/pull_secrets/{externalResourceId}:
    delete:
      parameters:
      - description: The external resource id of record
        explode: false
        in: path
        name: externalResourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Pull secret successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to delete pull secret
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No Pull secret with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the pull secret
      security:
      - Bearer: []
      summary: Delete a pull secret
  /api/accounts_mgmt/v1/registries:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryList'
          description: A JSON array of registry objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of registries
  /api/accounts_mgmt/v1/registries/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registry'
          description: Registry found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No registry with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get an registry by id
  /api/accounts_mgmt/v1/registry_credentials:
    get:
      description: List Registry Credentials
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryCredentialList'
          description: A JSON array of RegistryCredential objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not allowed to list RegistryCredentials
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryCredential'
        description: Registry credential data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryCredential'
          description: Registry credential created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not allowed to create RegistryCredentials
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: A RegistryCredential with this type already exists for this
            user
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unable to create Registry Credential
      security:
      - Bearer: []
      summary: Request the creation of a registry credential
  /api/accounts_mgmt/v1/registry_credentials/{id}:
    delete:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Registry credential successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No registry credential with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the registry credential
      security:
      - Bearer: []
      summary: Delete a registry credential by id
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryCredential'
          description: Registry credential found
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No registry credential with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a registry credentials by id
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryCredentialPatchRequest'
        description: Updated registry credential data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryCredential'
          description: Registry credential updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not allowed to update registry credential or the specified
            field(s)
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No registry credential with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating registry credential
      security:
      - Bearer: []
      summary: Update a registry credential
  /api/accounts_mgmt/v1/reserved_resources:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservedResourceList'
          description: A JSON array of reserved resource objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of reserved resources
  /api/accounts_mgmt/v1/resource_quota:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuotaList'
          description: A JSON array of ResourceQuota objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred when getting this resource
      security:
      - Bearer: []
      summary: Returns a list of resource quota objects
  /api/accounts_mgmt/v1/role_bindings:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBindingList'
          description: A JSON array of role binding objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of role bindings
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleBindingCreateRequest'
        description: Role binding data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBinding'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Role binding already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating role binding
      security:
      - Bearer: []
      summary: Create a new role binding
  /api/accounts_mgmt/v1/role_bindings/{id}:
    delete:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Role binding successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No role binding with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the role binding
      security:
      - Bearer: []
      summary: Delete a role binding
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBinding'
          description: Role binding found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No role binding with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a role binding
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleBindingRequest'
        description: Updated role binding data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBinding'
          description: Role Binding updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No role binding with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating role binding
      security:
      - Bearer: []
      summary: Update a role binding
  /api/accounts_mgmt/v1/roles:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleList'
          description: A JSON array of role objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of roles
  /api/accounts_mgmt/v1/roles/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
          description: Role found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No role with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a role by id
  /api/accounts_mgmt/v1/sku_rules:
    get:
      parameters:
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuRulesList'
          description: A JSON array of sku rules objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of UHC product SKU Rules
  /api/accounts_mgmt/v1/sku_rules/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuRules'
          description: sku rules found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No sku rules with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a sku rules by id
  /api/accounts_mgmt/v1/skus:
    get:
      parameters:
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkuList'
          description: A JSON array of sku objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of UHC product SKUs
  /api/accounts_mgmt/v1/skus/{id}:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU'
          description: sku found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No sku with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a sku by id
  /api/accounts_mgmt/v1/subscriptions:
    get:
      parameters:
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: If true, includes the account reference information in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchAccounts
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the capabilities on a subscription in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchCapabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          Supplies a comma-separated list of fields to be returned.
          Fields of sub-structures and of arrays use <structure>.<field> notation.
          <stucture>.* means all field of a structure
          Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

          ```
          ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
          ```
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the criteria to filter the subscription resource based on their labels.
          A label is represented as a `key=value` pair,

          ```
          labels = "foo=bar"
          ```

          and multiple labels are separated by comma,

          ```
          labels = "foo=bar,fooz=barz"
          ```
        explode: true
        in: query
        name: labels
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
          description: A JSON array of subscription objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of subscriptions
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreateRequest'
        description: Subscription Creation data
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Subscription already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating subscription
      security:
      - Bearer: []
      summary: Create a new subscription
  /api/accounts_mgmt/v1/subscriptions/{id}:
    delete:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Subscription deprovisioned by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No subscription with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Deletes a subscription by id
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: If true, includes the account reference information in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchAccounts
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the labels on a subscription/organization/account
          in the output. Could slow request response time.
        explode: true
        in: query
        name: fetchLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, includes the capabilities on a subscription in the output.
          Could slow request response time.
        explode: true
        in: query
        name: fetchCapabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: If true, fetches, from the clusters service, the total numbers
          of CPU's and sockets under an obligation, and includes in the output. Could
          slow request response time.
        explode: true
        in: query
        name: fetchCpuAndSocket
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Subscription found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No subscription with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a subscription by id
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPatchRequest'
        description: Updated subscription data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Subscription updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not allowed to update subscriptions or the specified field(s)
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No subscription with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating subscription
      security:
      - Bearer: []
      summary: Update a subscription
  /api/accounts_mgmt/v1/subscriptions/{id}/labels:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelList'
          description: A JSON array of label
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of labels
    post:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: Label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created or updated label successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the label
      security:
      - Bearer: []
      summary: Create a new label or update an existing label
  /api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}:
    delete:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Label successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No label with specified key on specified subscription id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the label
      security:
      - Bearer: []
      summary: Delete a label
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Labels found by key
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No label with specified key on specified subscription id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get subscription labels by label key
    patch:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the label
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: Label data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: Created or updated label successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Label already exists and cannot be updated
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error updating subscription label
      security:
      - Bearer: []
      summary: Create a new label or update an existing label
  /api/accounts_mgmt/v1/subscriptions/{id}/notify:
    post:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        description: The contents of the notification to send to the owner of a subscription
          in addition to the set of template parameters which are sent automatically
          ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
        required: true
      responses:
        "202":
          description: Notification created and queued to be sent soon
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Notify the owner of a subscription
  /api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservedResourceList'
          description: A JSON array of reserved resource objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of reserved resources
  /api/accounts_mgmt/v1/subscriptions/{id}/support_cases:
    get:
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          description: A JSON array of support cases objects
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of open support creates opened against the external
        cluster id of this subscrption
  /api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts:
    get:
      parameters:
      - description: The id of subscription
        explode: false
        in: path
        name: subId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number of record list when record list exceeds specified
          page size
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Maximum number of records to return
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 100
          minimum: 0
          type: integer
        style: form
      - description: |-
          Specifies the search criteria. The syntax of this parameter is
          similar to the syntax of the _where_ clause of an SQL statement,
          using the names of the json attributes / column names of the account.
          For example, in order to retrieve all the accounts with a username
          starting with `my`:

          ```sql
          username like 'my%'
          ```

          The search criteria can also be applied on related resource.
          For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

          ```sql
          labels.key = 'foo' and labels.value = 'bar'
          ```

          If the parameter isn't provided, or if the value is empty, then
          all the accounts that the user has permission to see will be
          returned.
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Supplies a comma-separated list of fields to be returned.
          Fields of sub-structures and of arrays use <structure>.<field> notation.
          <stucture>.* means all field of a structure
          Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

          ```
          ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
          ```
        explode: true
        in: query
        name: fields
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the _order by_ clause of an SQL statement,
          but using the names of the json attributes / column of the account.
          For example, in order to retrieve all accounts ordered by username:

          ```sql
          username asc
          ```

          Or in order to retrieve all accounts ordered by username _and_ first name:

          ```sql
          username asc, firstName asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          no explicit ordering will be applied.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
          description: A JSON array of account objects that are notification contacts
            for this subscription
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of notification contacts for the given subscription
    post:
      parameters:
      - description: The id of subscription
        explode: false
        in: path
        name: subId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationContactCreateRequest'
        description: Add a notification contact by an account's username
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Notification contact already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating notification contact
      security:
      - Bearer: []
      summary: Add an account as a notification contact to this subscription
  /api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}:
    delete:
      parameters:
      - description: The id of subscription
        explode: false
        in: path
        name: subId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of account
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Notification contact deleted by subscription and account id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No notification contact with specified subscription and account
            id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Deletes a notification contact by subscription and account id
  /api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}:
    get:
      parameters:
      - description: The id of subscription
        explode: false
        in: path
        name: subId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of reserved resource
        explode: false
        in: path
        name: reservedResourceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservedResource'
          description: Reserved resources found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No reserved resources with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get reserved resources by id
  /api/accounts_mgmt/v1/support_cases:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportCasesRequest'
        description: The contents of the support case to be created
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportCasesCreatedResponse'
          description: Support case created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: create a support case for the subscription
  /api/accounts_mgmt/v1/support_cases/{caseId}:
    delete:
      parameters:
      - description: The id of a support case
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Support case successfully deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No support case with specified case id on specified subscription
            id exists
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not allowed to close a case that is already closed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred deleting the support case
      security:
      - Bearer: []
      summary: Delete a support case
  /api/accounts_mgmt/v1/token_authorization:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenAuthorizationRequest'
        description: Token authorization data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenAuthorizationResponse'
          description: The account belongs to the user with the specified registry
            credential token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Registry credential token is invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Other token authorization error
      security:
      - Bearer: []
      summary: Finds the account owner of the provided token
  /api/authorizations/v1/access_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessReview'
        description: Access review data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessReviewResponse'
          description: Review successfully generated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported action, non-existent resource type, or non-existent
            account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating access review
      security:
      - Bearer: []
      summary: Review an account's access to perform an action on a particular resource
        or resource type
  /api/authorizations/v1/capability_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapabilityReviewRequest'
        description: Capability review data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilityReview'
          description: Successful review
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform capability reviews
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating capability review
      security:
      - Bearer: []
      summary: Review an account's capabilities
  /api/authorizations/v1/export_control_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportControlReviewRequest'
        description: Export control review data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportControlReview'
          description: Successful review
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating access review
      security:
      - Bearer: []
      summary: |
        Determine whether a user is restricted from downloading Red Hat software based on export control compliance.
  /api/authorizations/v1/resource_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceReviewRequest'
        description: Resource review data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceReview'
          description: Successful review
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform resource reviews
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported action or non-existent resource type
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating access review
      security:
      - Bearer: []
      summary: Obtain resource ids for resources an account may perform the specified
        action upon. Resource ids returned as ["*"] is shorthand for all ids.
  /api/authorizations/v1/self_access_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfAccessReview'
        description: Self access review data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessReviewResponse'
          description: Review successfully generated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported action or non-existent resource type
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating access review
      security:
      - Bearer: []
      summary: Review your ability to perform an action on a particular resource or
        resource type
  /api/authorizations/v1/self_resource_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfResourceReviewRequest'
        description: Self resource review data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfResourceReview'
          description: Successful review
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform self resource reviews
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported action or non-existent resource type
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating access review
      security:
      - Bearer: []
      summary: Obtain resource ids for resources you may perform the specified action
        upon. Resource ids returned as ["*"] is shorthand for all ids.
  /api/authorizations/v1/self_terms_review:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsReviewResponse'
          description: Review successfully generated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported action or non-existent resource type
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating terms review
      security:
      - Bearer: []
      summary: Review your status of Terms
  /api/authorizations/v1/terms_review:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermsReview'
        description: Data to check terms for
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermsReviewResponse'
          description: Review successfully generated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported action, non-existent resource type, or non-existent
            account
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred while generating terms review
      security:
      - Bearer: []
      summary: Review an account's status of Terms
components:
  parameters:
    accountId:
      description: The id of account
      explode: false
      in: path
      name: accountId
      required: true
      schema:
        type: string
      style: simple
    caseId:
      description: The id of a support case
      explode: false
      in: path
      name: caseId
      required: true
      schema:
        type: string
      style: simple
    dryRun:
      description: If true, instructs API to avoid making any changes, but rather
        run through validations only.
      explode: true
      in: query
      name: dryRun
      required: false
      schema:
        type: boolean
      style: form
    externalResourceId:
      description: The external resource id of record
      explode: false
      in: path
      name: externalResourceId
      required: true
      schema:
        type: string
      style: simple
    fetchAccounts:
      description: If true, includes the account reference information in the output.
        Could slow request response time.
      explode: true
      in: query
      name: fetchAccounts
      required: false
      schema:
        type: boolean
      style: form
    fetchCapabilities:
      description: If true, includes the capabilities on a subscription in the output.
        Could slow request response time.
      explode: true
      in: query
      name: fetchCapabilities
      required: false
      schema:
        type: boolean
      style: form
    fetchCpuAndSocket:
      description: If true, fetches, from the clusters service, the total numbers
        of CPU's and sockets under an obligation, and includes in the output. Could
        slow request response time.
      explode: true
      in: query
      name: fetchCpuAndSocket
      required: false
      schema:
        type: boolean
      style: form
    fetchLabels:
      description: If true, includes the labels on a subscription/organization/account
        in the output. Could slow request response time.
      explode: true
      in: query
      name: fetchLabels
      required: false
      schema:
        type: boolean
      style: form
    fetchRelatedResources:
      description: If true, includes the related resources in the output. Could slow
        request response time.
      explode: true
      in: query
      name: fetchRelatedResources
      required: false
      schema:
        type: boolean
      style: form
    fields:
      description: |-
        Supplies a comma-separated list of fields to be returned.
        Fields of sub-structures and of arrays use <structure>.<field> notation.
        <stucture>.* means all field of a structure
        Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

        ```
        ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
        ```
      explode: true
      in: query
      name: fields
      required: false
      schema:
        type: string
      style: form
    id:
      description: The id of record
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    key:
      description: The key of the label
      explode: false
      in: path
      name: key
      required: true
      schema:
        type: string
      style: simple
    labels:
      description: |-
        Specifies the criteria to filter the subscription resource based on their labels.
        A label is represented as a `key=value` pair,

        ```
        labels = "foo=bar"
        ```

        and multiple labels are separated by comma,

        ```
        labels = "foo=bar,fooz=barz"
        ```
      explode: true
      in: query
      name: labels
      required: false
      schema:
        type: string
      style: form
    orderBy:
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement,
        but using the names of the json attributes / column of the account.
        For example, in order to retrieve all accounts ordered by username:

        ```sql
        username asc
        ```

        Or in order to retrieve all accounts ordered by username _and_ first name:

        ```sql
        username asc, firstName asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        no explicit ordering will be applied.
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    orgId:
      description: The id of organization
      explode: false
      in: path
      name: orgId
      required: true
      schema:
        type: string
      style: simple
    page:
      description: Page number of record list when record list exceeds specified page
        size
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    quotaId:
      description: The id of quota
      explode: false
      in: path
      name: quotaId
      required: true
      schema:
        type: string
      style: simple
    reservedResourceId:
      description: The id of reserved resource
      explode: false
      in: path
      name: reservedResourceId
      required: true
      schema:
        type: string
      style: simple
    search:
      description: |-
        Specifies the search criteria. The syntax of this parameter is
        similar to the syntax of the _where_ clause of an SQL statement,
        using the names of the json attributes / column names of the account.
        For example, in order to retrieve all the accounts with a username
        starting with `my`:

        ```sql
        username like 'my%'
        ```

        The search criteria can also be applied on related resource.
        For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

        ```sql
        labels.key = 'foo' and labels.value = 'bar'
        ```

        If the parameter isn't provided, or if the value is empty, then
        all the accounts that the user has permission to see will be
        returned.
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
    size:
      description: Maximum number of records to return
      explode: true
      in: query
      name: size
      required: false
      schema:
        default: 100
        minimum: 0
        type: integer
      style: form
    subId:
      description: The id of subscription
      explode: false
      in: path
      name: subId
      required: true
      schema:
        type: string
      style: simple
  schemas:
    AccessReview:
      example:
        subscription_id: subscription_id
        cluster_id: cluster_id
        cluster_uuid: cluster_uuid
        account_username: account_username
        organization_id: organization_id
        resource_type: AddOn
        action: get
      properties:
        account_username:
          type: string
        action:
          enum:
          - get
          - list
          - create
          - delete
          - update
          type: string
        cluster_id:
          type: string
        cluster_uuid:
          type: string
        organization_id:
          type: string
        resource_type:
          enum:
          - AddOn
          - Flavour
          - Account
          - AccountPool
          - Cluster
          - Plan
          - Subscription
          - Organization
          - Role
          - Permission
          - RoleBinding
          - Registry
          - RegistryCredential
          - CurrentAccount
          - AccessReview
          - SelfAcccessReview
          - ResourceReview
          - SelfResourceReview
          - ClusterRegistration
          - AccessToken
          - ClusterAuthorization
          - SelfManagedCluster
          - RedhatManagedCluster
          - ExportControlReview
          - ClusterLog
          - ClusterCredential
          - ClusterMetric
          - ResourceQuota
          - ReservedResource
          - Dashboard
          - ClusterProviderAndRegion
          - ServiceLog
          - InternalServiceLog
          - CSLogs
          - QuotaSummary
          - SubscriptionLabel
          - OrganizationLabel
          - SubscriptionLabelInternal
          - SelfAccessReview
          - SubscriptionInternal
          type: string
        subscription_id:
          type: string
      required:
      - account_username
      - action
      - resource_type
      type: object
    AccessReviewResponse:
      example:
        subscription_id: subscription_id
        cluster_id: cluster_id
        account_id: account_id
        cluster_uuid: cluster_uuid
        allowed: true
        organization_id: organization_id
        resource_type: AddOn
        action: get
      properties:
        account_id:
          type: string
        action:
          enum:
          - get
          - list
          - create
          - delete
          - update
          type: string
        allowed:
          type: boolean
        cluster_id:
          type: string
        cluster_uuid:
          type: string
        organization_id:
          type: string
        resource_type:
          enum:
          - AddOn
          - Flavour
          - Account
          - AccountPool
          - Cluster
          - Plan
          - Subscription
          - Organization
          - Role
          - Permission
          - RoleBinding
          - Registry
          - RegistryCredential
          - CurrentAccount
          - AccessReview
          - SelfAcccessReview
          - ResourceReview
          - SelfResourceReview
          - ClusterRegistration
          - AccessToken
          - ClusterAuthorization
          - SelfManagedCluster
          - RedhatManagedCluster
          - ExportControlReview
          - ClusterLog
          - ClusterCredential
          - ClusterMetric
          - ResourceQuota
          - ReservedResource
          - Dashboard
          - ClusterProviderAndRegion
          - ServiceLog
          - InternalServiceLog
          - CSLogs
          - QuotaSummary
          - SubscriptionLabel
          - OrganizationLabel
          - SubscriptionLabelInternal
          - SelfAccessReview
          - SubscriptionInternal
          type: string
        subscription_id:
          type: string
      required:
      - allowed
      type: object
    AccessTokenCfg:
      example:
        auths:
          key: '{}'
      properties:
        auths:
          additionalProperties: true
          type: object
      required:
      - auths
      type: object
    Account:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Account_allOf'
    AccountList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/AccountList_allOf'
    AccountPatchRequest:
      example:
        service_account: true
        ban_code: ban_code
        organization_id: organization_id
        last_name: last_name
        ban_description: ban_description
        banned: true
        first_name: first_name
        email: email
      properties:
        ban_code:
          type: string
        ban_description:
          type: string
        banned:
          type: boolean
        email:
          format: email
          type: string
        first_name:
          type: string
        last_name:
          type: string
        organization_id:
          type: string
        service_account:
          type: boolean
      type: object
    AccountReference:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/AccountReference_allOf'
    Capability:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Capability_allOf'
    CapabilityReview:
      example:
        result: result
      properties:
        result:
          type: string
      required:
      - result
      type: object
    CapabilityReviewRequest:
      example:
        subscription_id: subscription_id
        capability: manage_cluster_admin
        cluster_id: cluster_id
        account_username: account_username
        organization_id: organization_id
        type: Cluster
      properties:
        account_username:
          type: string
        capability:
          enum:
          - manage_cluster_admin
          type: string
        cluster_id:
          type: string
        organization_id:
          type: string
        subscription_id:
          type: string
        type:
          enum:
          - Cluster
          type: string
      required:
      - account_username
      - capability
      - type
      type: object
    ClusterAuthorizationRequest:
      example:
        availability_zone: availability_zone
        byoc: true
        resources:
        - null
        - null
        display_name: display_name
        cloud_account_id: cloud_account_id
        cluster_id: cluster_id
        disconnected: true
        managed: true
        account_username: account_username
        product_id: osd
        reserve: true
        cloud_provider_id: cloud_provider_id
        external_cluster_id: external_cluster_id
        product_category: assistedInstall
      properties:
        account_username:
          type: string
        availability_zone:
          type: string
        byoc:
          type: boolean
        cloud_account_id:
          type: string
        cloud_provider_id:
          type: string
        cluster_id:
          type: string
        disconnected:
          type: boolean
        display_name:
          type: string
        external_cluster_id:
          type: string
        managed:
          type: boolean
        product_category:
          enum:
          - assistedInstall
          type: string
        product_id:
          default: osd
          enum:
          - ocp
          - osd
          - osdtrial
          - moa
          - rhmi
          type: string
        reserve:
          type: boolean
        resources:
          items:
            $ref: '#/components/schemas/ReservedResource'
          type: array
      required:
      - account_username
      - cluster_id
      type: object
    ClusterAuthorizationResponse:
      example:
        allowed: true
        organization_id: organization_id
        subscription:
          kind: kind
          href: href
          id: id
        excess_resources:
        - null
        - null
      properties:
        allowed:
          type: boolean
        excess_resources:
          items:
            $ref: '#/components/schemas/ExcessResource'
          type: array
        organization_id:
          type: string
        subscription:
          $ref: '#/components/schemas/ObjectReference'
      required:
      - allowed
      - excess_resources
      type: object
    ClusterMetricsNodes:
      properties:
        compute:
          type: double
        infra:
          type: double
        master:
          type: double
        total:
          type: double
      type: object
    ClusterRegistrationRequest:
      example:
        cluster_id: cluster_id
        authorization_token: authorization_token
      properties:
        authorization_token:
          type: string
        cluster_id:
          type: string
      type: object
    ClusterRegistrationResponse:
      example:
        cluster_id: cluster_id
        account_id: account_id
        expires_at: expires_at
        authorization_token: authorization_token
      properties:
        account_id:
          type: string
        authorization_token:
          type: string
        cluster_id:
          type: string
        expires_at:
          description: Cluster Registration expiration in Unix time
          type: string
      type: object
    ClusterResource:
      properties:
        total:
          $ref: '#/components/schemas/ClusterResource_total'
        updated_timestamp:
          format: date-time
          type: string
        used:
          $ref: '#/components/schemas/ClusterResource_total'
      required:
      - total
      - updated_timestamp
      - used
      type: object
    ClusterUpgrade:
      properties:
        available:
          type: boolean
        state:
          type: string
        updated_timestamp:
          format: date-time
          type: string
        version:
          type: string
      type: object
    EphemeralResourceQuota:
      properties:
        allowed:
          type: integer
        availability_zone_type:
          type: string
        byoc:
          type: boolean
        resource_name:
          type: string
        resource_type:
          type: string
        sku:
          type: string
        sku_count:
          type: integer
      type: object
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ErrorList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ErrorList_allOf'
    ExcessResource:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ExcessResource_allOf'
    ExportControlReview:
      example:
        restricted: true
      properties:
        restricted:
          type: boolean
      required:
      - restricted
      type: object
    ExportControlReviewRequest:
      example:
        ignore_cache: true
        account_username: account_username
      properties:
        account_username:
          type: string
        ignore_cache:
          type: boolean
      required:
      - account_username
      type: object
    FeatureToggle:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/FeatureToggle_allOf'
    FeatureToggleQueryRequest:
      allOf:
      - $ref: '#/components/schemas/FeatureToggleQueryRequest_allOf'
    Label:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Label_allOf'
    LabelList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/LabelList_allOf'
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    Metric:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Metric_allOf'
    MetricsList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/MetricsList_allOf'
    NotificationContactCreateRequest:
      example:
        account_identifier: account_identifier
      properties:
        account_identifier:
          type: string
      type: object
    NotificationRequest:
      example:
        subscription_id: subscription_id
        cluster_id: cluster_id
        template_name: template_name
        include_red_hat_associates: true
        template_parameters:
        - name: name
          content: content
        - name: name
          content: content
        cluster_uuid: cluster_uuid
        bcc_address: bcc_address
        subject: subject
      properties:
        bcc_address:
          type: string
        cluster_id:
          type: string
        cluster_uuid:
          type: string
        include_red_hat_associates:
          type: boolean
        subject:
          type: string
        subscription_id:
          type: string
        template_name:
          type: string
        template_parameters:
          items:
            $ref: '#/components/schemas/TemplateParameter'
          type: array
      required:
      - subject
      - template_name
      type: object
    ObjectReference:
      example:
        kind: kind
        href: href
        id: id
      properties:
        href:
          type: string
        id:
          type: string
        kind:
          type: string
      type: object
    OneMetric:
      properties:
        cloud_provider:
          type: string
        cluster_type:
          type: string
        compute_nodes_cpu:
          $ref: '#/components/schemas/ClusterResource'
        compute_nodes_memory:
          $ref: '#/components/schemas/ClusterResource'
        compute_nodes_sockets:
          $ref: '#/components/schemas/ClusterResource'
        console_url:
          type: string
        cpu:
          $ref: '#/components/schemas/ClusterResource'
        critical_alerts_firing:
          type: double
        health_state:
          enum:
          - healthy
          - unhealthy
          - unknown
          type: string
        memory:
          $ref: '#/components/schemas/ClusterResource'
        nodes:
          $ref: '#/components/schemas/ClusterMetricsNodes'
        openshift_version:
          type: string
        operating_system:
          type: string
        operators_condition_failing:
          type: double
        region:
          type: string
        sockets:
          $ref: '#/components/schemas/ClusterResource'
        state:
          type: string
        state_description:
          type: string
        storage:
          $ref: '#/components/schemas/ClusterResource'
        subscription_cpu_total:
          type: double
        subscription_obligation_exists:
          type: double
        subscription_socket_total:
          type: double
        upgrade:
          $ref: '#/components/schemas/ClusterUpgrade'
      required:
      - HealthState
      - cloud_provider
      - cluster_type
      - compute_nodes_cpu
      - compute_nodes_memory
      - compute_nodes_sockets
      - console_url
      - cpu
      - critical_alerts_firing
      - memory
      - nodes
      - openshift_version
      - operating_system
      - operators_condition_failing
      - region
      - sockets
      - state
      - state_description
      - storage
      - subscription_cpu_total
      - subscription_obligation_exists
      - subscription_socket_total
      - upgrade
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Organization_allOf'
    OrganizationList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/OrganizationList_allOf'
    OrganizationPatchRequest:
      example:
        ebs_account_id: ebs_account_id
        name: name
        external_id: external_id
      properties:
        ebs_account_id:
          type: string
        external_id:
          type: string
        name:
          type: string
      type: object
    Permission:
      allOf:
      - $ref: '#/components/schemas/Permission_allOf'
    PermissionList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/PermissionList_allOf'
    Plan:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Plan_allOf'
    PlanList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/PlanList_allOf'
    PullSecretRequest:
      example:
        external_resource_id: external_resource_id
      properties:
        external_resource_id:
          type: string
      required:
      - external_resource_id
      type: object
    QuotaCost:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/QuotaCost_allOf'
    QuotaCostList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/QuotaCostList_allOf'
    QuotaSummary:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/QuotaSummary_allOf'
    QuotaSummaryList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/QuotaSummaryList_allOf'
    Registry:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Registry_allOf'
    RegistryAddress:
      additionalProperties:
        properties:
          auth:
            type: string
          email:
            format: email
            type: string
        type: object
      type: object
    RegistryCreateRequest:
      allOf:
      - $ref: '#/components/schemas/RegistryRequest'
      - required:
        - name
        - type
        - url
      type: object
    RegistryCredential:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/RegistryCredential_allOf'
    RegistryCredentialList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/RegistryCredentialList_allOf'
    RegistryCredentialPatchRequest:
      example:
        account_id: account_id
        external_resource_id: external_resource_id
        registry_id: registry_id
        token: token
        username: username
      properties:
        account_id:
          type: string
        external_resource_id:
          type: string
        registry_id:
          type: string
        token:
          type: string
        username:
          type: string
      type: object
    RegistryList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/RegistryList_allOf'
    RegistryRequest:
      properties:
        cloudAlias:
          type: boolean
        name:
          type: string
        org_name:
          type: string
        team_name:
          type: string
        type:
          type: string
        url:
          type: string
      type: object
    RelatedResource:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/RelatedResource_allOf'
    ReservedResource:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ReservedResource_allOf'
    ReservedResourceList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ReservedResourceList_allOf'
    ResourceQuota:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ResourceQuota_allOf'
    ResourceQuotaList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ResourceQuotaList_allOf'
    ResourceQuotaRequest:
      example:
        sku_count: 6
        allowed: 0
        sku: sku
        type: Config
      properties:
        allowed:
          type: integer
        sku:
          type: string
        sku_count:
          type: integer
        type:
          enum:
          - Config
          - Manual
          - Subscription
          type: string
      required:
      - count
      - sku
      type: object
    ResourceReview:
      example:
        subscription_ids:
        - subscription_ids
        - subscription_ids
        account_username: account_username
        cluster_uuids:
        - cluster_uuids
        - cluster_uuids
        resource_type: Cluster
        action: get
        cluster_ids:
        - cluster_ids
        - cluster_ids
        organization_ids:
        - organization_ids
        - organization_ids
      properties:
        account_username:
          type: string
        action:
          enum:
          - get
          - list
          - create
          - delete
          - update
          type: string
        cluster_ids:
          items:
            type: string
          type: array
        cluster_uuids:
          items:
            type: string
          type: array
        organization_ids:
          items:
            type: string
          type: array
        resource_type:
          enum:
          - Cluster
          - Subscription
          type: string
        subscription_ids:
          items:
            type: string
          type: array
      required:
      - account_username
      - action
      - cluster_ids
      - cluster_uuids
      - organization_ids
      - resource_type
      - subscription_ids
      type: object
    ResourceReviewRequest:
      example:
        account_username: account_username
        resource_type: Cluster
        action: get
      properties:
        account_username:
          type: string
        action:
          enum:
          - get
          - delete
          - update
          type: string
        resource_type:
          enum:
          - Cluster
          - Subscription
          type: string
      type: object
    Role:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Role_allOf'
    RoleBinding:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/RoleBinding_allOf'
    RoleBindingCreateRequest:
      allOf:
      - $ref: '#/components/schemas/RoleBindingRequest'
      - required:
        - account_id
        - role_id
        - type
    RoleBindingList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/RoleBindingList_allOf'
    RoleBindingRequest:
      example:
        subscription_id: subscription_id
        account_id: account_id
        role_id: role_id
        organization_id: organization_id
        config_managed: true
        type: type
      properties:
        account_id:
          type: string
        config_managed:
          type: boolean
        organization_id:
          type: string
        role_id:
          type: string
        subscription_id:
          type: string
        type:
          type: string
      type: object
    RoleList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/RoleList_allOf'
    SKU:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/SKU_allOf'
    SelfAccessReview:
      example:
        subscription_id: subscription_id
        cluster_id: cluster_id
        cluster_uuid: cluster_uuid
        organization_id: organization_id
        resource_type: AddOn
        action: get
      properties:
        action:
          enum:
          - get
          - list
          - create
          - delete
          - update
          type: string
        cluster_id:
          type: string
        cluster_uuid:
          type: string
        organization_id:
          type: string
        resource_type:
          enum:
          - AddOn
          - Flavour
          - Account
          - AccountPool
          - Cluster
          - Plan
          - Subscription
          - Organization
          - Role
          - Permission
          - RoleBinding
          - Registry
          - RegistryCredential
          - CurrentAccount
          - AccessReview
          - SelfAcccessReview
          - ResourceReview
          - SelfResourceReview
          - ClusterRegistration
          - AccessToken
          - ClusterAuthorization
          - SelfManagedCluster
          - RedhatManagedCluster
          - ExportControlReview
          - ClusterLog
          - ClusterCredential
          - ClusterMetric
          - ResourceQuota
          - ReservedResource
          - Dashboard
          - ClusterProviderAndRegion
          - ServiceLog
          - InternalServiceLog
          - CSLogs
          - QuotaSummary
          - SubscriptionLabel
          - OrganizationLabel
          - SubscriptionLabelInternal
          - SelfAccessReview
          - SubscriptionInternal
          type: string
        subscription_id:
          type: string
      required:
      - action
      - resource_type
      type: object
    SelfResourceReview:
      example:
        subscription_ids:
        - subscription_ids
        - subscription_ids
        cluster_uuids:
        - cluster_uuids
        - cluster_uuids
        resource_type: Cluster
        action: get
        cluster_ids:
        - cluster_ids
        - cluster_ids
        organization_ids:
        - organization_ids
        - organization_ids
      properties:
        action:
          enum:
          - get
          - list
          - create
          - delete
          - update
          type: string
        cluster_ids:
          items:
            type: string
          type: array
        cluster_uuids:
          items:
            type: string
          type: array
        organization_ids:
          items:
            type: string
          type: array
        resource_type:
          enum:
          - Cluster
          - Subscription
          type: string
        subscription_ids:
          items:
            type: string
          type: array
      required:
      - action
      - cluster_ids
      - cluster_uuids
      - organization_ids
      - resource_type
      - subscription_ids
      type: object
    SelfResourceReviewRequest:
      example:
        resource_type: Cluster
        action: get
      properties:
        action:
          enum:
          - get
          - delete
          - update
          type: string
        resource_type:
          enum:
          - Cluster
          - Subscription
          type: string
      type: object
    SkuList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/SkuList_allOf'
    SkuRules:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/SkuRules_allOf'
    SkuRulesList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/SkuRulesList_allOf'
    Subscription:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Subscription_allOf'
    SubscriptionCreateRequest:
      example:
        cluster_uuid: cluster_uuid
        console_url: console_url
        display_name: display_name
        plan_id: OCP
        status: Disconnected
      properties:
        cluster_uuid:
          type: string
        console_url:
          type: string
        display_name:
          type: string
        plan_id:
          enum:
          - OCP
          type: string
        status:
          enum:
          - Disconnected
          type: string
      required:
      - cluster_uuid
      - plan_id
      - status
      type: object
    SubscriptionList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/SubscriptionList_allOf'
    SubscriptionPatchRequest:
      example:
        service_level: L1-L3
        usage: Production
        region_id: region_id
        cpu_total: 0
        support_level: Eval
        trial_end_date: 2000-01-23T04:56:07.000+00:00
        display_name: display_name
        socket_total: 6
        product_bundle: Openshift
        consumer_uuid: consumer_uuid
        cloud_account_id: cloud_account_id
        cluster_id: cluster_id
        provenance: provenance
        console_url: console_url
        managed: true
        organization_id: organization_id
        creator_id: creator_id
        cloud_provider_id: cloud_provider_id
        system_units: Cores/vCPU
        external_cluster_id: external_cluster_id
        cluster_billing_model: standard
        plan_id: plan_id
        released: true
        status: status
      properties:
        cloud_account_id:
          type: string
        cloud_provider_id:
          type: string
        cluster_billing_model:
          enum:
          - standard
          - marketplace
          type: string
        cluster_id:
          type: string
        console_url:
          type: string
        consumer_uuid:
          type: string
        cpu_total:
          type: integer
        creator_id:
          type: string
        display_name:
          type: string
        external_cluster_id:
          type: string
        managed:
          type: boolean
        organization_id:
          type: string
        plan_id:
          type: string
        product_bundle:
          enum:
          - Openshift
          - JBoss-Middleware
          - IBM-CloudPak
          type: string
        provenance:
          type: string
        region_id:
          type: string
        released:
          type: boolean
        service_level:
          enum:
          - L1-L3
          - L3-only
          type: string
        socket_total:
          type: integer
        status:
          type: string
        support_level:
          enum:
          - Eval
          - Standard
          - Premium
          - Self-Support
          - None
          type: string
        system_units:
          enum:
          - Cores/vCPU
          - Sockets
          type: string
        trial_end_date:
          format: date-time
          type: string
        usage:
          enum:
          - Production
          - Development/Test
          - Disaster Recovery
          - Academic
          type: string
      type: object
    Summary:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Summary_allOf'
    SummaryMetrics:
      allOf:
      - $ref: '#/components/schemas/SummaryMetrics_allOf'
    SummaryVector:
      allOf:
      - $ref: '#/components/schemas/SummaryVector_allOf'
    SupportCasesCreatedResponse:
      example:
        severity: severity
        subscription_id: subscription_id
        summary: summary
        cluster_id: cluster_id
        cluster_uuid: cluster_uuid
        caseNumber: caseNumber
        description: description
        uri: uri
        status: status
      properties:
        caseNumber:
          type: string
        cluster_id:
          type: string
        cluster_uuid:
          type: string
        description:
          type: string
        severity:
          type: string
        status:
          type: string
        subscription_id:
          type: string
        summary:
          type: string
        uri:
          type: string
      type: object
    SupportCasesRequest:
      example:
        severity: 1 (Urgent)
        summary: summary
        account_number: account_number
        product: OpenShift Container Platform
        description: description
        contact_sso_name: contact_sso_name
        version: "4.4"
        case_language: case_language
        openshift_cluster_id: openshift_cluster_id
        subscription_id: subscription_id
        event_stream_id: event_stream_id
        cluster_id: cluster_id
        cluster_uuid: cluster_uuid
      properties:
        account_number:
          type: string
        case_language:
          type: string
        cluster_id:
          type: string
        cluster_uuid:
          type: string
        contact_sso_name:
          type: string
        description:
          type: string
        event_stream_id:
          type: string
        openshift_cluster_id:
          type: string
        product:
          default: OpenShift Container Platform
          type: string
        severity:
          enum:
          - 1 (Urgent)
          - 2 (High)
          - 3 (Normal)
          - 4 (Low)
          type: string
        subscription_id:
          type: string
        summary:
          type: string
        version:
          default: "4.4"
          type: string
      required:
      - description
      - severity
      - summary
      type: object
    TemplateParameter:
      example:
        name: name
        content: content
      properties:
        content:
          type: string
        name:
          type: string
      required:
      - content
      - name
      type: object
    TermsReview:
      example:
        account_username: account_username
      properties:
        account_username:
          type: string
      required:
      - account_username
      type: object
    TermsReviewResponse:
      example:
        account_id: account_id
        terms_available: true
        organization_id: organization_id
        terms_required: true
        redirect_url: redirect_url
      properties:
        account_id:
          type: string
        organization_id:
          type: string
        redirect_url:
          type: string
        terms_available:
          type: boolean
        terms_required:
          type: boolean
      required:
      - account_id
      - organization_id
      - terms_available
      - terms_required
      type: object
    TokenAuthorizationRequest:
      example:
        authorization_token: authorization_token
      properties:
        authorization_token:
          type: string
      type: object
    TokenAuthorizationResponse:
      example: {}
      properties:
        account:
          $ref: '#/components/schemas/Account'
      type: object
    Account_allOf:
      properties:
        ban_code:
          type: string
        ban_description:
          type: string
        banned:
          default: false
          type: boolean
        capabilities:
          items:
            $ref: '#/components/schemas/Capability'
          type: array
        created_at:
          format: date-time
          type: string
        email:
          format: email
          type: string
        first_name:
          type: string
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
        last_name:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        organization_id:
          type: string
        service_account:
          default: false
          type: boolean
        updated_at:
          format: date-time
          type: string
        username:
          type: string
      required:
      - username
      type: object
    AccountList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/Account'
          type: array
      type: object
    AccountReference_allOf:
      properties:
        email:
          type: string
        name:
          type: string
        username:
          type: string
      type: object
    Capability_allOf:
      properties:
        inherited:
          type: boolean
        name:
          type: string
        value:
          type: string
      required:
      - inherited
      - name
      - value
      type: object
    ClusterResource_total:
      properties:
        unit:
          type: string
        value:
          type: double
      required:
      - unit
      - value
      type: object
    Error_allOf:
      properties:
        code:
          type: string
        operation_id:
          type: string
        reason:
          type: string
      type: object
    ErrorList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Error'
          type: array
      type: object
    ExcessResource_allOf:
      properties:
        availability_zone_type:
          type: string
        billing_model:
          type: string
        byoc:
          type: boolean
        count:
          type: integer
        resource_name:
          type: string
        resource_type:
          type: string
      required:
      - byoc
      type: object
    FeatureToggle_allOf:
      properties:
        enabled:
          default: false
          type: boolean
      required:
      - enabled
      type: object
    FeatureToggleQueryRequest_allOf:
      properties:
        organization_id:
          type: string
      required:
      - organization_id
      type: object
    Label_allOf:
      properties:
        account_id:
          type: string
        created_at:
          format: date-time
          type: string
        internal:
          type: boolean
        key:
          type: string
        organization_id:
          type: string
        subscription_id:
          type: string
        type:
          type: string
        updated_at:
          format: date-time
          type: string
        value:
          type: string
      required:
      - internal
      - key
      - value
      type: object
    LabelList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Label'
          type: array
      type: object
    Metric_allOf:
      properties:
        external_id:
          type: string
        health_state:
          type: string
        id:
          type: string
        metrics:
          type: string
        query_timestamp:
          format: date-time
          type: string
      type: object
    MetricsList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Metric'
          type: array
      type: object
    Organization_allOf:
      properties:
        capabilities:
          items:
            $ref: '#/components/schemas/Capability'
          type: array
        created_at:
          format: date-time
          type: string
        ebs_account_id:
          type: string
        external_id:
          type: string
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
        name:
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
    OrganizationList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/Organization'
          type: array
      type: object
    Permission_allOf:
      properties:
        action:
          enum:
          - get
          - list
          - create
          - delete
          - update
          type: string
        resource:
          type: string
      type: object
    PermissionList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    Plan_allOf:
      properties:
        category:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    PlanList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Plan'
          type: array
      type: object
    QuotaCost_allOf:
      properties:
        allowed:
          type: integer
        consumed:
          type: integer
        organization_id:
          type: string
        quota_id:
          type: string
        related_resources:
          items:
            $ref: '#/components/schemas/RelatedResource'
          type: array
      required:
      - allowed
      - consumed
      - quota_id
      type: object
    QuotaCostList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/QuotaCost'
          type: array
      type: object
    QuotaSummary_allOf:
      properties:
        allowed:
          type: integer
        availability_zone_type:
          type: string
        byoc:
          type: boolean
        organization_id:
          type: string
        reserved:
          type: integer
        resource_name:
          type: string
        resource_type:
          type: string
      required:
      - allowed
      - availability_zone_type
      - byoc
      - reserved
      - resource_name
      - resource_type
      type: object
    QuotaSummaryList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/QuotaSummary'
          type: array
      type: object
    Registry_allOf:
      properties:
        cloudAlias:
          type: boolean
        created_at:
          format: date-time
          type: string
        name:
          type: string
        org_name:
          type: string
        team_name:
          type: string
        type:
          type: string
        updated_at:
          format: date-time
          type: string
        url:
          type: string
      type: object
    RegistryCredential_allOf:
      properties:
        account:
          $ref: '#/components/schemas/ObjectReference'
        created_at:
          format: date-time
          type: string
        external_resource_id:
          type: string
        registry:
          $ref: '#/components/schemas/ObjectReference'
        token:
          type: string
        updated_at:
          format: date-time
          type: string
        username:
          type: string
      type: object
    RegistryCredentialList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/RegistryCredential'
          type: array
      type: object
    RegistryList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Registry'
          type: array
      type: object
    RelatedResource_allOf:
      properties:
        availability_zone_type:
          type: string
        billing_model:
          type: string
        byoc:
          type: string
        cloud_provider:
          type: string
        cost:
          type: integer
        product:
          type: string
        product_id:
          type: string
        resource_name:
          type: string
        resource_type:
          type: string
      required:
      - availability_zone_type
      - billing_model
      - byoc
      - cloud_provider
      - cost
      - product
      - resource_anme
      - resource_type
      type: object
    ReservedResource_allOf:
      properties:
        availability_zone_type:
          type: string
        billing_model:
          type: string
        byoc:
          type: boolean
        cluster:
          type: boolean
        count:
          type: integer
        created_at:
          format: date-time
          type: string
        resource_name:
          type: string
        resource_type:
          type: string
        subscription:
          $ref: '#/components/schemas/ObjectReference'
        updated_at:
          format: date-time
          type: string
      required:
      - byoc
      type: object
    ReservedResourceList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ReservedResource'
          type: array
      type: object
    ResourceQuota_allOf:
      properties:
        allowed:
          type: integer
        availability_zone_type:
          type: string
        byoc:
          type: boolean
        created_at:
          format: date-time
          type: string
        organization_id:
          type: string
        resource_name:
          type: string
        resource_type:
          type: string
        sku:
          type: string
        sku_count:
          type: integer
        type:
          enum:
          - Config
          - Manual
          - Subscription
          type: string
        updated_at:
          format: date-time
          type: string
      required:
      - allowed
      - byoc
      - resource_name
      - resource_type
      type: object
    ResourceQuotaList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ResourceQuota'
          type: array
      type: object
    Role_allOf:
      properties:
        name:
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    RoleBinding_allOf:
      properties:
        account:
          $ref: '#/components/schemas/ObjectReference'
        config_managed:
          type: boolean
        created_at:
          format: date-time
          type: string
        organization:
          $ref: '#/components/schemas/ObjectReference'
        role:
          $ref: '#/components/schemas/ObjectReference'
        subscription:
          $ref: '#/components/schemas/ObjectReference'
        type:
          enum:
          - Application
          - Subscription
          - Organization
          type: string
        updated_at:
          format: date-time
          type: string
      type: object
    RoleBindingList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/RoleBinding'
          type: array
      type: object
    RoleList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Role'
          type: array
      type: object
    SKU_allOf:
      properties:
        availability_zone_type:
          type: string
        byoc:
          type: boolean
        id:
          type: string
        resource_name:
          type: string
        resource_type:
          type: string
        resources:
          items:
            $ref: '#/components/schemas/EphemeralResourceQuota'
          type: array
      required:
      - byoc
      type: object
    SkuList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SKU'
          type: array
      type: object
    SkuRules_allOf:
      properties:
        allowed:
          type: integer
        quota_id:
          type: string
        sku:
          type: string
      type: object
    SkuRulesList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/SkuRules'
          type: array
      type: object
    Subscription_allOf:
      properties:
        capabilities:
          items:
            $ref: '#/components/schemas/Capability'
          type: array
        cloud_account_id:
          type: string
        cloud_provider_id:
          type: string
        cluster_billing_model:
          type: string
        cluster_id:
          type: string
        console_url:
          type: string
        consumer_uuid:
          type: string
        cpu_total:
          type: integer
        created_at:
          format: date-time
          type: string
        creator:
          $ref: '#/components/schemas/AccountReference'
        display_name:
          type: string
        external_cluster_id:
          type: string
        labels:
          items:
            $ref: '#/components/schemas/Label'
          type: array
        last_reconcile_date:
          description: Last time this subscription were reconciled about cluster usage
          format: date-time
          type: string
        last_released_at:
          description: Last time status was set to Released for this cluster/subscription
            in Unix time
          format: date-time
          type: string
        last_telemetry_date:
          description: Last telemetry authorization request for this cluster/subscription
            in Unix time
          format: date-time
          type: string
        managed:
          type: boolean
        metrics:
          items:
            $ref: '#/components/schemas/OneMetric'
          maxItems: 1
          type: array
        notification_contacts:
          items:
            $ref: '#/components/schemas/Account'
          type: array
        organization_id:
          type: string
        plan:
          $ref: '#/components/schemas/Plan'
        product_bundle:
          enum:
          - Openshift
          - JBoss-Middleware
          - IBM-CloudPak
          type: string
        provenance:
          type: string
        region_id:
          type: string
        released:
          type: boolean
        service_level:
          enum:
          - L1-L3
          - L3-only
          type: string
        socket_total:
          type: integer
        status:
          type: string
        support_level:
          enum:
          - Eval
          - Standard
          - Premium
          - Self-Support
          - None
          type: string
        system_units:
          enum:
          - Cores/vCPU
          - Sockets
          type: string
        trial_end_date:
          description: If the subscription is a trial, date the trial ends
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        usage:
          enum:
          - Production
          - Development/Test
          - Disaster Recovery
          - Academic
          type: string
      required:
      - managed
      type: object
    SubscriptionList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Subscription'
          type: array
      type: object
    Summary_allOf:
      properties:
        metrics:
          items:
            $ref: '#/components/schemas/SummaryMetrics'
          type: array
        name:
          type: string
      required:
      - metrics
      type: object
    SummaryMetrics_allOf:
      properties:
        name:
          type: string
        vector:
          items:
            $ref: '#/components/schemas/SummaryVector'
          type: array
      type: object
    SummaryVector_allOf:
      properties:
        time:
          format: date-time
          type: string
        value:
          type: double
      type: object
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
