// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package amsclient

import (
	"context"
	"net/http"
	"sync"
)

// Ensure, that DefaultApiMock does implement DefaultApi.
// If this is not the case, regenerate this file with moq.
var _ DefaultApi = &DefaultApiMock{}

// DefaultApiMock is a mock implementation of DefaultApi.
//
//     func TestSomethingThatUsesDefaultApi(t *testing.T) {
//
//         // make and configure a mocked DefaultApi
//         mockedDefaultApi := &DefaultApiMock{
//             ApiAccountsMgmtV1AccessTokenPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1AccessTokenPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccessTokenPost method")
//             },
//             ApiAccountsMgmtV1AccessTokenPostExecuteFunc: func(r ApiApiAccountsMgmtV1AccessTokenPostRequest) (AccessTokenCfg, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccessTokenPostExecute method")
//             },
//             ApiAccountsMgmtV1AccountsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1AccountsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsGet method")
//             },
//             ApiAccountsMgmtV1AccountsGetExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsGetRequest) (AccountList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsGetExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdGet method")
//             },
//             ApiAccountsMgmtV1AccountsIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdGetRequest) (Account, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdGetExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsGet method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest) (LabelList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsGetExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsKeyDelete method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsKeyGet method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsKeyPatch method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsPostFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsPost method")
//             },
//             ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdLabelsPostExecute method")
//             },
//             ApiAccountsMgmtV1AccountsIdPatchFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdPatch method")
//             },
//             ApiAccountsMgmtV1AccountsIdPatchExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsIdPatchRequest) (Account, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsIdPatchExecute method")
//             },
//             ApiAccountsMgmtV1AccountsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1AccountsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsPost method")
//             },
//             ApiAccountsMgmtV1AccountsPostExecuteFunc: func(r ApiApiAccountsMgmtV1AccountsPostRequest) (Account, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1AccountsPostExecute method")
//             },
//             ApiAccountsMgmtV1ClusterAuthorizationsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1ClusterAuthorizationsPost method")
//             },
//             ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc: func(r ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest) (ClusterAuthorizationResponse, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1ClusterAuthorizationsPostExecute method")
//             },
//             ApiAccountsMgmtV1ClusterRegistrationsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1ClusterRegistrationsPost method")
//             },
//             ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc: func(r ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest) (ClusterRegistrationResponse, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1ClusterRegistrationsPostExecute method")
//             },
//             ApiAccountsMgmtV1CurrentAccountGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1CurrentAccountGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1CurrentAccountGet method")
//             },
//             ApiAccountsMgmtV1CurrentAccountGetExecuteFunc: func(r ApiApiAccountsMgmtV1CurrentAccountGetRequest) (Account, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1CurrentAccountGetExecute method")
//             },
//             ApiAccountsMgmtV1ErrorsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1ErrorsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1ErrorsGet method")
//             },
//             ApiAccountsMgmtV1ErrorsGetExecuteFunc: func(r ApiApiAccountsMgmtV1ErrorsGetRequest) (ErrorList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1ErrorsGetExecute method")
//             },
//             ApiAccountsMgmtV1ErrorsIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1ErrorsIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1ErrorsIdGet method")
//             },
//             ApiAccountsMgmtV1ErrorsIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1ErrorsIdGetRequest) (Error, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1ErrorsIdGetExecute method")
//             },
//             ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1FeatureTogglesIdQueryPost method")
//             },
//             ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc: func(r ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest) (FeatureToggle, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute method")
//             },
//             ApiAccountsMgmtV1LabelsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1LabelsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1LabelsGet method")
//             },
//             ApiAccountsMgmtV1LabelsGetExecuteFunc: func(r ApiApiAccountsMgmtV1LabelsGetRequest) (LabelList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1LabelsGetExecute method")
//             },
//             ApiAccountsMgmtV1MetricsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1MetricsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1MetricsGet method")
//             },
//             ApiAccountsMgmtV1MetricsGetExecuteFunc: func(r ApiApiAccountsMgmtV1MetricsGetRequest) (MetricsList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1MetricsGetExecute method")
//             },
//             ApiAccountsMgmtV1NotifyPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1NotifyPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1NotifyPost method")
//             },
//             ApiAccountsMgmtV1NotifyPostExecuteFunc: func(r ApiApiAccountsMgmtV1NotifyPostRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1NotifyPostExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1OrganizationsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsGetRequest) (OrganizationList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdGetRequest) (Organization, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest) (LabelList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsPost method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdPatchFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdPatch method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdPatchRequest) (Organization, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdPatchExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest) (Summary, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc: func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest) (QuotaCostList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc: func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest) (QuotaSummaryList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc: func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest) (ResourceQuotaList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc: func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest) (ResourceQuota, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc: func(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc: func(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest) (ResourceQuota, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc: func(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch method")
//             },
//             ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest) (ResourceQuota, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute method")
//             },
//             ApiAccountsMgmtV1OrganizationsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1OrganizationsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsPost method")
//             },
//             ApiAccountsMgmtV1OrganizationsPostExecuteFunc: func(r ApiApiAccountsMgmtV1OrganizationsPostRequest) (Organization, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1OrganizationsPostExecute method")
//             },
//             ApiAccountsMgmtV1PlansGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1PlansGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1PlansGet method")
//             },
//             ApiAccountsMgmtV1PlansGetExecuteFunc: func(r ApiApiAccountsMgmtV1PlansGetRequest) (PlanList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1PlansGetExecute method")
//             },
//             ApiAccountsMgmtV1PlansIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1PlansIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1PlansIdGet method")
//             },
//             ApiAccountsMgmtV1PlansIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1PlansIdGetRequest) (Plan, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1PlansIdGetExecute method")
//             },
//             ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc: func(ctx context.Context, externalResourceId string) ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete method")
//             },
//             ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1PullSecretsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1PullSecretsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1PullSecretsPost method")
//             },
//             ApiAccountsMgmtV1PullSecretsPostExecuteFunc: func(r ApiApiAccountsMgmtV1PullSecretsPostRequest) (AccessTokenCfg, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1PullSecretsPostExecute method")
//             },
//             ApiAccountsMgmtV1RegistriesGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1RegistriesGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistriesGet method")
//             },
//             ApiAccountsMgmtV1RegistriesGetExecuteFunc: func(r ApiApiAccountsMgmtV1RegistriesGetRequest) (RegistryList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistriesGetExecute method")
//             },
//             ApiAccountsMgmtV1RegistriesIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistriesIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistriesIdGet method")
//             },
//             ApiAccountsMgmtV1RegistriesIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1RegistriesIdGetRequest) (Registry, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistriesIdGetExecute method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1RegistryCredentialsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsGet method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc: func(r ApiApiAccountsMgmtV1RegistryCredentialsGetRequest) (RegistryCredentialList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsGetExecute method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsIdDelete method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsIdGet method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest) (RegistryCredential, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsIdGetExecute method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsIdPatch method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc: func(r ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest) (RegistryCredential, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1RegistryCredentialsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsPost method")
//             },
//             ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc: func(r ApiApiAccountsMgmtV1RegistryCredentialsPostRequest) (RegistryCredential, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RegistryCredentialsPostExecute method")
//             },
//             ApiAccountsMgmtV1ReservedResourcesGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1ReservedResourcesGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1ReservedResourcesGet method")
//             },
//             ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc: func(r ApiApiAccountsMgmtV1ReservedResourcesGetRequest) (ReservedResourceList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1ReservedResourcesGetExecute method")
//             },
//             ApiAccountsMgmtV1ResourceQuotaGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1ResourceQuotaGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1ResourceQuotaGet method")
//             },
//             ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc: func(r ApiApiAccountsMgmtV1ResourceQuotaGetRequest) (ResourceQuotaList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1ResourceQuotaGetExecute method")
//             },
//             ApiAccountsMgmtV1RoleBindingsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1RoleBindingsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsGet method")
//             },
//             ApiAccountsMgmtV1RoleBindingsGetExecuteFunc: func(r ApiApiAccountsMgmtV1RoleBindingsGetRequest) (RoleBindingList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsGetExecute method")
//             },
//             ApiAccountsMgmtV1RoleBindingsIdDeleteFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsIdDelete method")
//             },
//             ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1RoleBindingsIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsIdGet method")
//             },
//             ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1RoleBindingsIdGetRequest) (RoleBinding, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsIdGetExecute method")
//             },
//             ApiAccountsMgmtV1RoleBindingsIdPatchFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsIdPatch method")
//             },
//             ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc: func(r ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest) (RoleBinding, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsIdPatchExecute method")
//             },
//             ApiAccountsMgmtV1RoleBindingsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1RoleBindingsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsPost method")
//             },
//             ApiAccountsMgmtV1RoleBindingsPostExecuteFunc: func(r ApiApiAccountsMgmtV1RoleBindingsPostRequest) (RoleBinding, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RoleBindingsPostExecute method")
//             },
//             ApiAccountsMgmtV1RolesGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1RolesGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RolesGet method")
//             },
//             ApiAccountsMgmtV1RolesGetExecuteFunc: func(r ApiApiAccountsMgmtV1RolesGetRequest) (RoleList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RolesGetExecute method")
//             },
//             ApiAccountsMgmtV1RolesIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1RolesIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1RolesIdGet method")
//             },
//             ApiAccountsMgmtV1RolesIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1RolesIdGetRequest) (Role, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1RolesIdGetExecute method")
//             },
//             ApiAccountsMgmtV1SkuRulesGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1SkuRulesGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SkuRulesGet method")
//             },
//             ApiAccountsMgmtV1SkuRulesGetExecuteFunc: func(r ApiApiAccountsMgmtV1SkuRulesGetRequest) (SkuRulesList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SkuRulesGetExecute method")
//             },
//             ApiAccountsMgmtV1SkuRulesIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SkuRulesIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SkuRulesIdGet method")
//             },
//             ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1SkuRulesIdGetRequest) (SkuRules, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SkuRulesIdGetExecute method")
//             },
//             ApiAccountsMgmtV1SkusGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1SkusGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SkusGet method")
//             },
//             ApiAccountsMgmtV1SkusGetExecuteFunc: func(r ApiApiAccountsMgmtV1SkusGetRequest) (SkuList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SkusGetExecute method")
//             },
//             ApiAccountsMgmtV1SkusIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SkusIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SkusIdGet method")
//             },
//             ApiAccountsMgmtV1SkusIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1SkusIdGetRequest) (SKU, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SkusIdGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsGetFunc: func(ctx context.Context) ApiApiAccountsMgmtV1SubscriptionsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsGetRequest) (SubscriptionList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdDeleteFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdDelete method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdGetRequest) (Subscription, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest) (LabelList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc: func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsPost method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest) (Label, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdNotifyPost method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdPatchFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdPatch method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest) (Subscription, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdPatchExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest) (ReservedResourceList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc: func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1SubscriptionsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsPost method")
//             },
//             ApiAccountsMgmtV1SubscriptionsPostExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsPostRequest) (Subscription, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsPostExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc: func(ctx context.Context, subId string, accountId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc: func(ctx context.Context, subId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest) (AccountList, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc: func(ctx context.Context, subId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest) (Account, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc: func(ctx context.Context, subId string, reservedResourceId string) ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet method")
//             },
//             ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc: func(r ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest) (ReservedResource, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute method")
//             },
//             ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc: func(ctx context.Context, caseId string) ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SupportCasesCaseIdDelete method")
//             },
//             ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc: func(r ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest) (*http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute method")
//             },
//             ApiAccountsMgmtV1SupportCasesPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1SupportCasesPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1SupportCasesPost method")
//             },
//             ApiAccountsMgmtV1SupportCasesPostExecuteFunc: func(r ApiApiAccountsMgmtV1SupportCasesPostRequest) (SupportCasesCreatedResponse, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1SupportCasesPostExecute method")
//             },
//             ApiAccountsMgmtV1TokenAuthorizationPostFunc: func(ctx context.Context) ApiApiAccountsMgmtV1TokenAuthorizationPostRequest {
// 	               panic("mock out the ApiAccountsMgmtV1TokenAuthorizationPost method")
//             },
//             ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc: func(r ApiApiAccountsMgmtV1TokenAuthorizationPostRequest) (TokenAuthorizationResponse, *http.Response, error) {
// 	               panic("mock out the ApiAccountsMgmtV1TokenAuthorizationPostExecute method")
//             },
//             ApiAuthorizationsV1AccessReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1AccessReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1AccessReviewPost method")
//             },
//             ApiAuthorizationsV1AccessReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1AccessReviewPostRequest) (AccessReviewResponse, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1AccessReviewPostExecute method")
//             },
//             ApiAuthorizationsV1CapabilityReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1CapabilityReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1CapabilityReviewPost method")
//             },
//             ApiAuthorizationsV1CapabilityReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1CapabilityReviewPostRequest) (CapabilityReview, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1CapabilityReviewPostExecute method")
//             },
//             ApiAuthorizationsV1ExportControlReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1ExportControlReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1ExportControlReviewPost method")
//             },
//             ApiAuthorizationsV1ExportControlReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1ExportControlReviewPostRequest) (ExportControlReview, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1ExportControlReviewPostExecute method")
//             },
//             ApiAuthorizationsV1ResourceReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1ResourceReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1ResourceReviewPost method")
//             },
//             ApiAuthorizationsV1ResourceReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1ResourceReviewPostRequest) (ResourceReview, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1ResourceReviewPostExecute method")
//             },
//             ApiAuthorizationsV1SelfAccessReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1SelfAccessReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1SelfAccessReviewPost method")
//             },
//             ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1SelfAccessReviewPostRequest) (AccessReviewResponse, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1SelfAccessReviewPostExecute method")
//             },
//             ApiAuthorizationsV1SelfResourceReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1SelfResourceReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1SelfResourceReviewPost method")
//             },
//             ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1SelfResourceReviewPostRequest) (SelfResourceReview, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1SelfResourceReviewPostExecute method")
//             },
//             ApiAuthorizationsV1SelfTermsReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1SelfTermsReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1SelfTermsReviewPost method")
//             },
//             ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1SelfTermsReviewPostRequest) (TermsReviewResponse, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1SelfTermsReviewPostExecute method")
//             },
//             ApiAuthorizationsV1TermsReviewPostFunc: func(ctx context.Context) ApiApiAuthorizationsV1TermsReviewPostRequest {
// 	               panic("mock out the ApiAuthorizationsV1TermsReviewPost method")
//             },
//             ApiAuthorizationsV1TermsReviewPostExecuteFunc: func(r ApiApiAuthorizationsV1TermsReviewPostRequest) (TermsReviewResponse, *http.Response, error) {
// 	               panic("mock out the ApiAuthorizationsV1TermsReviewPostExecute method")
//             },
//         }
//
//         // use mockedDefaultApi in code that requires DefaultApi
//         // and then make assertions.
//
//     }
type DefaultApiMock struct {
	// ApiAccountsMgmtV1AccessTokenPostFunc mocks the ApiAccountsMgmtV1AccessTokenPost method.
	ApiAccountsMgmtV1AccessTokenPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1AccessTokenPostRequest

	// ApiAccountsMgmtV1AccessTokenPostExecuteFunc mocks the ApiAccountsMgmtV1AccessTokenPostExecute method.
	ApiAccountsMgmtV1AccessTokenPostExecuteFunc func(r ApiApiAccountsMgmtV1AccessTokenPostRequest) (AccessTokenCfg, *http.Response, error)

	// ApiAccountsMgmtV1AccountsGetFunc mocks the ApiAccountsMgmtV1AccountsGet method.
	ApiAccountsMgmtV1AccountsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1AccountsGetRequest

	// ApiAccountsMgmtV1AccountsGetExecuteFunc mocks the ApiAccountsMgmtV1AccountsGetExecute method.
	ApiAccountsMgmtV1AccountsGetExecuteFunc func(r ApiApiAccountsMgmtV1AccountsGetRequest) (AccountList, *http.Response, error)

	// ApiAccountsMgmtV1AccountsIdGetFunc mocks the ApiAccountsMgmtV1AccountsIdGet method.
	ApiAccountsMgmtV1AccountsIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdGetRequest

	// ApiAccountsMgmtV1AccountsIdGetExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdGetExecute method.
	ApiAccountsMgmtV1AccountsIdGetExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdGetRequest) (Account, *http.Response, error)

	// ApiAccountsMgmtV1AccountsIdLabelsGetFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsGet method.
	ApiAccountsMgmtV1AccountsIdLabelsGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest

	// ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsGetExecute method.
	ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest) (LabelList, *http.Response, error)

	// ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsKeyDelete method.
	ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest

	// ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute method.
	ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsKeyGet method.
	ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest

	// ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute method.
	ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsKeyPatch method.
	ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest

	// ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute method.
	ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1AccountsIdLabelsPostFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsPost method.
	ApiAccountsMgmtV1AccountsIdLabelsPostFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest

	// ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdLabelsPostExecute method.
	ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1AccountsIdPatchFunc mocks the ApiAccountsMgmtV1AccountsIdPatch method.
	ApiAccountsMgmtV1AccountsIdPatchFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdPatchRequest

	// ApiAccountsMgmtV1AccountsIdPatchExecuteFunc mocks the ApiAccountsMgmtV1AccountsIdPatchExecute method.
	ApiAccountsMgmtV1AccountsIdPatchExecuteFunc func(r ApiApiAccountsMgmtV1AccountsIdPatchRequest) (Account, *http.Response, error)

	// ApiAccountsMgmtV1AccountsPostFunc mocks the ApiAccountsMgmtV1AccountsPost method.
	ApiAccountsMgmtV1AccountsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1AccountsPostRequest

	// ApiAccountsMgmtV1AccountsPostExecuteFunc mocks the ApiAccountsMgmtV1AccountsPostExecute method.
	ApiAccountsMgmtV1AccountsPostExecuteFunc func(r ApiApiAccountsMgmtV1AccountsPostRequest) (Account, *http.Response, error)

	// ApiAccountsMgmtV1ClusterAuthorizationsPostFunc mocks the ApiAccountsMgmtV1ClusterAuthorizationsPost method.
	ApiAccountsMgmtV1ClusterAuthorizationsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest

	// ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc mocks the ApiAccountsMgmtV1ClusterAuthorizationsPostExecute method.
	ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc func(r ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest) (ClusterAuthorizationResponse, *http.Response, error)

	// ApiAccountsMgmtV1ClusterRegistrationsPostFunc mocks the ApiAccountsMgmtV1ClusterRegistrationsPost method.
	ApiAccountsMgmtV1ClusterRegistrationsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest

	// ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc mocks the ApiAccountsMgmtV1ClusterRegistrationsPostExecute method.
	ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc func(r ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest) (ClusterRegistrationResponse, *http.Response, error)

	// ApiAccountsMgmtV1CurrentAccountGetFunc mocks the ApiAccountsMgmtV1CurrentAccountGet method.
	ApiAccountsMgmtV1CurrentAccountGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1CurrentAccountGetRequest

	// ApiAccountsMgmtV1CurrentAccountGetExecuteFunc mocks the ApiAccountsMgmtV1CurrentAccountGetExecute method.
	ApiAccountsMgmtV1CurrentAccountGetExecuteFunc func(r ApiApiAccountsMgmtV1CurrentAccountGetRequest) (Account, *http.Response, error)

	// ApiAccountsMgmtV1ErrorsGetFunc mocks the ApiAccountsMgmtV1ErrorsGet method.
	ApiAccountsMgmtV1ErrorsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1ErrorsGetRequest

	// ApiAccountsMgmtV1ErrorsGetExecuteFunc mocks the ApiAccountsMgmtV1ErrorsGetExecute method.
	ApiAccountsMgmtV1ErrorsGetExecuteFunc func(r ApiApiAccountsMgmtV1ErrorsGetRequest) (ErrorList, *http.Response, error)

	// ApiAccountsMgmtV1ErrorsIdGetFunc mocks the ApiAccountsMgmtV1ErrorsIdGet method.
	ApiAccountsMgmtV1ErrorsIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1ErrorsIdGetRequest

	// ApiAccountsMgmtV1ErrorsIdGetExecuteFunc mocks the ApiAccountsMgmtV1ErrorsIdGetExecute method.
	ApiAccountsMgmtV1ErrorsIdGetExecuteFunc func(r ApiApiAccountsMgmtV1ErrorsIdGetRequest) (Error, *http.Response, error)

	// ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc mocks the ApiAccountsMgmtV1FeatureTogglesIdQueryPost method.
	ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest

	// ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc mocks the ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute method.
	ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc func(r ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest) (FeatureToggle, *http.Response, error)

	// ApiAccountsMgmtV1LabelsGetFunc mocks the ApiAccountsMgmtV1LabelsGet method.
	ApiAccountsMgmtV1LabelsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1LabelsGetRequest

	// ApiAccountsMgmtV1LabelsGetExecuteFunc mocks the ApiAccountsMgmtV1LabelsGetExecute method.
	ApiAccountsMgmtV1LabelsGetExecuteFunc func(r ApiApiAccountsMgmtV1LabelsGetRequest) (LabelList, *http.Response, error)

	// ApiAccountsMgmtV1MetricsGetFunc mocks the ApiAccountsMgmtV1MetricsGet method.
	ApiAccountsMgmtV1MetricsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1MetricsGetRequest

	// ApiAccountsMgmtV1MetricsGetExecuteFunc mocks the ApiAccountsMgmtV1MetricsGetExecute method.
	ApiAccountsMgmtV1MetricsGetExecuteFunc func(r ApiApiAccountsMgmtV1MetricsGetRequest) (MetricsList, *http.Response, error)

	// ApiAccountsMgmtV1NotifyPostFunc mocks the ApiAccountsMgmtV1NotifyPost method.
	ApiAccountsMgmtV1NotifyPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1NotifyPostRequest

	// ApiAccountsMgmtV1NotifyPostExecuteFunc mocks the ApiAccountsMgmtV1NotifyPostExecute method.
	ApiAccountsMgmtV1NotifyPostExecuteFunc func(r ApiApiAccountsMgmtV1NotifyPostRequest) (*http.Response, error)

	// ApiAccountsMgmtV1OrganizationsGetFunc mocks the ApiAccountsMgmtV1OrganizationsGet method.
	ApiAccountsMgmtV1OrganizationsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1OrganizationsGetRequest

	// ApiAccountsMgmtV1OrganizationsGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsGetExecute method.
	ApiAccountsMgmtV1OrganizationsGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsGetRequest) (OrganizationList, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdGetFunc mocks the ApiAccountsMgmtV1OrganizationsIdGet method.
	ApiAccountsMgmtV1OrganizationsIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdGetRequest

	// ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdGetExecute method.
	ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdGetRequest) (Organization, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsGet method.
	ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest

	// ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute method.
	ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest) (LabelList, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete method.
	ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest

	// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute method.
	ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet method.
	ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest

	// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute method.
	ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch method.
	ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest

	// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute method.
	ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsPost method.
	ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest

	// ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute method.
	ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdPatchFunc mocks the ApiAccountsMgmtV1OrganizationsIdPatch method.
	ApiAccountsMgmtV1OrganizationsIdPatchFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdPatchRequest

	// ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdPatchExecute method.
	ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdPatchRequest) (Organization, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc mocks the ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet method.
	ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest

	// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute method.
	ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest) (Summary, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet method.
	ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest) (QuotaCostList, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet method.
	ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest) (QuotaSummaryList, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest) (ResourceQuotaList, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc func(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest) (ResourceQuota, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc func(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc func(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest) (ResourceQuota, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc func(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest

	// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute method.
	ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest) (ResourceQuota, *http.Response, error)

	// ApiAccountsMgmtV1OrganizationsPostFunc mocks the ApiAccountsMgmtV1OrganizationsPost method.
	ApiAccountsMgmtV1OrganizationsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1OrganizationsPostRequest

	// ApiAccountsMgmtV1OrganizationsPostExecuteFunc mocks the ApiAccountsMgmtV1OrganizationsPostExecute method.
	ApiAccountsMgmtV1OrganizationsPostExecuteFunc func(r ApiApiAccountsMgmtV1OrganizationsPostRequest) (Organization, *http.Response, error)

	// ApiAccountsMgmtV1PlansGetFunc mocks the ApiAccountsMgmtV1PlansGet method.
	ApiAccountsMgmtV1PlansGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1PlansGetRequest

	// ApiAccountsMgmtV1PlansGetExecuteFunc mocks the ApiAccountsMgmtV1PlansGetExecute method.
	ApiAccountsMgmtV1PlansGetExecuteFunc func(r ApiApiAccountsMgmtV1PlansGetRequest) (PlanList, *http.Response, error)

	// ApiAccountsMgmtV1PlansIdGetFunc mocks the ApiAccountsMgmtV1PlansIdGet method.
	ApiAccountsMgmtV1PlansIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1PlansIdGetRequest

	// ApiAccountsMgmtV1PlansIdGetExecuteFunc mocks the ApiAccountsMgmtV1PlansIdGetExecute method.
	ApiAccountsMgmtV1PlansIdGetExecuteFunc func(r ApiApiAccountsMgmtV1PlansIdGetRequest) (Plan, *http.Response, error)

	// ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc mocks the ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete method.
	ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc func(ctx context.Context, externalResourceId string) ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest

	// ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute method.
	ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1PullSecretsPostFunc mocks the ApiAccountsMgmtV1PullSecretsPost method.
	ApiAccountsMgmtV1PullSecretsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1PullSecretsPostRequest

	// ApiAccountsMgmtV1PullSecretsPostExecuteFunc mocks the ApiAccountsMgmtV1PullSecretsPostExecute method.
	ApiAccountsMgmtV1PullSecretsPostExecuteFunc func(r ApiApiAccountsMgmtV1PullSecretsPostRequest) (AccessTokenCfg, *http.Response, error)

	// ApiAccountsMgmtV1RegistriesGetFunc mocks the ApiAccountsMgmtV1RegistriesGet method.
	ApiAccountsMgmtV1RegistriesGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1RegistriesGetRequest

	// ApiAccountsMgmtV1RegistriesGetExecuteFunc mocks the ApiAccountsMgmtV1RegistriesGetExecute method.
	ApiAccountsMgmtV1RegistriesGetExecuteFunc func(r ApiApiAccountsMgmtV1RegistriesGetRequest) (RegistryList, *http.Response, error)

	// ApiAccountsMgmtV1RegistriesIdGetFunc mocks the ApiAccountsMgmtV1RegistriesIdGet method.
	ApiAccountsMgmtV1RegistriesIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistriesIdGetRequest

	// ApiAccountsMgmtV1RegistriesIdGetExecuteFunc mocks the ApiAccountsMgmtV1RegistriesIdGetExecute method.
	ApiAccountsMgmtV1RegistriesIdGetExecuteFunc func(r ApiApiAccountsMgmtV1RegistriesIdGetRequest) (Registry, *http.Response, error)

	// ApiAccountsMgmtV1RegistryCredentialsGetFunc mocks the ApiAccountsMgmtV1RegistryCredentialsGet method.
	ApiAccountsMgmtV1RegistryCredentialsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1RegistryCredentialsGetRequest

	// ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc mocks the ApiAccountsMgmtV1RegistryCredentialsGetExecute method.
	ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc func(r ApiApiAccountsMgmtV1RegistryCredentialsGetRequest) (RegistryCredentialList, *http.Response, error)

	// ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc mocks the ApiAccountsMgmtV1RegistryCredentialsIdDelete method.
	ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest

	// ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute method.
	ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1RegistryCredentialsIdGetFunc mocks the ApiAccountsMgmtV1RegistryCredentialsIdGet method.
	ApiAccountsMgmtV1RegistryCredentialsIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest

	// ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc mocks the ApiAccountsMgmtV1RegistryCredentialsIdGetExecute method.
	ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc func(r ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest) (RegistryCredential, *http.Response, error)

	// ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc mocks the ApiAccountsMgmtV1RegistryCredentialsIdPatch method.
	ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest

	// ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc mocks the ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute method.
	ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc func(r ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest) (RegistryCredential, *http.Response, error)

	// ApiAccountsMgmtV1RegistryCredentialsPostFunc mocks the ApiAccountsMgmtV1RegistryCredentialsPost method.
	ApiAccountsMgmtV1RegistryCredentialsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1RegistryCredentialsPostRequest

	// ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc mocks the ApiAccountsMgmtV1RegistryCredentialsPostExecute method.
	ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc func(r ApiApiAccountsMgmtV1RegistryCredentialsPostRequest) (RegistryCredential, *http.Response, error)

	// ApiAccountsMgmtV1ReservedResourcesGetFunc mocks the ApiAccountsMgmtV1ReservedResourcesGet method.
	ApiAccountsMgmtV1ReservedResourcesGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1ReservedResourcesGetRequest

	// ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc mocks the ApiAccountsMgmtV1ReservedResourcesGetExecute method.
	ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc func(r ApiApiAccountsMgmtV1ReservedResourcesGetRequest) (ReservedResourceList, *http.Response, error)

	// ApiAccountsMgmtV1ResourceQuotaGetFunc mocks the ApiAccountsMgmtV1ResourceQuotaGet method.
	ApiAccountsMgmtV1ResourceQuotaGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1ResourceQuotaGetRequest

	// ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc mocks the ApiAccountsMgmtV1ResourceQuotaGetExecute method.
	ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc func(r ApiApiAccountsMgmtV1ResourceQuotaGetRequest) (ResourceQuotaList, *http.Response, error)

	// ApiAccountsMgmtV1RoleBindingsGetFunc mocks the ApiAccountsMgmtV1RoleBindingsGet method.
	ApiAccountsMgmtV1RoleBindingsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1RoleBindingsGetRequest

	// ApiAccountsMgmtV1RoleBindingsGetExecuteFunc mocks the ApiAccountsMgmtV1RoleBindingsGetExecute method.
	ApiAccountsMgmtV1RoleBindingsGetExecuteFunc func(r ApiApiAccountsMgmtV1RoleBindingsGetRequest) (RoleBindingList, *http.Response, error)

	// ApiAccountsMgmtV1RoleBindingsIdDeleteFunc mocks the ApiAccountsMgmtV1RoleBindingsIdDelete method.
	ApiAccountsMgmtV1RoleBindingsIdDeleteFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest

	// ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1RoleBindingsIdDeleteExecute method.
	ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1RoleBindingsIdGetFunc mocks the ApiAccountsMgmtV1RoleBindingsIdGet method.
	ApiAccountsMgmtV1RoleBindingsIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdGetRequest

	// ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc mocks the ApiAccountsMgmtV1RoleBindingsIdGetExecute method.
	ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc func(r ApiApiAccountsMgmtV1RoleBindingsIdGetRequest) (RoleBinding, *http.Response, error)

	// ApiAccountsMgmtV1RoleBindingsIdPatchFunc mocks the ApiAccountsMgmtV1RoleBindingsIdPatch method.
	ApiAccountsMgmtV1RoleBindingsIdPatchFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest

	// ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc mocks the ApiAccountsMgmtV1RoleBindingsIdPatchExecute method.
	ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc func(r ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest) (RoleBinding, *http.Response, error)

	// ApiAccountsMgmtV1RoleBindingsPostFunc mocks the ApiAccountsMgmtV1RoleBindingsPost method.
	ApiAccountsMgmtV1RoleBindingsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1RoleBindingsPostRequest

	// ApiAccountsMgmtV1RoleBindingsPostExecuteFunc mocks the ApiAccountsMgmtV1RoleBindingsPostExecute method.
	ApiAccountsMgmtV1RoleBindingsPostExecuteFunc func(r ApiApiAccountsMgmtV1RoleBindingsPostRequest) (RoleBinding, *http.Response, error)

	// ApiAccountsMgmtV1RolesGetFunc mocks the ApiAccountsMgmtV1RolesGet method.
	ApiAccountsMgmtV1RolesGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1RolesGetRequest

	// ApiAccountsMgmtV1RolesGetExecuteFunc mocks the ApiAccountsMgmtV1RolesGetExecute method.
	ApiAccountsMgmtV1RolesGetExecuteFunc func(r ApiApiAccountsMgmtV1RolesGetRequest) (RoleList, *http.Response, error)

	// ApiAccountsMgmtV1RolesIdGetFunc mocks the ApiAccountsMgmtV1RolesIdGet method.
	ApiAccountsMgmtV1RolesIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1RolesIdGetRequest

	// ApiAccountsMgmtV1RolesIdGetExecuteFunc mocks the ApiAccountsMgmtV1RolesIdGetExecute method.
	ApiAccountsMgmtV1RolesIdGetExecuteFunc func(r ApiApiAccountsMgmtV1RolesIdGetRequest) (Role, *http.Response, error)

	// ApiAccountsMgmtV1SkuRulesGetFunc mocks the ApiAccountsMgmtV1SkuRulesGet method.
	ApiAccountsMgmtV1SkuRulesGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1SkuRulesGetRequest

	// ApiAccountsMgmtV1SkuRulesGetExecuteFunc mocks the ApiAccountsMgmtV1SkuRulesGetExecute method.
	ApiAccountsMgmtV1SkuRulesGetExecuteFunc func(r ApiApiAccountsMgmtV1SkuRulesGetRequest) (SkuRulesList, *http.Response, error)

	// ApiAccountsMgmtV1SkuRulesIdGetFunc mocks the ApiAccountsMgmtV1SkuRulesIdGet method.
	ApiAccountsMgmtV1SkuRulesIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SkuRulesIdGetRequest

	// ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc mocks the ApiAccountsMgmtV1SkuRulesIdGetExecute method.
	ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc func(r ApiApiAccountsMgmtV1SkuRulesIdGetRequest) (SkuRules, *http.Response, error)

	// ApiAccountsMgmtV1SkusGetFunc mocks the ApiAccountsMgmtV1SkusGet method.
	ApiAccountsMgmtV1SkusGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1SkusGetRequest

	// ApiAccountsMgmtV1SkusGetExecuteFunc mocks the ApiAccountsMgmtV1SkusGetExecute method.
	ApiAccountsMgmtV1SkusGetExecuteFunc func(r ApiApiAccountsMgmtV1SkusGetRequest) (SkuList, *http.Response, error)

	// ApiAccountsMgmtV1SkusIdGetFunc mocks the ApiAccountsMgmtV1SkusIdGet method.
	ApiAccountsMgmtV1SkusIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SkusIdGetRequest

	// ApiAccountsMgmtV1SkusIdGetExecuteFunc mocks the ApiAccountsMgmtV1SkusIdGetExecute method.
	ApiAccountsMgmtV1SkusIdGetExecuteFunc func(r ApiApiAccountsMgmtV1SkusIdGetRequest) (SKU, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsGetFunc mocks the ApiAccountsMgmtV1SubscriptionsGet method.
	ApiAccountsMgmtV1SubscriptionsGetFunc func(ctx context.Context) ApiApiAccountsMgmtV1SubscriptionsGetRequest

	// ApiAccountsMgmtV1SubscriptionsGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsGetExecute method.
	ApiAccountsMgmtV1SubscriptionsGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsGetRequest) (SubscriptionList, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdDeleteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdDelete method.
	ApiAccountsMgmtV1SubscriptionsIdDeleteFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest

	// ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdDeleteExecute method.
	ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdGetFunc mocks the ApiAccountsMgmtV1SubscriptionsIdGet method.
	ApiAccountsMgmtV1SubscriptionsIdGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdGetRequest

	// ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdGetExecute method.
	ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdGetRequest) (Subscription, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsGet method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest

	// ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest) (LabelList, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest

	// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest

	// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc func(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest

	// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsPost method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest

	// ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute method.
	ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest) (Label, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc mocks the ApiAccountsMgmtV1SubscriptionsIdNotifyPost method.
	ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest

	// ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute method.
	ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest) (*http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdPatchFunc mocks the ApiAccountsMgmtV1SubscriptionsIdPatch method.
	ApiAccountsMgmtV1SubscriptionsIdPatchFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest

	// ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdPatchExecute method.
	ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest) (Subscription, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc mocks the ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet method.
	ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest

	// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute method.
	ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest) (ReservedResourceList, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc mocks the ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet method.
	ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc func(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest

	// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute method.
	ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest) (*http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsPostFunc mocks the ApiAccountsMgmtV1SubscriptionsPost method.
	ApiAccountsMgmtV1SubscriptionsPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1SubscriptionsPostRequest

	// ApiAccountsMgmtV1SubscriptionsPostExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsPostExecute method.
	ApiAccountsMgmtV1SubscriptionsPostExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsPostRequest) (Subscription, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete method.
	ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc func(ctx context.Context, subId string, accountId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest

	// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute method.
	ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet method.
	ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc func(ctx context.Context, subId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest

	// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute method.
	ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest) (AccountList, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost method.
	ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc func(ctx context.Context, subId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest

	// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute method.
	ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest) (Account, *http.Response, error)

	// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet method.
	ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc func(ctx context.Context, subId string, reservedResourceId string) ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest

	// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc mocks the ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute method.
	ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc func(r ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest) (ReservedResource, *http.Response, error)

	// ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc mocks the ApiAccountsMgmtV1SupportCasesCaseIdDelete method.
	ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc func(ctx context.Context, caseId string) ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest

	// ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc mocks the ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute method.
	ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc func(r ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest) (*http.Response, error)

	// ApiAccountsMgmtV1SupportCasesPostFunc mocks the ApiAccountsMgmtV1SupportCasesPost method.
	ApiAccountsMgmtV1SupportCasesPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1SupportCasesPostRequest

	// ApiAccountsMgmtV1SupportCasesPostExecuteFunc mocks the ApiAccountsMgmtV1SupportCasesPostExecute method.
	ApiAccountsMgmtV1SupportCasesPostExecuteFunc func(r ApiApiAccountsMgmtV1SupportCasesPostRequest) (SupportCasesCreatedResponse, *http.Response, error)

	// ApiAccountsMgmtV1TokenAuthorizationPostFunc mocks the ApiAccountsMgmtV1TokenAuthorizationPost method.
	ApiAccountsMgmtV1TokenAuthorizationPostFunc func(ctx context.Context) ApiApiAccountsMgmtV1TokenAuthorizationPostRequest

	// ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc mocks the ApiAccountsMgmtV1TokenAuthorizationPostExecute method.
	ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc func(r ApiApiAccountsMgmtV1TokenAuthorizationPostRequest) (TokenAuthorizationResponse, *http.Response, error)

	// ApiAuthorizationsV1AccessReviewPostFunc mocks the ApiAuthorizationsV1AccessReviewPost method.
	ApiAuthorizationsV1AccessReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1AccessReviewPostRequest

	// ApiAuthorizationsV1AccessReviewPostExecuteFunc mocks the ApiAuthorizationsV1AccessReviewPostExecute method.
	ApiAuthorizationsV1AccessReviewPostExecuteFunc func(r ApiApiAuthorizationsV1AccessReviewPostRequest) (AccessReviewResponse, *http.Response, error)

	// ApiAuthorizationsV1CapabilityReviewPostFunc mocks the ApiAuthorizationsV1CapabilityReviewPost method.
	ApiAuthorizationsV1CapabilityReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1CapabilityReviewPostRequest

	// ApiAuthorizationsV1CapabilityReviewPostExecuteFunc mocks the ApiAuthorizationsV1CapabilityReviewPostExecute method.
	ApiAuthorizationsV1CapabilityReviewPostExecuteFunc func(r ApiApiAuthorizationsV1CapabilityReviewPostRequest) (CapabilityReview, *http.Response, error)

	// ApiAuthorizationsV1ExportControlReviewPostFunc mocks the ApiAuthorizationsV1ExportControlReviewPost method.
	ApiAuthorizationsV1ExportControlReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1ExportControlReviewPostRequest

	// ApiAuthorizationsV1ExportControlReviewPostExecuteFunc mocks the ApiAuthorizationsV1ExportControlReviewPostExecute method.
	ApiAuthorizationsV1ExportControlReviewPostExecuteFunc func(r ApiApiAuthorizationsV1ExportControlReviewPostRequest) (ExportControlReview, *http.Response, error)

	// ApiAuthorizationsV1ResourceReviewPostFunc mocks the ApiAuthorizationsV1ResourceReviewPost method.
	ApiAuthorizationsV1ResourceReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1ResourceReviewPostRequest

	// ApiAuthorizationsV1ResourceReviewPostExecuteFunc mocks the ApiAuthorizationsV1ResourceReviewPostExecute method.
	ApiAuthorizationsV1ResourceReviewPostExecuteFunc func(r ApiApiAuthorizationsV1ResourceReviewPostRequest) (ResourceReview, *http.Response, error)

	// ApiAuthorizationsV1SelfAccessReviewPostFunc mocks the ApiAuthorizationsV1SelfAccessReviewPost method.
	ApiAuthorizationsV1SelfAccessReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1SelfAccessReviewPostRequest

	// ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc mocks the ApiAuthorizationsV1SelfAccessReviewPostExecute method.
	ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc func(r ApiApiAuthorizationsV1SelfAccessReviewPostRequest) (AccessReviewResponse, *http.Response, error)

	// ApiAuthorizationsV1SelfResourceReviewPostFunc mocks the ApiAuthorizationsV1SelfResourceReviewPost method.
	ApiAuthorizationsV1SelfResourceReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1SelfResourceReviewPostRequest

	// ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc mocks the ApiAuthorizationsV1SelfResourceReviewPostExecute method.
	ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc func(r ApiApiAuthorizationsV1SelfResourceReviewPostRequest) (SelfResourceReview, *http.Response, error)

	// ApiAuthorizationsV1SelfTermsReviewPostFunc mocks the ApiAuthorizationsV1SelfTermsReviewPost method.
	ApiAuthorizationsV1SelfTermsReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1SelfTermsReviewPostRequest

	// ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc mocks the ApiAuthorizationsV1SelfTermsReviewPostExecute method.
	ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc func(r ApiApiAuthorizationsV1SelfTermsReviewPostRequest) (TermsReviewResponse, *http.Response, error)

	// ApiAuthorizationsV1TermsReviewPostFunc mocks the ApiAuthorizationsV1TermsReviewPost method.
	ApiAuthorizationsV1TermsReviewPostFunc func(ctx context.Context) ApiApiAuthorizationsV1TermsReviewPostRequest

	// ApiAuthorizationsV1TermsReviewPostExecuteFunc mocks the ApiAuthorizationsV1TermsReviewPostExecute method.
	ApiAuthorizationsV1TermsReviewPostExecuteFunc func(r ApiApiAuthorizationsV1TermsReviewPostRequest) (TermsReviewResponse, *http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// ApiAccountsMgmtV1AccessTokenPost holds details about calls to the ApiAccountsMgmtV1AccessTokenPost method.
		ApiAccountsMgmtV1AccessTokenPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1AccessTokenPostExecute holds details about calls to the ApiAccountsMgmtV1AccessTokenPostExecute method.
		ApiAccountsMgmtV1AccessTokenPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccessTokenPostRequest
		}
		// ApiAccountsMgmtV1AccountsGet holds details about calls to the ApiAccountsMgmtV1AccountsGet method.
		ApiAccountsMgmtV1AccountsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1AccountsGetExecute holds details about calls to the ApiAccountsMgmtV1AccountsGetExecute method.
		ApiAccountsMgmtV1AccountsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsGetRequest
		}
		// ApiAccountsMgmtV1AccountsIdGet holds details about calls to the ApiAccountsMgmtV1AccountsIdGet method.
		ApiAccountsMgmtV1AccountsIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1AccountsIdGetExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdGetExecute method.
		ApiAccountsMgmtV1AccountsIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdGetRequest
		}
		// ApiAccountsMgmtV1AccountsIdLabelsGet holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsGet method.
		ApiAccountsMgmtV1AccountsIdLabelsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1AccountsIdLabelsGetExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsGetExecute method.
		ApiAccountsMgmtV1AccountsIdLabelsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest
		}
		// ApiAccountsMgmtV1AccountsIdLabelsKeyDelete holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsKeyDelete method.
		ApiAccountsMgmtV1AccountsIdLabelsKeyDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute method.
		ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest
		}
		// ApiAccountsMgmtV1AccountsIdLabelsKeyGet holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsKeyGet method.
		ApiAccountsMgmtV1AccountsIdLabelsKeyGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute method.
		ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest
		}
		// ApiAccountsMgmtV1AccountsIdLabelsKeyPatch holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsKeyPatch method.
		ApiAccountsMgmtV1AccountsIdLabelsKeyPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute method.
		ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest
		}
		// ApiAccountsMgmtV1AccountsIdLabelsPost holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsPost method.
		ApiAccountsMgmtV1AccountsIdLabelsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1AccountsIdLabelsPostExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdLabelsPostExecute method.
		ApiAccountsMgmtV1AccountsIdLabelsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest
		}
		// ApiAccountsMgmtV1AccountsIdPatch holds details about calls to the ApiAccountsMgmtV1AccountsIdPatch method.
		ApiAccountsMgmtV1AccountsIdPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1AccountsIdPatchExecute holds details about calls to the ApiAccountsMgmtV1AccountsIdPatchExecute method.
		ApiAccountsMgmtV1AccountsIdPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsIdPatchRequest
		}
		// ApiAccountsMgmtV1AccountsPost holds details about calls to the ApiAccountsMgmtV1AccountsPost method.
		ApiAccountsMgmtV1AccountsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1AccountsPostExecute holds details about calls to the ApiAccountsMgmtV1AccountsPostExecute method.
		ApiAccountsMgmtV1AccountsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1AccountsPostRequest
		}
		// ApiAccountsMgmtV1ClusterAuthorizationsPost holds details about calls to the ApiAccountsMgmtV1ClusterAuthorizationsPost method.
		ApiAccountsMgmtV1ClusterAuthorizationsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1ClusterAuthorizationsPostExecute holds details about calls to the ApiAccountsMgmtV1ClusterAuthorizationsPostExecute method.
		ApiAccountsMgmtV1ClusterAuthorizationsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest
		}
		// ApiAccountsMgmtV1ClusterRegistrationsPost holds details about calls to the ApiAccountsMgmtV1ClusterRegistrationsPost method.
		ApiAccountsMgmtV1ClusterRegistrationsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1ClusterRegistrationsPostExecute holds details about calls to the ApiAccountsMgmtV1ClusterRegistrationsPostExecute method.
		ApiAccountsMgmtV1ClusterRegistrationsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest
		}
		// ApiAccountsMgmtV1CurrentAccountGet holds details about calls to the ApiAccountsMgmtV1CurrentAccountGet method.
		ApiAccountsMgmtV1CurrentAccountGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1CurrentAccountGetExecute holds details about calls to the ApiAccountsMgmtV1CurrentAccountGetExecute method.
		ApiAccountsMgmtV1CurrentAccountGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1CurrentAccountGetRequest
		}
		// ApiAccountsMgmtV1ErrorsGet holds details about calls to the ApiAccountsMgmtV1ErrorsGet method.
		ApiAccountsMgmtV1ErrorsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1ErrorsGetExecute holds details about calls to the ApiAccountsMgmtV1ErrorsGetExecute method.
		ApiAccountsMgmtV1ErrorsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1ErrorsGetRequest
		}
		// ApiAccountsMgmtV1ErrorsIdGet holds details about calls to the ApiAccountsMgmtV1ErrorsIdGet method.
		ApiAccountsMgmtV1ErrorsIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1ErrorsIdGetExecute holds details about calls to the ApiAccountsMgmtV1ErrorsIdGetExecute method.
		ApiAccountsMgmtV1ErrorsIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1ErrorsIdGetRequest
		}
		// ApiAccountsMgmtV1FeatureTogglesIdQueryPost holds details about calls to the ApiAccountsMgmtV1FeatureTogglesIdQueryPost method.
		ApiAccountsMgmtV1FeatureTogglesIdQueryPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute holds details about calls to the ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute method.
		ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest
		}
		// ApiAccountsMgmtV1LabelsGet holds details about calls to the ApiAccountsMgmtV1LabelsGet method.
		ApiAccountsMgmtV1LabelsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1LabelsGetExecute holds details about calls to the ApiAccountsMgmtV1LabelsGetExecute method.
		ApiAccountsMgmtV1LabelsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1LabelsGetRequest
		}
		// ApiAccountsMgmtV1MetricsGet holds details about calls to the ApiAccountsMgmtV1MetricsGet method.
		ApiAccountsMgmtV1MetricsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1MetricsGetExecute holds details about calls to the ApiAccountsMgmtV1MetricsGetExecute method.
		ApiAccountsMgmtV1MetricsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1MetricsGetRequest
		}
		// ApiAccountsMgmtV1NotifyPost holds details about calls to the ApiAccountsMgmtV1NotifyPost method.
		ApiAccountsMgmtV1NotifyPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1NotifyPostExecute holds details about calls to the ApiAccountsMgmtV1NotifyPostExecute method.
		ApiAccountsMgmtV1NotifyPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1NotifyPostRequest
		}
		// ApiAccountsMgmtV1OrganizationsGet holds details about calls to the ApiAccountsMgmtV1OrganizationsGet method.
		ApiAccountsMgmtV1OrganizationsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1OrganizationsGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsGetExecute method.
		ApiAccountsMgmtV1OrganizationsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdGet holds details about calls to the ApiAccountsMgmtV1OrganizationsIdGet method.
		ApiAccountsMgmtV1OrganizationsIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1OrganizationsIdGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdGetExecute method.
		ApiAccountsMgmtV1OrganizationsIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsGet holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsGet method.
		ApiAccountsMgmtV1OrganizationsIdLabelsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute method.
		ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete method.
		ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute method.
		ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet method.
		ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute method.
		ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch method.
		ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute method.
		ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsPost holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsPost method.
		ApiAccountsMgmtV1OrganizationsIdLabelsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute method.
		ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdPatch holds details about calls to the ApiAccountsMgmtV1OrganizationsIdPatch method.
		ApiAccountsMgmtV1OrganizationsIdPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1OrganizationsIdPatchExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdPatchExecute method.
		ApiAccountsMgmtV1OrganizationsIdPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdPatchRequest
		}
		// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet holds details about calls to the ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet method.
		ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute method.
		ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet method.
		ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet method.
		ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
			// QuotaId is the quotaId argument value.
			QuotaId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
			// QuotaId is the quotaId argument value.
			QuotaId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgId is the orgId argument value.
			OrgId string
			// QuotaId is the quotaId argument value.
			QuotaId string
		}
		// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute method.
		ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest
		}
		// ApiAccountsMgmtV1OrganizationsPost holds details about calls to the ApiAccountsMgmtV1OrganizationsPost method.
		ApiAccountsMgmtV1OrganizationsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1OrganizationsPostExecute holds details about calls to the ApiAccountsMgmtV1OrganizationsPostExecute method.
		ApiAccountsMgmtV1OrganizationsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1OrganizationsPostRequest
		}
		// ApiAccountsMgmtV1PlansGet holds details about calls to the ApiAccountsMgmtV1PlansGet method.
		ApiAccountsMgmtV1PlansGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1PlansGetExecute holds details about calls to the ApiAccountsMgmtV1PlansGetExecute method.
		ApiAccountsMgmtV1PlansGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1PlansGetRequest
		}
		// ApiAccountsMgmtV1PlansIdGet holds details about calls to the ApiAccountsMgmtV1PlansIdGet method.
		ApiAccountsMgmtV1PlansIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1PlansIdGetExecute holds details about calls to the ApiAccountsMgmtV1PlansIdGetExecute method.
		ApiAccountsMgmtV1PlansIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1PlansIdGetRequest
		}
		// ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete holds details about calls to the ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete method.
		ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ExternalResourceId is the externalResourceId argument value.
			ExternalResourceId string
		}
		// ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute method.
		ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest
		}
		// ApiAccountsMgmtV1PullSecretsPost holds details about calls to the ApiAccountsMgmtV1PullSecretsPost method.
		ApiAccountsMgmtV1PullSecretsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1PullSecretsPostExecute holds details about calls to the ApiAccountsMgmtV1PullSecretsPostExecute method.
		ApiAccountsMgmtV1PullSecretsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1PullSecretsPostRequest
		}
		// ApiAccountsMgmtV1RegistriesGet holds details about calls to the ApiAccountsMgmtV1RegistriesGet method.
		ApiAccountsMgmtV1RegistriesGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1RegistriesGetExecute holds details about calls to the ApiAccountsMgmtV1RegistriesGetExecute method.
		ApiAccountsMgmtV1RegistriesGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistriesGetRequest
		}
		// ApiAccountsMgmtV1RegistriesIdGet holds details about calls to the ApiAccountsMgmtV1RegistriesIdGet method.
		ApiAccountsMgmtV1RegistriesIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RegistriesIdGetExecute holds details about calls to the ApiAccountsMgmtV1RegistriesIdGetExecute method.
		ApiAccountsMgmtV1RegistriesIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistriesIdGetRequest
		}
		// ApiAccountsMgmtV1RegistryCredentialsGet holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsGet method.
		ApiAccountsMgmtV1RegistryCredentialsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1RegistryCredentialsGetExecute holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsGetExecute method.
		ApiAccountsMgmtV1RegistryCredentialsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistryCredentialsGetRequest
		}
		// ApiAccountsMgmtV1RegistryCredentialsIdDelete holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsIdDelete method.
		ApiAccountsMgmtV1RegistryCredentialsIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute method.
		ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest
		}
		// ApiAccountsMgmtV1RegistryCredentialsIdGet holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsIdGet method.
		ApiAccountsMgmtV1RegistryCredentialsIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RegistryCredentialsIdGetExecute holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsIdGetExecute method.
		ApiAccountsMgmtV1RegistryCredentialsIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest
		}
		// ApiAccountsMgmtV1RegistryCredentialsIdPatch holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsIdPatch method.
		ApiAccountsMgmtV1RegistryCredentialsIdPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute method.
		ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest
		}
		// ApiAccountsMgmtV1RegistryCredentialsPost holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsPost method.
		ApiAccountsMgmtV1RegistryCredentialsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1RegistryCredentialsPostExecute holds details about calls to the ApiAccountsMgmtV1RegistryCredentialsPostExecute method.
		ApiAccountsMgmtV1RegistryCredentialsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RegistryCredentialsPostRequest
		}
		// ApiAccountsMgmtV1ReservedResourcesGet holds details about calls to the ApiAccountsMgmtV1ReservedResourcesGet method.
		ApiAccountsMgmtV1ReservedResourcesGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1ReservedResourcesGetExecute holds details about calls to the ApiAccountsMgmtV1ReservedResourcesGetExecute method.
		ApiAccountsMgmtV1ReservedResourcesGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1ReservedResourcesGetRequest
		}
		// ApiAccountsMgmtV1ResourceQuotaGet holds details about calls to the ApiAccountsMgmtV1ResourceQuotaGet method.
		ApiAccountsMgmtV1ResourceQuotaGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1ResourceQuotaGetExecute holds details about calls to the ApiAccountsMgmtV1ResourceQuotaGetExecute method.
		ApiAccountsMgmtV1ResourceQuotaGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1ResourceQuotaGetRequest
		}
		// ApiAccountsMgmtV1RoleBindingsGet holds details about calls to the ApiAccountsMgmtV1RoleBindingsGet method.
		ApiAccountsMgmtV1RoleBindingsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1RoleBindingsGetExecute holds details about calls to the ApiAccountsMgmtV1RoleBindingsGetExecute method.
		ApiAccountsMgmtV1RoleBindingsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RoleBindingsGetRequest
		}
		// ApiAccountsMgmtV1RoleBindingsIdDelete holds details about calls to the ApiAccountsMgmtV1RoleBindingsIdDelete method.
		ApiAccountsMgmtV1RoleBindingsIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RoleBindingsIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1RoleBindingsIdDeleteExecute method.
		ApiAccountsMgmtV1RoleBindingsIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest
		}
		// ApiAccountsMgmtV1RoleBindingsIdGet holds details about calls to the ApiAccountsMgmtV1RoleBindingsIdGet method.
		ApiAccountsMgmtV1RoleBindingsIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RoleBindingsIdGetExecute holds details about calls to the ApiAccountsMgmtV1RoleBindingsIdGetExecute method.
		ApiAccountsMgmtV1RoleBindingsIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RoleBindingsIdGetRequest
		}
		// ApiAccountsMgmtV1RoleBindingsIdPatch holds details about calls to the ApiAccountsMgmtV1RoleBindingsIdPatch method.
		ApiAccountsMgmtV1RoleBindingsIdPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RoleBindingsIdPatchExecute holds details about calls to the ApiAccountsMgmtV1RoleBindingsIdPatchExecute method.
		ApiAccountsMgmtV1RoleBindingsIdPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest
		}
		// ApiAccountsMgmtV1RoleBindingsPost holds details about calls to the ApiAccountsMgmtV1RoleBindingsPost method.
		ApiAccountsMgmtV1RoleBindingsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1RoleBindingsPostExecute holds details about calls to the ApiAccountsMgmtV1RoleBindingsPostExecute method.
		ApiAccountsMgmtV1RoleBindingsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RoleBindingsPostRequest
		}
		// ApiAccountsMgmtV1RolesGet holds details about calls to the ApiAccountsMgmtV1RolesGet method.
		ApiAccountsMgmtV1RolesGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1RolesGetExecute holds details about calls to the ApiAccountsMgmtV1RolesGetExecute method.
		ApiAccountsMgmtV1RolesGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RolesGetRequest
		}
		// ApiAccountsMgmtV1RolesIdGet holds details about calls to the ApiAccountsMgmtV1RolesIdGet method.
		ApiAccountsMgmtV1RolesIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1RolesIdGetExecute holds details about calls to the ApiAccountsMgmtV1RolesIdGetExecute method.
		ApiAccountsMgmtV1RolesIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1RolesIdGetRequest
		}
		// ApiAccountsMgmtV1SkuRulesGet holds details about calls to the ApiAccountsMgmtV1SkuRulesGet method.
		ApiAccountsMgmtV1SkuRulesGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1SkuRulesGetExecute holds details about calls to the ApiAccountsMgmtV1SkuRulesGetExecute method.
		ApiAccountsMgmtV1SkuRulesGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SkuRulesGetRequest
		}
		// ApiAccountsMgmtV1SkuRulesIdGet holds details about calls to the ApiAccountsMgmtV1SkuRulesIdGet method.
		ApiAccountsMgmtV1SkuRulesIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SkuRulesIdGetExecute holds details about calls to the ApiAccountsMgmtV1SkuRulesIdGetExecute method.
		ApiAccountsMgmtV1SkuRulesIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SkuRulesIdGetRequest
		}
		// ApiAccountsMgmtV1SkusGet holds details about calls to the ApiAccountsMgmtV1SkusGet method.
		ApiAccountsMgmtV1SkusGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1SkusGetExecute holds details about calls to the ApiAccountsMgmtV1SkusGetExecute method.
		ApiAccountsMgmtV1SkusGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SkusGetRequest
		}
		// ApiAccountsMgmtV1SkusIdGet holds details about calls to the ApiAccountsMgmtV1SkusIdGet method.
		ApiAccountsMgmtV1SkusIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SkusIdGetExecute holds details about calls to the ApiAccountsMgmtV1SkusIdGetExecute method.
		ApiAccountsMgmtV1SkusIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SkusIdGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsGet method.
		ApiAccountsMgmtV1SubscriptionsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1SubscriptionsGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsGetExecute method.
		ApiAccountsMgmtV1SubscriptionsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdDelete holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdDelete method.
		ApiAccountsMgmtV1SubscriptionsIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdDeleteExecute method.
		ApiAccountsMgmtV1SubscriptionsIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdGet method.
		ApiAccountsMgmtV1SubscriptionsIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdGetExecute method.
		ApiAccountsMgmtV1SubscriptionsIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsGet method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsPost holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsPost method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute method.
		ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdNotifyPost holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdNotifyPost method.
		ApiAccountsMgmtV1SubscriptionsIdNotifyPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute method.
		ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdPatch holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdPatch method.
		ApiAccountsMgmtV1SubscriptionsIdPatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdPatchExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdPatchExecute method.
		ApiAccountsMgmtV1SubscriptionsIdPatchExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet method.
		ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute method.
		ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet method.
		ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute method.
		ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsPost holds details about calls to the ApiAccountsMgmtV1SubscriptionsPost method.
		ApiAccountsMgmtV1SubscriptionsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1SubscriptionsPostExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsPostExecute method.
		ApiAccountsMgmtV1SubscriptionsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsPostRequest
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete method.
		ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SubId is the subId argument value.
			SubId string
			// AccountId is the accountId argument value.
			AccountId string
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute method.
		ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet method.
		ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SubId is the subId argument value.
			SubId string
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute method.
		ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost method.
		ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SubId is the subId argument value.
			SubId string
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute method.
		ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet method.
		ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SubId is the subId argument value.
			SubId string
			// ReservedResourceId is the reservedResourceId argument value.
			ReservedResourceId string
		}
		// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute holds details about calls to the ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute method.
		ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest
		}
		// ApiAccountsMgmtV1SupportCasesCaseIdDelete holds details about calls to the ApiAccountsMgmtV1SupportCasesCaseIdDelete method.
		ApiAccountsMgmtV1SupportCasesCaseIdDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CaseId is the caseId argument value.
			CaseId string
		}
		// ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute holds details about calls to the ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute method.
		ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest
		}
		// ApiAccountsMgmtV1SupportCasesPost holds details about calls to the ApiAccountsMgmtV1SupportCasesPost method.
		ApiAccountsMgmtV1SupportCasesPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1SupportCasesPostExecute holds details about calls to the ApiAccountsMgmtV1SupportCasesPostExecute method.
		ApiAccountsMgmtV1SupportCasesPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1SupportCasesPostRequest
		}
		// ApiAccountsMgmtV1TokenAuthorizationPost holds details about calls to the ApiAccountsMgmtV1TokenAuthorizationPost method.
		ApiAccountsMgmtV1TokenAuthorizationPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAccountsMgmtV1TokenAuthorizationPostExecute holds details about calls to the ApiAccountsMgmtV1TokenAuthorizationPostExecute method.
		ApiAccountsMgmtV1TokenAuthorizationPostExecute []struct {
			// R is the r argument value.
			R ApiApiAccountsMgmtV1TokenAuthorizationPostRequest
		}
		// ApiAuthorizationsV1AccessReviewPost holds details about calls to the ApiAuthorizationsV1AccessReviewPost method.
		ApiAuthorizationsV1AccessReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1AccessReviewPostExecute holds details about calls to the ApiAuthorizationsV1AccessReviewPostExecute method.
		ApiAuthorizationsV1AccessReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1AccessReviewPostRequest
		}
		// ApiAuthorizationsV1CapabilityReviewPost holds details about calls to the ApiAuthorizationsV1CapabilityReviewPost method.
		ApiAuthorizationsV1CapabilityReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1CapabilityReviewPostExecute holds details about calls to the ApiAuthorizationsV1CapabilityReviewPostExecute method.
		ApiAuthorizationsV1CapabilityReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1CapabilityReviewPostRequest
		}
		// ApiAuthorizationsV1ExportControlReviewPost holds details about calls to the ApiAuthorizationsV1ExportControlReviewPost method.
		ApiAuthorizationsV1ExportControlReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1ExportControlReviewPostExecute holds details about calls to the ApiAuthorizationsV1ExportControlReviewPostExecute method.
		ApiAuthorizationsV1ExportControlReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1ExportControlReviewPostRequest
		}
		// ApiAuthorizationsV1ResourceReviewPost holds details about calls to the ApiAuthorizationsV1ResourceReviewPost method.
		ApiAuthorizationsV1ResourceReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1ResourceReviewPostExecute holds details about calls to the ApiAuthorizationsV1ResourceReviewPostExecute method.
		ApiAuthorizationsV1ResourceReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1ResourceReviewPostRequest
		}
		// ApiAuthorizationsV1SelfAccessReviewPost holds details about calls to the ApiAuthorizationsV1SelfAccessReviewPost method.
		ApiAuthorizationsV1SelfAccessReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1SelfAccessReviewPostExecute holds details about calls to the ApiAuthorizationsV1SelfAccessReviewPostExecute method.
		ApiAuthorizationsV1SelfAccessReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1SelfAccessReviewPostRequest
		}
		// ApiAuthorizationsV1SelfResourceReviewPost holds details about calls to the ApiAuthorizationsV1SelfResourceReviewPost method.
		ApiAuthorizationsV1SelfResourceReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1SelfResourceReviewPostExecute holds details about calls to the ApiAuthorizationsV1SelfResourceReviewPostExecute method.
		ApiAuthorizationsV1SelfResourceReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1SelfResourceReviewPostRequest
		}
		// ApiAuthorizationsV1SelfTermsReviewPost holds details about calls to the ApiAuthorizationsV1SelfTermsReviewPost method.
		ApiAuthorizationsV1SelfTermsReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1SelfTermsReviewPostExecute holds details about calls to the ApiAuthorizationsV1SelfTermsReviewPostExecute method.
		ApiAuthorizationsV1SelfTermsReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1SelfTermsReviewPostRequest
		}
		// ApiAuthorizationsV1TermsReviewPost holds details about calls to the ApiAuthorizationsV1TermsReviewPost method.
		ApiAuthorizationsV1TermsReviewPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ApiAuthorizationsV1TermsReviewPostExecute holds details about calls to the ApiAuthorizationsV1TermsReviewPostExecute method.
		ApiAuthorizationsV1TermsReviewPostExecute []struct {
			// R is the r argument value.
			R ApiApiAuthorizationsV1TermsReviewPostRequest
		}
	}
	lockApiAccountsMgmtV1AccessTokenPost                                                 sync.RWMutex
	lockApiAccountsMgmtV1AccessTokenPostExecute                                          sync.RWMutex
	lockApiAccountsMgmtV1AccountsGet                                                     sync.RWMutex
	lockApiAccountsMgmtV1AccountsGetExecute                                              sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdGet                                                   sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdGetExecute                                            sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsGet                                             sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsGetExecute                                      sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsKeyDelete                                       sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute                                sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsKeyGet                                          sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute                                   sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsKeyPatch                                        sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute                                 sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsPost                                            sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdLabelsPostExecute                                     sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdPatch                                                 sync.RWMutex
	lockApiAccountsMgmtV1AccountsIdPatchExecute                                          sync.RWMutex
	lockApiAccountsMgmtV1AccountsPost                                                    sync.RWMutex
	lockApiAccountsMgmtV1AccountsPostExecute                                             sync.RWMutex
	lockApiAccountsMgmtV1ClusterAuthorizationsPost                                       sync.RWMutex
	lockApiAccountsMgmtV1ClusterAuthorizationsPostExecute                                sync.RWMutex
	lockApiAccountsMgmtV1ClusterRegistrationsPost                                        sync.RWMutex
	lockApiAccountsMgmtV1ClusterRegistrationsPostExecute                                 sync.RWMutex
	lockApiAccountsMgmtV1CurrentAccountGet                                               sync.RWMutex
	lockApiAccountsMgmtV1CurrentAccountGetExecute                                        sync.RWMutex
	lockApiAccountsMgmtV1ErrorsGet                                                       sync.RWMutex
	lockApiAccountsMgmtV1ErrorsGetExecute                                                sync.RWMutex
	lockApiAccountsMgmtV1ErrorsIdGet                                                     sync.RWMutex
	lockApiAccountsMgmtV1ErrorsIdGetExecute                                              sync.RWMutex
	lockApiAccountsMgmtV1FeatureTogglesIdQueryPost                                       sync.RWMutex
	lockApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute                                sync.RWMutex
	lockApiAccountsMgmtV1LabelsGet                                                       sync.RWMutex
	lockApiAccountsMgmtV1LabelsGetExecute                                                sync.RWMutex
	lockApiAccountsMgmtV1MetricsGet                                                      sync.RWMutex
	lockApiAccountsMgmtV1MetricsGetExecute                                               sync.RWMutex
	lockApiAccountsMgmtV1NotifyPost                                                      sync.RWMutex
	lockApiAccountsMgmtV1NotifyPostExecute                                               sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsGet                                                sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsGetExecute                                         sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdGet                                              sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdGetExecute                                       sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsGet                                        sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsGetExecute                                 sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete                                  sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute                           sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGet                                     sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute                              sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch                                   sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute                            sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsPost                                       sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdLabelsPostExecute                                sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdPatch                                            sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdPatchExecute                                     sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet                              sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute                       sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet                                  sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute                           sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet                               sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute                        sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet                              sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute                       sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost                             sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute                      sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete                    sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute             sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet                       sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute                sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch                     sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute              sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsPost                                               sync.RWMutex
	lockApiAccountsMgmtV1OrganizationsPostExecute                                        sync.RWMutex
	lockApiAccountsMgmtV1PlansGet                                                        sync.RWMutex
	lockApiAccountsMgmtV1PlansGetExecute                                                 sync.RWMutex
	lockApiAccountsMgmtV1PlansIdGet                                                      sync.RWMutex
	lockApiAccountsMgmtV1PlansIdGetExecute                                               sync.RWMutex
	lockApiAccountsMgmtV1PullSecretsExternalResourceIdDelete                             sync.RWMutex
	lockApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute                      sync.RWMutex
	lockApiAccountsMgmtV1PullSecretsPost                                                 sync.RWMutex
	lockApiAccountsMgmtV1PullSecretsPostExecute                                          sync.RWMutex
	lockApiAccountsMgmtV1RegistriesGet                                                   sync.RWMutex
	lockApiAccountsMgmtV1RegistriesGetExecute                                            sync.RWMutex
	lockApiAccountsMgmtV1RegistriesIdGet                                                 sync.RWMutex
	lockApiAccountsMgmtV1RegistriesIdGetExecute                                          sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsGet                                          sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsGetExecute                                   sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsIdDelete                                     sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute                              sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsIdGet                                        sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsIdGetExecute                                 sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsIdPatch                                      sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsIdPatchExecute                               sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsPost                                         sync.RWMutex
	lockApiAccountsMgmtV1RegistryCredentialsPostExecute                                  sync.RWMutex
	lockApiAccountsMgmtV1ReservedResourcesGet                                            sync.RWMutex
	lockApiAccountsMgmtV1ReservedResourcesGetExecute                                     sync.RWMutex
	lockApiAccountsMgmtV1ResourceQuotaGet                                                sync.RWMutex
	lockApiAccountsMgmtV1ResourceQuotaGetExecute                                         sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsGet                                                 sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsGetExecute                                          sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsIdDelete                                            sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsIdDeleteExecute                                     sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsIdGet                                               sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsIdGetExecute                                        sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsIdPatch                                             sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsIdPatchExecute                                      sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsPost                                                sync.RWMutex
	lockApiAccountsMgmtV1RoleBindingsPostExecute                                         sync.RWMutex
	lockApiAccountsMgmtV1RolesGet                                                        sync.RWMutex
	lockApiAccountsMgmtV1RolesGetExecute                                                 sync.RWMutex
	lockApiAccountsMgmtV1RolesIdGet                                                      sync.RWMutex
	lockApiAccountsMgmtV1RolesIdGetExecute                                               sync.RWMutex
	lockApiAccountsMgmtV1SkuRulesGet                                                     sync.RWMutex
	lockApiAccountsMgmtV1SkuRulesGetExecute                                              sync.RWMutex
	lockApiAccountsMgmtV1SkuRulesIdGet                                                   sync.RWMutex
	lockApiAccountsMgmtV1SkuRulesIdGetExecute                                            sync.RWMutex
	lockApiAccountsMgmtV1SkusGet                                                         sync.RWMutex
	lockApiAccountsMgmtV1SkusGetExecute                                                  sync.RWMutex
	lockApiAccountsMgmtV1SkusIdGet                                                       sync.RWMutex
	lockApiAccountsMgmtV1SkusIdGetExecute                                                sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsGet                                                sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsGetExecute                                         sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdDelete                                           sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdDeleteExecute                                    sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdGet                                              sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdGetExecute                                       sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsGet                                        sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute                                 sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete                                  sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute                           sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet                                     sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute                              sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch                                   sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute                            sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsPost                                       sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute                                sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdNotifyPost                                       sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute                                sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdPatch                                            sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdPatchExecute                                     sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet                             sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute                      sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGet                                  sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute                           sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsPost                                               sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsPostExecute                                        sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete           sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute    sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet                       sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute                sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost                      sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute               sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet        sync.RWMutex
	lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute sync.RWMutex
	lockApiAccountsMgmtV1SupportCasesCaseIdDelete                                        sync.RWMutex
	lockApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute                                 sync.RWMutex
	lockApiAccountsMgmtV1SupportCasesPost                                                sync.RWMutex
	lockApiAccountsMgmtV1SupportCasesPostExecute                                         sync.RWMutex
	lockApiAccountsMgmtV1TokenAuthorizationPost                                          sync.RWMutex
	lockApiAccountsMgmtV1TokenAuthorizationPostExecute                                   sync.RWMutex
	lockApiAuthorizationsV1AccessReviewPost                                              sync.RWMutex
	lockApiAuthorizationsV1AccessReviewPostExecute                                       sync.RWMutex
	lockApiAuthorizationsV1CapabilityReviewPost                                          sync.RWMutex
	lockApiAuthorizationsV1CapabilityReviewPostExecute                                   sync.RWMutex
	lockApiAuthorizationsV1ExportControlReviewPost                                       sync.RWMutex
	lockApiAuthorizationsV1ExportControlReviewPostExecute                                sync.RWMutex
	lockApiAuthorizationsV1ResourceReviewPost                                            sync.RWMutex
	lockApiAuthorizationsV1ResourceReviewPostExecute                                     sync.RWMutex
	lockApiAuthorizationsV1SelfAccessReviewPost                                          sync.RWMutex
	lockApiAuthorizationsV1SelfAccessReviewPostExecute                                   sync.RWMutex
	lockApiAuthorizationsV1SelfResourceReviewPost                                        sync.RWMutex
	lockApiAuthorizationsV1SelfResourceReviewPostExecute                                 sync.RWMutex
	lockApiAuthorizationsV1SelfTermsReviewPost                                           sync.RWMutex
	lockApiAuthorizationsV1SelfTermsReviewPostExecute                                    sync.RWMutex
	lockApiAuthorizationsV1TermsReviewPost                                               sync.RWMutex
	lockApiAuthorizationsV1TermsReviewPostExecute                                        sync.RWMutex
}

// ApiAccountsMgmtV1AccessTokenPost calls ApiAccountsMgmtV1AccessTokenPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccessTokenPost(ctx context.Context) ApiApiAccountsMgmtV1AccessTokenPostRequest {
	if mock.ApiAccountsMgmtV1AccessTokenPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccessTokenPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccessTokenPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1AccessTokenPost.Lock()
	mock.calls.ApiAccountsMgmtV1AccessTokenPost = append(mock.calls.ApiAccountsMgmtV1AccessTokenPost, callInfo)
	mock.lockApiAccountsMgmtV1AccessTokenPost.Unlock()
	return mock.ApiAccountsMgmtV1AccessTokenPostFunc(ctx)
}

// ApiAccountsMgmtV1AccessTokenPostCalls gets all the calls that were made to ApiAccountsMgmtV1AccessTokenPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccessTokenPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccessTokenPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1AccessTokenPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccessTokenPost
	mock.lockApiAccountsMgmtV1AccessTokenPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccessTokenPostExecute calls ApiAccountsMgmtV1AccessTokenPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccessTokenPostExecute(r ApiApiAccountsMgmtV1AccessTokenPostRequest) (AccessTokenCfg, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccessTokenPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccessTokenPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccessTokenPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccessTokenPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccessTokenPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccessTokenPostExecute = append(mock.calls.ApiAccountsMgmtV1AccessTokenPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccessTokenPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccessTokenPostExecuteFunc(r)
}

// ApiAccountsMgmtV1AccessTokenPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccessTokenPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccessTokenPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccessTokenPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccessTokenPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccessTokenPostRequest
	}
	mock.lockApiAccountsMgmtV1AccessTokenPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccessTokenPostExecute
	mock.lockApiAccountsMgmtV1AccessTokenPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsGet calls ApiAccountsMgmtV1AccountsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsGet(ctx context.Context) ApiApiAccountsMgmtV1AccountsGetRequest {
	if mock.ApiAccountsMgmtV1AccountsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1AccountsGet.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsGet = append(mock.calls.ApiAccountsMgmtV1AccountsGet, callInfo)
	mock.lockApiAccountsMgmtV1AccountsGet.Unlock()
	return mock.ApiAccountsMgmtV1AccountsGetFunc(ctx)
}

// ApiAccountsMgmtV1AccountsGetCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1AccountsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsGet
	mock.lockApiAccountsMgmtV1AccountsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsGetExecute calls ApiAccountsMgmtV1AccountsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsGetExecute(r ApiApiAccountsMgmtV1AccountsGetRequest) (AccountList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsGetExecute = append(mock.calls.ApiAccountsMgmtV1AccountsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsGetRequest
	}
	mock.lockApiAccountsMgmtV1AccountsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsGetExecute
	mock.lockApiAccountsMgmtV1AccountsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdGet calls ApiAccountsMgmtV1AccountsIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdGetRequest {
	if mock.ApiAccountsMgmtV1AccountsIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1AccountsIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdGet = append(mock.calls.ApiAccountsMgmtV1AccountsIdGet, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdGet.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1AccountsIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1AccountsIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdGet
	mock.lockApiAccountsMgmtV1AccountsIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdGetExecute calls ApiAccountsMgmtV1AccountsIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdGetExecute(r ApiApiAccountsMgmtV1AccountsIdGetRequest) (Account, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdGetExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdGetRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdGetExecute
	mock.lockApiAccountsMgmtV1AccountsIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsGet calls ApiAccountsMgmtV1AccountsIdLabelsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsGet(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGet.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsGet = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsGet, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGet.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsGetFunc(ctx, id)
}

// ApiAccountsMgmtV1AccountsIdLabelsGetCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsGet
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsGetExecute calls ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsGetExecute(r ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest) (LabelList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsGetExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdLabelsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsGetRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsGetExecute
	mock.lockApiAccountsMgmtV1AccountsIdLabelsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyDelete calls ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyDelete(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDelete.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyDelete = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyDelete, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDelete.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteFunc(ctx, id, key)
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsKeyDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyDelete
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute calls ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsKeyDeleteRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyGet calls ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyGet(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGet.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyGet = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyGet, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGet.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsKeyGetFunc(ctx, id, key)
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyGetCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsKeyGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyGetCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyGet
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute calls ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsKeyGetRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyPatch calls ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyPatch(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatch.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyPatch = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyPatch, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatch.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchFunc(ctx, id, key)
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyPatchCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsKeyPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyPatchCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyPatch
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute calls ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute(r ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsKeyPatchRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute
	mock.lockApiAccountsMgmtV1AccountsIdLabelsKeyPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsPost calls ApiAccountsMgmtV1AccountsIdLabelsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsPost(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPost.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsPost = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsPost, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPost.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsPostFunc(ctx, id)
}

// ApiAccountsMgmtV1AccountsIdLabelsPostCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsPostCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsPost
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdLabelsPostExecute calls ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsPostExecute(r ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdLabelsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdLabelsPostExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdLabelsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdLabelsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdLabelsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdLabelsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdLabelsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdLabelsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdLabelsPostRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdLabelsPostExecute
	mock.lockApiAccountsMgmtV1AccountsIdLabelsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdPatch calls ApiAccountsMgmtV1AccountsIdPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdPatch(ctx context.Context, id string) ApiApiAccountsMgmtV1AccountsIdPatchRequest {
	if mock.ApiAccountsMgmtV1AccountsIdPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1AccountsIdPatch.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdPatch = append(mock.calls.ApiAccountsMgmtV1AccountsIdPatch, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdPatch.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdPatchFunc(ctx, id)
}

// ApiAccountsMgmtV1AccountsIdPatchCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdPatchCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1AccountsIdPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdPatch
	mock.lockApiAccountsMgmtV1AccountsIdPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsIdPatchExecute calls ApiAccountsMgmtV1AccountsIdPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdPatchExecute(r ApiApiAccountsMgmtV1AccountsIdPatchRequest) (Account, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsIdPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsIdPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsIdPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsIdPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsIdPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsIdPatchExecute = append(mock.calls.ApiAccountsMgmtV1AccountsIdPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsIdPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsIdPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsIdPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsIdPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsIdPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsIdPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsIdPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsIdPatchRequest
	}
	mock.lockApiAccountsMgmtV1AccountsIdPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsIdPatchExecute
	mock.lockApiAccountsMgmtV1AccountsIdPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsPost calls ApiAccountsMgmtV1AccountsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsPost(ctx context.Context) ApiApiAccountsMgmtV1AccountsPostRequest {
	if mock.ApiAccountsMgmtV1AccountsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1AccountsPost.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsPost = append(mock.calls.ApiAccountsMgmtV1AccountsPost, callInfo)
	mock.lockApiAccountsMgmtV1AccountsPost.Unlock()
	return mock.ApiAccountsMgmtV1AccountsPostFunc(ctx)
}

// ApiAccountsMgmtV1AccountsPostCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1AccountsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsPost
	mock.lockApiAccountsMgmtV1AccountsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1AccountsPostExecute calls ApiAccountsMgmtV1AccountsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsPostExecute(r ApiApiAccountsMgmtV1AccountsPostRequest) (Account, *http.Response, error) {
	if mock.ApiAccountsMgmtV1AccountsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1AccountsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1AccountsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1AccountsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1AccountsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1AccountsPostExecute = append(mock.calls.ApiAccountsMgmtV1AccountsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1AccountsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1AccountsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1AccountsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1AccountsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1AccountsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1AccountsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1AccountsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1AccountsPostRequest
	}
	mock.lockApiAccountsMgmtV1AccountsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1AccountsPostExecute
	mock.lockApiAccountsMgmtV1AccountsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ClusterAuthorizationsPost calls ApiAccountsMgmtV1ClusterAuthorizationsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterAuthorizationsPost(ctx context.Context) ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest {
	if mock.ApiAccountsMgmtV1ClusterAuthorizationsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ClusterAuthorizationsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ClusterAuthorizationsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPost.Lock()
	mock.calls.ApiAccountsMgmtV1ClusterAuthorizationsPost = append(mock.calls.ApiAccountsMgmtV1ClusterAuthorizationsPost, callInfo)
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPost.Unlock()
	return mock.ApiAccountsMgmtV1ClusterAuthorizationsPostFunc(ctx)
}

// ApiAccountsMgmtV1ClusterAuthorizationsPostCalls gets all the calls that were made to ApiAccountsMgmtV1ClusterAuthorizationsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ClusterAuthorizationsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterAuthorizationsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ClusterAuthorizationsPost
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ClusterAuthorizationsPostExecute calls ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterAuthorizationsPostExecute(r ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest) (ClusterAuthorizationResponse, *http.Response, error) {
	if mock.ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ClusterAuthorizationsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1ClusterAuthorizationsPostExecute = append(mock.calls.ApiAccountsMgmtV1ClusterAuthorizationsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1ClusterAuthorizationsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterAuthorizationsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1ClusterAuthorizationsPostRequest
	}
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ClusterAuthorizationsPostExecute
	mock.lockApiAccountsMgmtV1ClusterAuthorizationsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ClusterRegistrationsPost calls ApiAccountsMgmtV1ClusterRegistrationsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterRegistrationsPost(ctx context.Context) ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest {
	if mock.ApiAccountsMgmtV1ClusterRegistrationsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ClusterRegistrationsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ClusterRegistrationsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPost.Lock()
	mock.calls.ApiAccountsMgmtV1ClusterRegistrationsPost = append(mock.calls.ApiAccountsMgmtV1ClusterRegistrationsPost, callInfo)
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPost.Unlock()
	return mock.ApiAccountsMgmtV1ClusterRegistrationsPostFunc(ctx)
}

// ApiAccountsMgmtV1ClusterRegistrationsPostCalls gets all the calls that were made to ApiAccountsMgmtV1ClusterRegistrationsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ClusterRegistrationsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterRegistrationsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ClusterRegistrationsPost
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ClusterRegistrationsPostExecute calls ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterRegistrationsPostExecute(r ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest) (ClusterRegistrationResponse, *http.Response, error) {
	if mock.ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ClusterRegistrationsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1ClusterRegistrationsPostExecute = append(mock.calls.ApiAccountsMgmtV1ClusterRegistrationsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1ClusterRegistrationsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1ClusterRegistrationsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1ClusterRegistrationsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ClusterRegistrationsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ClusterRegistrationsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1ClusterRegistrationsPostRequest
	}
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ClusterRegistrationsPostExecute
	mock.lockApiAccountsMgmtV1ClusterRegistrationsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1CurrentAccountGet calls ApiAccountsMgmtV1CurrentAccountGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1CurrentAccountGet(ctx context.Context) ApiApiAccountsMgmtV1CurrentAccountGetRequest {
	if mock.ApiAccountsMgmtV1CurrentAccountGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1CurrentAccountGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1CurrentAccountGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1CurrentAccountGet.Lock()
	mock.calls.ApiAccountsMgmtV1CurrentAccountGet = append(mock.calls.ApiAccountsMgmtV1CurrentAccountGet, callInfo)
	mock.lockApiAccountsMgmtV1CurrentAccountGet.Unlock()
	return mock.ApiAccountsMgmtV1CurrentAccountGetFunc(ctx)
}

// ApiAccountsMgmtV1CurrentAccountGetCalls gets all the calls that were made to ApiAccountsMgmtV1CurrentAccountGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1CurrentAccountGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1CurrentAccountGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1CurrentAccountGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1CurrentAccountGet
	mock.lockApiAccountsMgmtV1CurrentAccountGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1CurrentAccountGetExecute calls ApiAccountsMgmtV1CurrentAccountGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1CurrentAccountGetExecute(r ApiApiAccountsMgmtV1CurrentAccountGetRequest) (Account, *http.Response, error) {
	if mock.ApiAccountsMgmtV1CurrentAccountGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1CurrentAccountGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1CurrentAccountGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1CurrentAccountGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1CurrentAccountGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1CurrentAccountGetExecute = append(mock.calls.ApiAccountsMgmtV1CurrentAccountGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1CurrentAccountGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1CurrentAccountGetExecuteFunc(r)
}

// ApiAccountsMgmtV1CurrentAccountGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1CurrentAccountGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1CurrentAccountGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1CurrentAccountGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1CurrentAccountGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1CurrentAccountGetRequest
	}
	mock.lockApiAccountsMgmtV1CurrentAccountGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1CurrentAccountGetExecute
	mock.lockApiAccountsMgmtV1CurrentAccountGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ErrorsGet calls ApiAccountsMgmtV1ErrorsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsGet(ctx context.Context) ApiApiAccountsMgmtV1ErrorsGetRequest {
	if mock.ApiAccountsMgmtV1ErrorsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ErrorsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ErrorsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1ErrorsGet.Lock()
	mock.calls.ApiAccountsMgmtV1ErrorsGet = append(mock.calls.ApiAccountsMgmtV1ErrorsGet, callInfo)
	mock.lockApiAccountsMgmtV1ErrorsGet.Unlock()
	return mock.ApiAccountsMgmtV1ErrorsGetFunc(ctx)
}

// ApiAccountsMgmtV1ErrorsGetCalls gets all the calls that were made to ApiAccountsMgmtV1ErrorsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ErrorsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1ErrorsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ErrorsGet
	mock.lockApiAccountsMgmtV1ErrorsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ErrorsGetExecute calls ApiAccountsMgmtV1ErrorsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsGetExecute(r ApiApiAccountsMgmtV1ErrorsGetRequest) (ErrorList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1ErrorsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ErrorsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ErrorsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1ErrorsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1ErrorsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1ErrorsGetExecute = append(mock.calls.ApiAccountsMgmtV1ErrorsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1ErrorsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1ErrorsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1ErrorsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1ErrorsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ErrorsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1ErrorsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1ErrorsGetRequest
	}
	mock.lockApiAccountsMgmtV1ErrorsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ErrorsGetExecute
	mock.lockApiAccountsMgmtV1ErrorsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ErrorsIdGet calls ApiAccountsMgmtV1ErrorsIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1ErrorsIdGetRequest {
	if mock.ApiAccountsMgmtV1ErrorsIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ErrorsIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ErrorsIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1ErrorsIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1ErrorsIdGet = append(mock.calls.ApiAccountsMgmtV1ErrorsIdGet, callInfo)
	mock.lockApiAccountsMgmtV1ErrorsIdGet.Unlock()
	return mock.ApiAccountsMgmtV1ErrorsIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1ErrorsIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1ErrorsIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ErrorsIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1ErrorsIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ErrorsIdGet
	mock.lockApiAccountsMgmtV1ErrorsIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ErrorsIdGetExecute calls ApiAccountsMgmtV1ErrorsIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsIdGetExecute(r ApiApiAccountsMgmtV1ErrorsIdGetRequest) (Error, *http.Response, error) {
	if mock.ApiAccountsMgmtV1ErrorsIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ErrorsIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ErrorsIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1ErrorsIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1ErrorsIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1ErrorsIdGetExecute = append(mock.calls.ApiAccountsMgmtV1ErrorsIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1ErrorsIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1ErrorsIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1ErrorsIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1ErrorsIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ErrorsIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ErrorsIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1ErrorsIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1ErrorsIdGetRequest
	}
	mock.lockApiAccountsMgmtV1ErrorsIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ErrorsIdGetExecute
	mock.lockApiAccountsMgmtV1ErrorsIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1FeatureTogglesIdQueryPost calls ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1FeatureTogglesIdQueryPost(ctx context.Context, id string) ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest {
	if mock.ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1FeatureTogglesIdQueryPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPost.Lock()
	mock.calls.ApiAccountsMgmtV1FeatureTogglesIdQueryPost = append(mock.calls.ApiAccountsMgmtV1FeatureTogglesIdQueryPost, callInfo)
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPost.Unlock()
	return mock.ApiAccountsMgmtV1FeatureTogglesIdQueryPostFunc(ctx, id)
}

// ApiAccountsMgmtV1FeatureTogglesIdQueryPostCalls gets all the calls that were made to ApiAccountsMgmtV1FeatureTogglesIdQueryPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1FeatureTogglesIdQueryPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1FeatureTogglesIdQueryPostCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1FeatureTogglesIdQueryPost
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute calls ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute(r ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest) (FeatureToggle, *http.Response, error) {
	if mock.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute = append(mock.calls.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteFunc(r)
}

// ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1FeatureTogglesIdQueryPostRequest
	}
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute
	mock.lockApiAccountsMgmtV1FeatureTogglesIdQueryPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1LabelsGet calls ApiAccountsMgmtV1LabelsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1LabelsGet(ctx context.Context) ApiApiAccountsMgmtV1LabelsGetRequest {
	if mock.ApiAccountsMgmtV1LabelsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1LabelsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1LabelsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1LabelsGet.Lock()
	mock.calls.ApiAccountsMgmtV1LabelsGet = append(mock.calls.ApiAccountsMgmtV1LabelsGet, callInfo)
	mock.lockApiAccountsMgmtV1LabelsGet.Unlock()
	return mock.ApiAccountsMgmtV1LabelsGetFunc(ctx)
}

// ApiAccountsMgmtV1LabelsGetCalls gets all the calls that were made to ApiAccountsMgmtV1LabelsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1LabelsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1LabelsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1LabelsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1LabelsGet
	mock.lockApiAccountsMgmtV1LabelsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1LabelsGetExecute calls ApiAccountsMgmtV1LabelsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1LabelsGetExecute(r ApiApiAccountsMgmtV1LabelsGetRequest) (LabelList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1LabelsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1LabelsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1LabelsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1LabelsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1LabelsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1LabelsGetExecute = append(mock.calls.ApiAccountsMgmtV1LabelsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1LabelsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1LabelsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1LabelsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1LabelsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1LabelsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1LabelsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1LabelsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1LabelsGetRequest
	}
	mock.lockApiAccountsMgmtV1LabelsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1LabelsGetExecute
	mock.lockApiAccountsMgmtV1LabelsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1MetricsGet calls ApiAccountsMgmtV1MetricsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1MetricsGet(ctx context.Context) ApiApiAccountsMgmtV1MetricsGetRequest {
	if mock.ApiAccountsMgmtV1MetricsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1MetricsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1MetricsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1MetricsGet.Lock()
	mock.calls.ApiAccountsMgmtV1MetricsGet = append(mock.calls.ApiAccountsMgmtV1MetricsGet, callInfo)
	mock.lockApiAccountsMgmtV1MetricsGet.Unlock()
	return mock.ApiAccountsMgmtV1MetricsGetFunc(ctx)
}

// ApiAccountsMgmtV1MetricsGetCalls gets all the calls that were made to ApiAccountsMgmtV1MetricsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1MetricsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1MetricsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1MetricsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1MetricsGet
	mock.lockApiAccountsMgmtV1MetricsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1MetricsGetExecute calls ApiAccountsMgmtV1MetricsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1MetricsGetExecute(r ApiApiAccountsMgmtV1MetricsGetRequest) (MetricsList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1MetricsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1MetricsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1MetricsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1MetricsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1MetricsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1MetricsGetExecute = append(mock.calls.ApiAccountsMgmtV1MetricsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1MetricsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1MetricsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1MetricsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1MetricsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1MetricsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1MetricsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1MetricsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1MetricsGetRequest
	}
	mock.lockApiAccountsMgmtV1MetricsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1MetricsGetExecute
	mock.lockApiAccountsMgmtV1MetricsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1NotifyPost calls ApiAccountsMgmtV1NotifyPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1NotifyPost(ctx context.Context) ApiApiAccountsMgmtV1NotifyPostRequest {
	if mock.ApiAccountsMgmtV1NotifyPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1NotifyPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1NotifyPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1NotifyPost.Lock()
	mock.calls.ApiAccountsMgmtV1NotifyPost = append(mock.calls.ApiAccountsMgmtV1NotifyPost, callInfo)
	mock.lockApiAccountsMgmtV1NotifyPost.Unlock()
	return mock.ApiAccountsMgmtV1NotifyPostFunc(ctx)
}

// ApiAccountsMgmtV1NotifyPostCalls gets all the calls that were made to ApiAccountsMgmtV1NotifyPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1NotifyPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1NotifyPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1NotifyPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1NotifyPost
	mock.lockApiAccountsMgmtV1NotifyPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1NotifyPostExecute calls ApiAccountsMgmtV1NotifyPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1NotifyPostExecute(r ApiApiAccountsMgmtV1NotifyPostRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1NotifyPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1NotifyPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1NotifyPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1NotifyPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1NotifyPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1NotifyPostExecute = append(mock.calls.ApiAccountsMgmtV1NotifyPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1NotifyPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1NotifyPostExecuteFunc(r)
}

// ApiAccountsMgmtV1NotifyPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1NotifyPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1NotifyPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1NotifyPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1NotifyPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1NotifyPostRequest
	}
	mock.lockApiAccountsMgmtV1NotifyPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1NotifyPostExecute
	mock.lockApiAccountsMgmtV1NotifyPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsGet calls ApiAccountsMgmtV1OrganizationsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsGet(ctx context.Context) ApiApiAccountsMgmtV1OrganizationsGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1OrganizationsGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsGetFunc(ctx)
}

// ApiAccountsMgmtV1OrganizationsGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1OrganizationsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsGet
	mock.lockApiAccountsMgmtV1OrganizationsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsGetExecute calls ApiAccountsMgmtV1OrganizationsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsGetExecute(r ApiApiAccountsMgmtV1OrganizationsGetRequest) (OrganizationList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdGet calls ApiAccountsMgmtV1OrganizationsIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1OrganizationsIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdGet
	mock.lockApiAccountsMgmtV1OrganizationsIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdGetExecute calls ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdGetExecute(r ApiApiAccountsMgmtV1OrganizationsIdGetRequest) (Organization, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsGet calls ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsGet(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsGetFunc(ctx, id)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsGet
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute calls ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute(r ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest) (LabelList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete calls ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteFunc(ctx, id, key)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute calls ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet calls ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetFunc(ctx, id, key)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGet
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute calls ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch calls ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchFunc(ctx, id, key)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute calls ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute(r ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsKeyPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsPost calls ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsPost(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPost.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsPost = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsPost, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPost.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsPostFunc(ctx, id)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsPostCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsPostCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsPost
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute calls ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute(r ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdLabelsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdLabelsPostRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdLabelsPostExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdLabelsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdPatch calls ApiAccountsMgmtV1OrganizationsIdPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdPatch(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdPatchRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdPatch.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdPatch = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdPatch, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdPatch.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdPatchFunc(ctx, id)
}

// ApiAccountsMgmtV1OrganizationsIdPatchCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdPatchCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdPatch
	mock.lockApiAccountsMgmtV1OrganizationsIdPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdPatchExecute calls ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdPatchExecute(r ApiApiAccountsMgmtV1OrganizationsIdPatchRequest) (Organization, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdPatchExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdPatchRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdPatchExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet calls ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(ctx context.Context, id string) ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetFunc(ctx, id)
}

// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute calls ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute(r ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest) (Summary, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsIdSummaryDashboardGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet calls ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		OrgId string
	}{
		Ctx:   ctx,
		OrgId: orgId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetFunc(ctx, orgId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetCalls() []struct {
	Ctx   context.Context
	OrgId string
} {
	var calls []struct {
		Ctx   context.Context
		OrgId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute calls ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest) (QuotaCostList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaCostGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet calls ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		OrgId string
	}{
		Ctx:   ctx,
		OrgId: orgId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetFunc(ctx, orgId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetCalls() []struct {
	Ctx   context.Context
	OrgId string
} {
	var calls []struct {
		Ctx   context.Context
		OrgId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute calls ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest) (QuotaSummaryList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		OrgId string
	}{
		Ctx:   ctx,
		OrgId: orgId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetFunc(ctx, orgId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetCalls() []struct {
	Ctx   context.Context
	OrgId string
} {
	var calls []struct {
		Ctx   context.Context
		OrgId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest) (ResourceQuotaList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(ctx context.Context, orgId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		OrgId string
	}{
		Ctx:   ctx,
		OrgId: orgId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostFunc(ctx, orgId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostCalls() []struct {
	Ctx   context.Context
	OrgId string
} {
	var calls []struct {
		Ctx   context.Context
		OrgId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest) (ResourceQuota, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OrgId   string
		QuotaId string
	}{
		Ctx:     ctx,
		OrgId:   orgId,
		QuotaId: quotaId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteFunc(ctx, orgId, quotaId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteCalls() []struct {
	Ctx     context.Context
	OrgId   string
	QuotaId string
} {
	var calls []struct {
		Ctx     context.Context
		OrgId   string
		QuotaId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OrgId   string
		QuotaId string
	}{
		Ctx:     ctx,
		OrgId:   orgId,
		QuotaId: quotaId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetFunc(ctx, orgId, quotaId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetCalls() []struct {
	Ctx     context.Context
	OrgId   string
	QuotaId string
} {
	var calls []struct {
		Ctx     context.Context
		OrgId   string
		QuotaId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest) (ResourceQuota, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(ctx context.Context, orgId string, quotaId string) ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OrgId   string
		QuotaId string
	}{
		Ctx:     ctx,
		OrgId:   orgId,
		QuotaId: quotaId,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchFunc(ctx, orgId, quotaId)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchCalls() []struct {
	Ctx     context.Context
	OrgId   string
	QuotaId string
} {
	var calls []struct {
		Ctx     context.Context
		OrgId   string
		QuotaId string
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute calls ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute(r ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest) (ResourceQuota, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute
	mock.lockApiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsPost calls ApiAccountsMgmtV1OrganizationsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsPost(ctx context.Context) ApiApiAccountsMgmtV1OrganizationsPostRequest {
	if mock.ApiAccountsMgmtV1OrganizationsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1OrganizationsPost.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsPost = append(mock.calls.ApiAccountsMgmtV1OrganizationsPost, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsPost.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsPostFunc(ctx)
}

// ApiAccountsMgmtV1OrganizationsPostCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1OrganizationsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsPost
	mock.lockApiAccountsMgmtV1OrganizationsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1OrganizationsPostExecute calls ApiAccountsMgmtV1OrganizationsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsPostExecute(r ApiApiAccountsMgmtV1OrganizationsPostRequest) (Organization, *http.Response, error) {
	if mock.ApiAccountsMgmtV1OrganizationsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1OrganizationsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1OrganizationsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1OrganizationsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1OrganizationsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1OrganizationsPostExecute = append(mock.calls.ApiAccountsMgmtV1OrganizationsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1OrganizationsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1OrganizationsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1OrganizationsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1OrganizationsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1OrganizationsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1OrganizationsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1OrganizationsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1OrganizationsPostRequest
	}
	mock.lockApiAccountsMgmtV1OrganizationsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1OrganizationsPostExecute
	mock.lockApiAccountsMgmtV1OrganizationsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PlansGet calls ApiAccountsMgmtV1PlansGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansGet(ctx context.Context) ApiApiAccountsMgmtV1PlansGetRequest {
	if mock.ApiAccountsMgmtV1PlansGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PlansGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PlansGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1PlansGet.Lock()
	mock.calls.ApiAccountsMgmtV1PlansGet = append(mock.calls.ApiAccountsMgmtV1PlansGet, callInfo)
	mock.lockApiAccountsMgmtV1PlansGet.Unlock()
	return mock.ApiAccountsMgmtV1PlansGetFunc(ctx)
}

// ApiAccountsMgmtV1PlansGetCalls gets all the calls that were made to ApiAccountsMgmtV1PlansGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PlansGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1PlansGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PlansGet
	mock.lockApiAccountsMgmtV1PlansGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PlansGetExecute calls ApiAccountsMgmtV1PlansGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansGetExecute(r ApiApiAccountsMgmtV1PlansGetRequest) (PlanList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1PlansGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PlansGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PlansGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1PlansGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1PlansGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1PlansGetExecute = append(mock.calls.ApiAccountsMgmtV1PlansGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1PlansGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1PlansGetExecuteFunc(r)
}

// ApiAccountsMgmtV1PlansGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1PlansGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PlansGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1PlansGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1PlansGetRequest
	}
	mock.lockApiAccountsMgmtV1PlansGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PlansGetExecute
	mock.lockApiAccountsMgmtV1PlansGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PlansIdGet calls ApiAccountsMgmtV1PlansIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1PlansIdGetRequest {
	if mock.ApiAccountsMgmtV1PlansIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PlansIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PlansIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1PlansIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1PlansIdGet = append(mock.calls.ApiAccountsMgmtV1PlansIdGet, callInfo)
	mock.lockApiAccountsMgmtV1PlansIdGet.Unlock()
	return mock.ApiAccountsMgmtV1PlansIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1PlansIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1PlansIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PlansIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1PlansIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PlansIdGet
	mock.lockApiAccountsMgmtV1PlansIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PlansIdGetExecute calls ApiAccountsMgmtV1PlansIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansIdGetExecute(r ApiApiAccountsMgmtV1PlansIdGetRequest) (Plan, *http.Response, error) {
	if mock.ApiAccountsMgmtV1PlansIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PlansIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PlansIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1PlansIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1PlansIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1PlansIdGetExecute = append(mock.calls.ApiAccountsMgmtV1PlansIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1PlansIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1PlansIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1PlansIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1PlansIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PlansIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PlansIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1PlansIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1PlansIdGetRequest
	}
	mock.lockApiAccountsMgmtV1PlansIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PlansIdGetExecute
	mock.lockApiAccountsMgmtV1PlansIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete calls ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete(ctx context.Context, externalResourceId string) ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest {
	if mock.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		ExternalResourceId string
	}{
		Ctx:                ctx,
		ExternalResourceId: externalResourceId,
	}
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete = append(mock.calls.ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteFunc(ctx, externalResourceId)
}

// ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteCalls() []struct {
	Ctx                context.Context
	ExternalResourceId string
} {
	var calls []struct {
		Ctx                context.Context
		ExternalResourceId string
	}
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PullSecretsExternalResourceIdDelete
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute calls ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute(r ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute
	mock.lockApiAccountsMgmtV1PullSecretsExternalResourceIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PullSecretsPost calls ApiAccountsMgmtV1PullSecretsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsPost(ctx context.Context) ApiApiAccountsMgmtV1PullSecretsPostRequest {
	if mock.ApiAccountsMgmtV1PullSecretsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PullSecretsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PullSecretsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1PullSecretsPost.Lock()
	mock.calls.ApiAccountsMgmtV1PullSecretsPost = append(mock.calls.ApiAccountsMgmtV1PullSecretsPost, callInfo)
	mock.lockApiAccountsMgmtV1PullSecretsPost.Unlock()
	return mock.ApiAccountsMgmtV1PullSecretsPostFunc(ctx)
}

// ApiAccountsMgmtV1PullSecretsPostCalls gets all the calls that were made to ApiAccountsMgmtV1PullSecretsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PullSecretsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1PullSecretsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PullSecretsPost
	mock.lockApiAccountsMgmtV1PullSecretsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1PullSecretsPostExecute calls ApiAccountsMgmtV1PullSecretsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsPostExecute(r ApiApiAccountsMgmtV1PullSecretsPostRequest) (AccessTokenCfg, *http.Response, error) {
	if mock.ApiAccountsMgmtV1PullSecretsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1PullSecretsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1PullSecretsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1PullSecretsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1PullSecretsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1PullSecretsPostExecute = append(mock.calls.ApiAccountsMgmtV1PullSecretsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1PullSecretsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1PullSecretsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1PullSecretsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1PullSecretsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1PullSecretsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1PullSecretsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1PullSecretsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1PullSecretsPostRequest
	}
	mock.lockApiAccountsMgmtV1PullSecretsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1PullSecretsPostExecute
	mock.lockApiAccountsMgmtV1PullSecretsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistriesGet calls ApiAccountsMgmtV1RegistriesGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesGet(ctx context.Context) ApiApiAccountsMgmtV1RegistriesGetRequest {
	if mock.ApiAccountsMgmtV1RegistriesGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistriesGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistriesGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1RegistriesGet.Lock()
	mock.calls.ApiAccountsMgmtV1RegistriesGet = append(mock.calls.ApiAccountsMgmtV1RegistriesGet, callInfo)
	mock.lockApiAccountsMgmtV1RegistriesGet.Unlock()
	return mock.ApiAccountsMgmtV1RegistriesGetFunc(ctx)
}

// ApiAccountsMgmtV1RegistriesGetCalls gets all the calls that were made to ApiAccountsMgmtV1RegistriesGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistriesGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1RegistriesGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistriesGet
	mock.lockApiAccountsMgmtV1RegistriesGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistriesGetExecute calls ApiAccountsMgmtV1RegistriesGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesGetExecute(r ApiApiAccountsMgmtV1RegistriesGetRequest) (RegistryList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistriesGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistriesGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistriesGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistriesGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistriesGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistriesGetExecute = append(mock.calls.ApiAccountsMgmtV1RegistriesGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistriesGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistriesGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistriesGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistriesGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistriesGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistriesGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistriesGetRequest
	}
	mock.lockApiAccountsMgmtV1RegistriesGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistriesGetExecute
	mock.lockApiAccountsMgmtV1RegistriesGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistriesIdGet calls ApiAccountsMgmtV1RegistriesIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistriesIdGetRequest {
	if mock.ApiAccountsMgmtV1RegistriesIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistriesIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistriesIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RegistriesIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1RegistriesIdGet = append(mock.calls.ApiAccountsMgmtV1RegistriesIdGet, callInfo)
	mock.lockApiAccountsMgmtV1RegistriesIdGet.Unlock()
	return mock.ApiAccountsMgmtV1RegistriesIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1RegistriesIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1RegistriesIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistriesIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RegistriesIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistriesIdGet
	mock.lockApiAccountsMgmtV1RegistriesIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistriesIdGetExecute calls ApiAccountsMgmtV1RegistriesIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesIdGetExecute(r ApiApiAccountsMgmtV1RegistriesIdGetRequest) (Registry, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistriesIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistriesIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistriesIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistriesIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistriesIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistriesIdGetExecute = append(mock.calls.ApiAccountsMgmtV1RegistriesIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistriesIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistriesIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistriesIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistriesIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistriesIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistriesIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistriesIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistriesIdGetRequest
	}
	mock.lockApiAccountsMgmtV1RegistriesIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistriesIdGetExecute
	mock.lockApiAccountsMgmtV1RegistriesIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsGet calls ApiAccountsMgmtV1RegistryCredentialsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsGet(ctx context.Context) ApiApiAccountsMgmtV1RegistryCredentialsGetRequest {
	if mock.ApiAccountsMgmtV1RegistryCredentialsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsGet.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsGet = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsGet, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsGet.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsGetFunc(ctx)
}

// ApiAccountsMgmtV1RegistryCredentialsGetCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsGet
	mock.lockApiAccountsMgmtV1RegistryCredentialsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsGetExecute calls ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsGetExecute(r ApiApiAccountsMgmtV1RegistryCredentialsGetRequest) (RegistryCredentialList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsGetExecute = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistryCredentialsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistryCredentialsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsGetRequest
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsGetExecute
	mock.lockApiAccountsMgmtV1RegistryCredentialsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsIdDelete calls ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdDelete(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest {
	if mock.ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdDelete = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsIdDeleteFunc(ctx, id)
}

// ApiAccountsMgmtV1RegistryCredentialsIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdDeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdDelete
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute calls ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute(r ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsIdGet calls ApiAccountsMgmtV1RegistryCredentialsIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest {
	if mock.ApiAccountsMgmtV1RegistryCredentialsIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdGet = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdGet, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGet.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1RegistryCredentialsIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdGet
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsIdGetExecute calls ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdGetExecute(r ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest) (RegistryCredential, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdGetExecute = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsIdGetRequest
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdGetExecute
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsIdPatch calls ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdPatch(ctx context.Context, id string) ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest {
	if mock.ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatch.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdPatch = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdPatch, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatch.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsIdPatchFunc(ctx, id)
}

// ApiAccountsMgmtV1RegistryCredentialsIdPatchCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsIdPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdPatchCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdPatch
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute calls ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute(r ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest) (RegistryCredential, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsIdPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsIdPatchRequest
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsIdPatchExecute
	mock.lockApiAccountsMgmtV1RegistryCredentialsIdPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsPost calls ApiAccountsMgmtV1RegistryCredentialsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsPost(ctx context.Context) ApiApiAccountsMgmtV1RegistryCredentialsPostRequest {
	if mock.ApiAccountsMgmtV1RegistryCredentialsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsPost.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsPost = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsPost, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsPost.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsPostFunc(ctx)
}

// ApiAccountsMgmtV1RegistryCredentialsPostCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsPost
	mock.lockApiAccountsMgmtV1RegistryCredentialsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RegistryCredentialsPostExecute calls ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsPostExecute(r ApiApiAccountsMgmtV1RegistryCredentialsPostRequest) (RegistryCredential, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RegistryCredentialsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RegistryCredentialsPostExecute = append(mock.calls.ApiAccountsMgmtV1RegistryCredentialsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1RegistryCredentialsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1RegistryCredentialsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1RegistryCredentialsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RegistryCredentialsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RegistryCredentialsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RegistryCredentialsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RegistryCredentialsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RegistryCredentialsPostRequest
	}
	mock.lockApiAccountsMgmtV1RegistryCredentialsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RegistryCredentialsPostExecute
	mock.lockApiAccountsMgmtV1RegistryCredentialsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ReservedResourcesGet calls ApiAccountsMgmtV1ReservedResourcesGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ReservedResourcesGet(ctx context.Context) ApiApiAccountsMgmtV1ReservedResourcesGetRequest {
	if mock.ApiAccountsMgmtV1ReservedResourcesGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ReservedResourcesGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ReservedResourcesGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1ReservedResourcesGet.Lock()
	mock.calls.ApiAccountsMgmtV1ReservedResourcesGet = append(mock.calls.ApiAccountsMgmtV1ReservedResourcesGet, callInfo)
	mock.lockApiAccountsMgmtV1ReservedResourcesGet.Unlock()
	return mock.ApiAccountsMgmtV1ReservedResourcesGetFunc(ctx)
}

// ApiAccountsMgmtV1ReservedResourcesGetCalls gets all the calls that were made to ApiAccountsMgmtV1ReservedResourcesGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ReservedResourcesGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ReservedResourcesGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1ReservedResourcesGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ReservedResourcesGet
	mock.lockApiAccountsMgmtV1ReservedResourcesGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ReservedResourcesGetExecute calls ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ReservedResourcesGetExecute(r ApiApiAccountsMgmtV1ReservedResourcesGetRequest) (ReservedResourceList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ReservedResourcesGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1ReservedResourcesGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1ReservedResourcesGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1ReservedResourcesGetExecute = append(mock.calls.ApiAccountsMgmtV1ReservedResourcesGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1ReservedResourcesGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1ReservedResourcesGetExecuteFunc(r)
}

// ApiAccountsMgmtV1ReservedResourcesGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1ReservedResourcesGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ReservedResourcesGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ReservedResourcesGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1ReservedResourcesGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1ReservedResourcesGetRequest
	}
	mock.lockApiAccountsMgmtV1ReservedResourcesGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ReservedResourcesGetExecute
	mock.lockApiAccountsMgmtV1ReservedResourcesGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ResourceQuotaGet calls ApiAccountsMgmtV1ResourceQuotaGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ResourceQuotaGet(ctx context.Context) ApiApiAccountsMgmtV1ResourceQuotaGetRequest {
	if mock.ApiAccountsMgmtV1ResourceQuotaGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ResourceQuotaGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ResourceQuotaGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1ResourceQuotaGet.Lock()
	mock.calls.ApiAccountsMgmtV1ResourceQuotaGet = append(mock.calls.ApiAccountsMgmtV1ResourceQuotaGet, callInfo)
	mock.lockApiAccountsMgmtV1ResourceQuotaGet.Unlock()
	return mock.ApiAccountsMgmtV1ResourceQuotaGetFunc(ctx)
}

// ApiAccountsMgmtV1ResourceQuotaGetCalls gets all the calls that were made to ApiAccountsMgmtV1ResourceQuotaGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ResourceQuotaGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ResourceQuotaGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1ResourceQuotaGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ResourceQuotaGet
	mock.lockApiAccountsMgmtV1ResourceQuotaGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1ResourceQuotaGetExecute calls ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1ResourceQuotaGetExecute(r ApiApiAccountsMgmtV1ResourceQuotaGetRequest) (ResourceQuotaList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1ResourceQuotaGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1ResourceQuotaGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1ResourceQuotaGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1ResourceQuotaGetExecute = append(mock.calls.ApiAccountsMgmtV1ResourceQuotaGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1ResourceQuotaGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1ResourceQuotaGetExecuteFunc(r)
}

// ApiAccountsMgmtV1ResourceQuotaGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1ResourceQuotaGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1ResourceQuotaGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1ResourceQuotaGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1ResourceQuotaGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1ResourceQuotaGetRequest
	}
	mock.lockApiAccountsMgmtV1ResourceQuotaGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1ResourceQuotaGetExecute
	mock.lockApiAccountsMgmtV1ResourceQuotaGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsGet calls ApiAccountsMgmtV1RoleBindingsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsGet(ctx context.Context) ApiApiAccountsMgmtV1RoleBindingsGetRequest {
	if mock.ApiAccountsMgmtV1RoleBindingsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsGet.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsGet = append(mock.calls.ApiAccountsMgmtV1RoleBindingsGet, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsGet.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsGetFunc(ctx)
}

// ApiAccountsMgmtV1RoleBindingsGetCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1RoleBindingsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsGet
	mock.lockApiAccountsMgmtV1RoleBindingsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsGetExecute calls ApiAccountsMgmtV1RoleBindingsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsGetExecute(r ApiApiAccountsMgmtV1RoleBindingsGetRequest) (RoleBindingList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RoleBindingsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RoleBindingsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsGetExecute = append(mock.calls.ApiAccountsMgmtV1RoleBindingsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RoleBindingsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RoleBindingsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RoleBindingsGetRequest
	}
	mock.lockApiAccountsMgmtV1RoleBindingsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsGetExecute
	mock.lockApiAccountsMgmtV1RoleBindingsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsIdDelete calls ApiAccountsMgmtV1RoleBindingsIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdDelete(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest {
	if mock.ApiAccountsMgmtV1RoleBindingsIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsIdDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsIdDelete = append(mock.calls.ApiAccountsMgmtV1RoleBindingsIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsIdDeleteFunc(ctx, id)
}

// ApiAccountsMgmtV1RoleBindingsIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdDeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsIdDelete
	mock.lockApiAccountsMgmtV1RoleBindingsIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsIdDeleteExecute calls ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdDeleteExecute(r ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1RoleBindingsIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RoleBindingsIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsIdDeleteExecute
	mock.lockApiAccountsMgmtV1RoleBindingsIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsIdGet calls ApiAccountsMgmtV1RoleBindingsIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdGetRequest {
	if mock.ApiAccountsMgmtV1RoleBindingsIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsIdGet = append(mock.calls.ApiAccountsMgmtV1RoleBindingsIdGet, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsIdGet.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1RoleBindingsIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsIdGet
	mock.lockApiAccountsMgmtV1RoleBindingsIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsIdGetExecute calls ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdGetExecute(r ApiApiAccountsMgmtV1RoleBindingsIdGetRequest) (RoleBinding, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RoleBindingsIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsIdGetExecute = append(mock.calls.ApiAccountsMgmtV1RoleBindingsIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RoleBindingsIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RoleBindingsIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RoleBindingsIdGetRequest
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsIdGetExecute
	mock.lockApiAccountsMgmtV1RoleBindingsIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsIdPatch calls ApiAccountsMgmtV1RoleBindingsIdPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdPatch(ctx context.Context, id string) ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest {
	if mock.ApiAccountsMgmtV1RoleBindingsIdPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsIdPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsIdPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatch.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsIdPatch = append(mock.calls.ApiAccountsMgmtV1RoleBindingsIdPatch, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatch.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsIdPatchFunc(ctx, id)
}

// ApiAccountsMgmtV1RoleBindingsIdPatchCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsIdPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsIdPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdPatchCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsIdPatch
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsIdPatchExecute calls ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdPatchExecute(r ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest) (RoleBinding, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsIdPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsIdPatchExecute = append(mock.calls.ApiAccountsMgmtV1RoleBindingsIdPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsIdPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1RoleBindingsIdPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsIdPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsIdPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsIdPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RoleBindingsIdPatchRequest
	}
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsIdPatchExecute
	mock.lockApiAccountsMgmtV1RoleBindingsIdPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsPost calls ApiAccountsMgmtV1RoleBindingsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsPost(ctx context.Context) ApiApiAccountsMgmtV1RoleBindingsPostRequest {
	if mock.ApiAccountsMgmtV1RoleBindingsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsPost.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsPost = append(mock.calls.ApiAccountsMgmtV1RoleBindingsPost, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsPost.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsPostFunc(ctx)
}

// ApiAccountsMgmtV1RoleBindingsPostCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1RoleBindingsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsPost
	mock.lockApiAccountsMgmtV1RoleBindingsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RoleBindingsPostExecute calls ApiAccountsMgmtV1RoleBindingsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsPostExecute(r ApiApiAccountsMgmtV1RoleBindingsPostRequest) (RoleBinding, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RoleBindingsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RoleBindingsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RoleBindingsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RoleBindingsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RoleBindingsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RoleBindingsPostExecute = append(mock.calls.ApiAccountsMgmtV1RoleBindingsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1RoleBindingsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1RoleBindingsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1RoleBindingsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RoleBindingsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RoleBindingsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RoleBindingsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RoleBindingsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RoleBindingsPostRequest
	}
	mock.lockApiAccountsMgmtV1RoleBindingsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RoleBindingsPostExecute
	mock.lockApiAccountsMgmtV1RoleBindingsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RolesGet calls ApiAccountsMgmtV1RolesGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesGet(ctx context.Context) ApiApiAccountsMgmtV1RolesGetRequest {
	if mock.ApiAccountsMgmtV1RolesGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RolesGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RolesGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1RolesGet.Lock()
	mock.calls.ApiAccountsMgmtV1RolesGet = append(mock.calls.ApiAccountsMgmtV1RolesGet, callInfo)
	mock.lockApiAccountsMgmtV1RolesGet.Unlock()
	return mock.ApiAccountsMgmtV1RolesGetFunc(ctx)
}

// ApiAccountsMgmtV1RolesGetCalls gets all the calls that were made to ApiAccountsMgmtV1RolesGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RolesGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1RolesGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RolesGet
	mock.lockApiAccountsMgmtV1RolesGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RolesGetExecute calls ApiAccountsMgmtV1RolesGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesGetExecute(r ApiApiAccountsMgmtV1RolesGetRequest) (RoleList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RolesGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RolesGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RolesGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RolesGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RolesGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RolesGetExecute = append(mock.calls.ApiAccountsMgmtV1RolesGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RolesGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RolesGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RolesGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RolesGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RolesGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RolesGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RolesGetRequest
	}
	mock.lockApiAccountsMgmtV1RolesGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RolesGetExecute
	mock.lockApiAccountsMgmtV1RolesGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RolesIdGet calls ApiAccountsMgmtV1RolesIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1RolesIdGetRequest {
	if mock.ApiAccountsMgmtV1RolesIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RolesIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RolesIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1RolesIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1RolesIdGet = append(mock.calls.ApiAccountsMgmtV1RolesIdGet, callInfo)
	mock.lockApiAccountsMgmtV1RolesIdGet.Unlock()
	return mock.ApiAccountsMgmtV1RolesIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1RolesIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1RolesIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RolesIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1RolesIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RolesIdGet
	mock.lockApiAccountsMgmtV1RolesIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1RolesIdGetExecute calls ApiAccountsMgmtV1RolesIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesIdGetExecute(r ApiApiAccountsMgmtV1RolesIdGetRequest) (Role, *http.Response, error) {
	if mock.ApiAccountsMgmtV1RolesIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1RolesIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1RolesIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1RolesIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1RolesIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1RolesIdGetExecute = append(mock.calls.ApiAccountsMgmtV1RolesIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1RolesIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1RolesIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1RolesIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1RolesIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1RolesIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1RolesIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1RolesIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1RolesIdGetRequest
	}
	mock.lockApiAccountsMgmtV1RolesIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1RolesIdGetExecute
	mock.lockApiAccountsMgmtV1RolesIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkuRulesGet calls ApiAccountsMgmtV1SkuRulesGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesGet(ctx context.Context) ApiApiAccountsMgmtV1SkuRulesGetRequest {
	if mock.ApiAccountsMgmtV1SkuRulesGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkuRulesGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkuRulesGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1SkuRulesGet.Lock()
	mock.calls.ApiAccountsMgmtV1SkuRulesGet = append(mock.calls.ApiAccountsMgmtV1SkuRulesGet, callInfo)
	mock.lockApiAccountsMgmtV1SkuRulesGet.Unlock()
	return mock.ApiAccountsMgmtV1SkuRulesGetFunc(ctx)
}

// ApiAccountsMgmtV1SkuRulesGetCalls gets all the calls that were made to ApiAccountsMgmtV1SkuRulesGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkuRulesGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1SkuRulesGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkuRulesGet
	mock.lockApiAccountsMgmtV1SkuRulesGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkuRulesGetExecute calls ApiAccountsMgmtV1SkuRulesGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesGetExecute(r ApiApiAccountsMgmtV1SkuRulesGetRequest) (SkuRulesList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SkuRulesGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkuRulesGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkuRulesGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SkuRulesGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SkuRulesGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SkuRulesGetExecute = append(mock.calls.ApiAccountsMgmtV1SkuRulesGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SkuRulesGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SkuRulesGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SkuRulesGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SkuRulesGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkuRulesGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SkuRulesGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SkuRulesGetRequest
	}
	mock.lockApiAccountsMgmtV1SkuRulesGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkuRulesGetExecute
	mock.lockApiAccountsMgmtV1SkuRulesGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkuRulesIdGet calls ApiAccountsMgmtV1SkuRulesIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1SkuRulesIdGetRequest {
	if mock.ApiAccountsMgmtV1SkuRulesIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkuRulesIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkuRulesIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SkuRulesIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1SkuRulesIdGet = append(mock.calls.ApiAccountsMgmtV1SkuRulesIdGet, callInfo)
	mock.lockApiAccountsMgmtV1SkuRulesIdGet.Unlock()
	return mock.ApiAccountsMgmtV1SkuRulesIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1SkuRulesIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1SkuRulesIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkuRulesIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SkuRulesIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkuRulesIdGet
	mock.lockApiAccountsMgmtV1SkuRulesIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkuRulesIdGetExecute calls ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesIdGetExecute(r ApiApiAccountsMgmtV1SkuRulesIdGetRequest) (SkuRules, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkuRulesIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SkuRulesIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SkuRulesIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SkuRulesIdGetExecute = append(mock.calls.ApiAccountsMgmtV1SkuRulesIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SkuRulesIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SkuRulesIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SkuRulesIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SkuRulesIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkuRulesIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkuRulesIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SkuRulesIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SkuRulesIdGetRequest
	}
	mock.lockApiAccountsMgmtV1SkuRulesIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkuRulesIdGetExecute
	mock.lockApiAccountsMgmtV1SkuRulesIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkusGet calls ApiAccountsMgmtV1SkusGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusGet(ctx context.Context) ApiApiAccountsMgmtV1SkusGetRequest {
	if mock.ApiAccountsMgmtV1SkusGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkusGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkusGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1SkusGet.Lock()
	mock.calls.ApiAccountsMgmtV1SkusGet = append(mock.calls.ApiAccountsMgmtV1SkusGet, callInfo)
	mock.lockApiAccountsMgmtV1SkusGet.Unlock()
	return mock.ApiAccountsMgmtV1SkusGetFunc(ctx)
}

// ApiAccountsMgmtV1SkusGetCalls gets all the calls that were made to ApiAccountsMgmtV1SkusGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkusGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1SkusGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkusGet
	mock.lockApiAccountsMgmtV1SkusGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkusGetExecute calls ApiAccountsMgmtV1SkusGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusGetExecute(r ApiApiAccountsMgmtV1SkusGetRequest) (SkuList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SkusGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkusGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkusGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SkusGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SkusGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SkusGetExecute = append(mock.calls.ApiAccountsMgmtV1SkusGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SkusGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SkusGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SkusGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SkusGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkusGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SkusGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SkusGetRequest
	}
	mock.lockApiAccountsMgmtV1SkusGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkusGetExecute
	mock.lockApiAccountsMgmtV1SkusGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkusIdGet calls ApiAccountsMgmtV1SkusIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1SkusIdGetRequest {
	if mock.ApiAccountsMgmtV1SkusIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkusIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkusIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SkusIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1SkusIdGet = append(mock.calls.ApiAccountsMgmtV1SkusIdGet, callInfo)
	mock.lockApiAccountsMgmtV1SkusIdGet.Unlock()
	return mock.ApiAccountsMgmtV1SkusIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1SkusIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1SkusIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkusIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SkusIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkusIdGet
	mock.lockApiAccountsMgmtV1SkusIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SkusIdGetExecute calls ApiAccountsMgmtV1SkusIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusIdGetExecute(r ApiApiAccountsMgmtV1SkusIdGetRequest) (SKU, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SkusIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SkusIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SkusIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SkusIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SkusIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SkusIdGetExecute = append(mock.calls.ApiAccountsMgmtV1SkusIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SkusIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SkusIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SkusIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SkusIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SkusIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SkusIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SkusIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SkusIdGetRequest
	}
	mock.lockApiAccountsMgmtV1SkusIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SkusIdGetExecute
	mock.lockApiAccountsMgmtV1SkusIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsGet calls ApiAccountsMgmtV1SubscriptionsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsGet(ctx context.Context) ApiApiAccountsMgmtV1SubscriptionsGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsGetFunc(ctx)
}

// ApiAccountsMgmtV1SubscriptionsGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsGetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1SubscriptionsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsGet
	mock.lockApiAccountsMgmtV1SubscriptionsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsGetExecute calls ApiAccountsMgmtV1SubscriptionsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsGetExecute(r ApiApiAccountsMgmtV1SubscriptionsGetRequest) (SubscriptionList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdDelete calls ApiAccountsMgmtV1SubscriptionsIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdDelete(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdDelete = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdDeleteFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdDeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdDelete
	mock.lockApiAccountsMgmtV1SubscriptionsIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdDeleteExecute calls ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdDeleteExecute(r ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdDeleteExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdGet calls ApiAccountsMgmtV1SubscriptionsIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdGet(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdGetFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdGet
	mock.lockApiAccountsMgmtV1SubscriptionsIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdGetExecute calls ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdGetExecute(r ApiApiAccountsMgmtV1SubscriptionsIdGetRequest) (Subscription, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsGet calls ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsGet(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsGetFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsGet
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute calls ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest) (LabelList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete calls ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteFunc(ctx, id, key)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute calls ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet calls ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetFunc(ctx, id, key)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute calls ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch calls ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(ctx context.Context, id string, key string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchFunc(ctx, id, key)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute calls ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsKeyPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsPost calls ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsPost(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPost.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsPost = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsPost, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPost.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsPostFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsPostCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsPostCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsPost
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute calls ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute(r ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest) (Label, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdLabelsPostRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdLabelsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdNotifyPost calls ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdNotifyPost(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdNotifyPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPost.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdNotifyPost = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdNotifyPost, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPost.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdNotifyPostFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdNotifyPostCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdNotifyPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdNotifyPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdNotifyPostCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdNotifyPost
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute calls ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute(r ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdNotifyPostRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdNotifyPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdPatch calls ApiAccountsMgmtV1SubscriptionsIdPatchFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdPatch(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdPatchFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdPatchFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdPatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatch.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdPatch = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdPatch, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatch.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdPatchFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdPatchCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdPatch.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdPatchCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdPatchCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatch.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdPatch
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatch.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdPatchExecute calls ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdPatchExecute(r ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest) (Subscription, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdPatchExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatchExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdPatchExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdPatchExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatchExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdPatchExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdPatchExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdPatchExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdPatchExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdPatchExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdPatchRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatchExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdPatchExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdPatchExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet calls ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute calls ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute(r ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest) (ReservedResourceList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdReservedResourcesGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet calls ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet(ctx context.Context, id string) ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetFunc(ctx, id)
}

// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGet
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute calls ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute(r ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsIdSupportCasesGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsIdSupportCasesGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsPost calls ApiAccountsMgmtV1SubscriptionsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsPost(ctx context.Context) ApiApiAccountsMgmtV1SubscriptionsPostRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsPost.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsPost = append(mock.calls.ApiAccountsMgmtV1SubscriptionsPost, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsPost.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsPostFunc(ctx)
}

// ApiAccountsMgmtV1SubscriptionsPostCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1SubscriptionsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsPost
	mock.lockApiAccountsMgmtV1SubscriptionsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsPostExecute calls ApiAccountsMgmtV1SubscriptionsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsPostExecute(r ApiApiAccountsMgmtV1SubscriptionsPostRequest) (Subscription, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsPostExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsPostRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsPostExecute
	mock.lockApiAccountsMgmtV1SubscriptionsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete calls ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(ctx context.Context, subId string, accountId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		SubId     string
		AccountId string
	}{
		Ctx:       ctx,
		SubId:     subId,
		AccountId: accountId,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteFunc(ctx, subId, accountId)
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteCalls() []struct {
	Ctx       context.Context
	SubId     string
	AccountId string
} {
	var calls []struct {
		Ctx       context.Context
		SubId     string
		AccountId string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute calls ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet calls ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(ctx context.Context, subId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		SubId string
	}{
		Ctx:   ctx,
		SubId: subId,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetFunc(ctx, subId)
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetCalls() []struct {
	Ctx   context.Context
	SubId string
} {
	var calls []struct {
		Ctx   context.Context
		SubId string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute calls ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest) (AccountList, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost calls ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(ctx context.Context, subId string) ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		SubId string
	}{
		Ctx:   ctx,
		SubId: subId,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostFunc(ctx, subId)
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostCalls() []struct {
	Ctx   context.Context
	SubId string
} {
	var calls []struct {
		Ctx   context.Context
		SubId string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute calls ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute(r ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest) (Account, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet calls ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(ctx context.Context, subId string, reservedResourceId string) ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		SubId              string
		ReservedResourceId string
	}{
		Ctx:                ctx,
		SubId:              subId,
		ReservedResourceId: reservedResourceId,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetFunc(ctx, subId, reservedResourceId)
}

// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetCalls() []struct {
	Ctx                context.Context
	SubId              string
	ReservedResourceId string
} {
	var calls []struct {
		Ctx                context.Context
		SubId              string
		ReservedResourceId string
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute calls ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute(r ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest) (ReservedResource, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute = append(mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute, callInfo)
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute.Unlock()
	return mock.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteFunc(r)
}

// ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetRequest
	}
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute
	mock.lockApiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGetExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SupportCasesCaseIdDelete calls ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesCaseIdDelete(ctx context.Context, caseId string) ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest {
	if mock.ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SupportCasesCaseIdDelete was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		CaseId string
	}{
		Ctx:    ctx,
		CaseId: caseId,
	}
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDelete.Lock()
	mock.calls.ApiAccountsMgmtV1SupportCasesCaseIdDelete = append(mock.calls.ApiAccountsMgmtV1SupportCasesCaseIdDelete, callInfo)
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDelete.Unlock()
	return mock.ApiAccountsMgmtV1SupportCasesCaseIdDeleteFunc(ctx, caseId)
}

// ApiAccountsMgmtV1SupportCasesCaseIdDeleteCalls gets all the calls that were made to ApiAccountsMgmtV1SupportCasesCaseIdDelete.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SupportCasesCaseIdDeleteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesCaseIdDeleteCalls() []struct {
	Ctx    context.Context
	CaseId string
} {
	var calls []struct {
		Ctx    context.Context
		CaseId string
	}
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDelete.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SupportCasesCaseIdDelete
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDelete.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute calls ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute(r ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest) (*http.Response, error) {
	if mock.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute = append(mock.calls.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute, callInfo)
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute.Unlock()
	return mock.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteFunc(r)
}

// ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SupportCasesCaseIdDeleteRequest
	}
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute
	mock.lockApiAccountsMgmtV1SupportCasesCaseIdDeleteExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SupportCasesPost calls ApiAccountsMgmtV1SupportCasesPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesPost(ctx context.Context) ApiApiAccountsMgmtV1SupportCasesPostRequest {
	if mock.ApiAccountsMgmtV1SupportCasesPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SupportCasesPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SupportCasesPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1SupportCasesPost.Lock()
	mock.calls.ApiAccountsMgmtV1SupportCasesPost = append(mock.calls.ApiAccountsMgmtV1SupportCasesPost, callInfo)
	mock.lockApiAccountsMgmtV1SupportCasesPost.Unlock()
	return mock.ApiAccountsMgmtV1SupportCasesPostFunc(ctx)
}

// ApiAccountsMgmtV1SupportCasesPostCalls gets all the calls that were made to ApiAccountsMgmtV1SupportCasesPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SupportCasesPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1SupportCasesPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SupportCasesPost
	mock.lockApiAccountsMgmtV1SupportCasesPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1SupportCasesPostExecute calls ApiAccountsMgmtV1SupportCasesPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesPostExecute(r ApiApiAccountsMgmtV1SupportCasesPostRequest) (SupportCasesCreatedResponse, *http.Response, error) {
	if mock.ApiAccountsMgmtV1SupportCasesPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1SupportCasesPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1SupportCasesPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1SupportCasesPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1SupportCasesPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1SupportCasesPostExecute = append(mock.calls.ApiAccountsMgmtV1SupportCasesPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1SupportCasesPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1SupportCasesPostExecuteFunc(r)
}

// ApiAccountsMgmtV1SupportCasesPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1SupportCasesPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1SupportCasesPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1SupportCasesPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1SupportCasesPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1SupportCasesPostRequest
	}
	mock.lockApiAccountsMgmtV1SupportCasesPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1SupportCasesPostExecute
	mock.lockApiAccountsMgmtV1SupportCasesPostExecute.RUnlock()
	return calls
}

// ApiAccountsMgmtV1TokenAuthorizationPost calls ApiAccountsMgmtV1TokenAuthorizationPostFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1TokenAuthorizationPost(ctx context.Context) ApiApiAccountsMgmtV1TokenAuthorizationPostRequest {
	if mock.ApiAccountsMgmtV1TokenAuthorizationPostFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1TokenAuthorizationPostFunc: method is nil but DefaultApi.ApiAccountsMgmtV1TokenAuthorizationPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAccountsMgmtV1TokenAuthorizationPost.Lock()
	mock.calls.ApiAccountsMgmtV1TokenAuthorizationPost = append(mock.calls.ApiAccountsMgmtV1TokenAuthorizationPost, callInfo)
	mock.lockApiAccountsMgmtV1TokenAuthorizationPost.Unlock()
	return mock.ApiAccountsMgmtV1TokenAuthorizationPostFunc(ctx)
}

// ApiAccountsMgmtV1TokenAuthorizationPostCalls gets all the calls that were made to ApiAccountsMgmtV1TokenAuthorizationPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1TokenAuthorizationPostCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1TokenAuthorizationPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAccountsMgmtV1TokenAuthorizationPost.RLock()
	calls = mock.calls.ApiAccountsMgmtV1TokenAuthorizationPost
	mock.lockApiAccountsMgmtV1TokenAuthorizationPost.RUnlock()
	return calls
}

// ApiAccountsMgmtV1TokenAuthorizationPostExecute calls ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc.
func (mock *DefaultApiMock) ApiAccountsMgmtV1TokenAuthorizationPostExecute(r ApiApiAccountsMgmtV1TokenAuthorizationPostRequest) (TokenAuthorizationResponse, *http.Response, error) {
	if mock.ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc: method is nil but DefaultApi.ApiAccountsMgmtV1TokenAuthorizationPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAccountsMgmtV1TokenAuthorizationPostRequest
	}{
		R: r,
	}
	mock.lockApiAccountsMgmtV1TokenAuthorizationPostExecute.Lock()
	mock.calls.ApiAccountsMgmtV1TokenAuthorizationPostExecute = append(mock.calls.ApiAccountsMgmtV1TokenAuthorizationPostExecute, callInfo)
	mock.lockApiAccountsMgmtV1TokenAuthorizationPostExecute.Unlock()
	return mock.ApiAccountsMgmtV1TokenAuthorizationPostExecuteFunc(r)
}

// ApiAccountsMgmtV1TokenAuthorizationPostExecuteCalls gets all the calls that were made to ApiAccountsMgmtV1TokenAuthorizationPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAccountsMgmtV1TokenAuthorizationPostExecuteCalls())
func (mock *DefaultApiMock) ApiAccountsMgmtV1TokenAuthorizationPostExecuteCalls() []struct {
	R ApiApiAccountsMgmtV1TokenAuthorizationPostRequest
} {
	var calls []struct {
		R ApiApiAccountsMgmtV1TokenAuthorizationPostRequest
	}
	mock.lockApiAccountsMgmtV1TokenAuthorizationPostExecute.RLock()
	calls = mock.calls.ApiAccountsMgmtV1TokenAuthorizationPostExecute
	mock.lockApiAccountsMgmtV1TokenAuthorizationPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1AccessReviewPost calls ApiAuthorizationsV1AccessReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1AccessReviewPost(ctx context.Context) ApiApiAuthorizationsV1AccessReviewPostRequest {
	if mock.ApiAuthorizationsV1AccessReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1AccessReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1AccessReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1AccessReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1AccessReviewPost = append(mock.calls.ApiAuthorizationsV1AccessReviewPost, callInfo)
	mock.lockApiAuthorizationsV1AccessReviewPost.Unlock()
	return mock.ApiAuthorizationsV1AccessReviewPostFunc(ctx)
}

// ApiAuthorizationsV1AccessReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1AccessReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1AccessReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1AccessReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1AccessReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1AccessReviewPost
	mock.lockApiAuthorizationsV1AccessReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1AccessReviewPostExecute calls ApiAuthorizationsV1AccessReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1AccessReviewPostExecute(r ApiApiAuthorizationsV1AccessReviewPostRequest) (AccessReviewResponse, *http.Response, error) {
	if mock.ApiAuthorizationsV1AccessReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1AccessReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1AccessReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1AccessReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1AccessReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1AccessReviewPostExecute = append(mock.calls.ApiAuthorizationsV1AccessReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1AccessReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1AccessReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1AccessReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1AccessReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1AccessReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1AccessReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1AccessReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1AccessReviewPostRequest
	}
	mock.lockApiAuthorizationsV1AccessReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1AccessReviewPostExecute
	mock.lockApiAuthorizationsV1AccessReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1CapabilityReviewPost calls ApiAuthorizationsV1CapabilityReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1CapabilityReviewPost(ctx context.Context) ApiApiAuthorizationsV1CapabilityReviewPostRequest {
	if mock.ApiAuthorizationsV1CapabilityReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1CapabilityReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1CapabilityReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1CapabilityReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1CapabilityReviewPost = append(mock.calls.ApiAuthorizationsV1CapabilityReviewPost, callInfo)
	mock.lockApiAuthorizationsV1CapabilityReviewPost.Unlock()
	return mock.ApiAuthorizationsV1CapabilityReviewPostFunc(ctx)
}

// ApiAuthorizationsV1CapabilityReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1CapabilityReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1CapabilityReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1CapabilityReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1CapabilityReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1CapabilityReviewPost
	mock.lockApiAuthorizationsV1CapabilityReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1CapabilityReviewPostExecute calls ApiAuthorizationsV1CapabilityReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1CapabilityReviewPostExecute(r ApiApiAuthorizationsV1CapabilityReviewPostRequest) (CapabilityReview, *http.Response, error) {
	if mock.ApiAuthorizationsV1CapabilityReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1CapabilityReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1CapabilityReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1CapabilityReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1CapabilityReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1CapabilityReviewPostExecute = append(mock.calls.ApiAuthorizationsV1CapabilityReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1CapabilityReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1CapabilityReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1CapabilityReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1CapabilityReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1CapabilityReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1CapabilityReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1CapabilityReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1CapabilityReviewPostRequest
	}
	mock.lockApiAuthorizationsV1CapabilityReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1CapabilityReviewPostExecute
	mock.lockApiAuthorizationsV1CapabilityReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1ExportControlReviewPost calls ApiAuthorizationsV1ExportControlReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1ExportControlReviewPost(ctx context.Context) ApiApiAuthorizationsV1ExportControlReviewPostRequest {
	if mock.ApiAuthorizationsV1ExportControlReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1ExportControlReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1ExportControlReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1ExportControlReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1ExportControlReviewPost = append(mock.calls.ApiAuthorizationsV1ExportControlReviewPost, callInfo)
	mock.lockApiAuthorizationsV1ExportControlReviewPost.Unlock()
	return mock.ApiAuthorizationsV1ExportControlReviewPostFunc(ctx)
}

// ApiAuthorizationsV1ExportControlReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1ExportControlReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1ExportControlReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1ExportControlReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1ExportControlReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1ExportControlReviewPost
	mock.lockApiAuthorizationsV1ExportControlReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1ExportControlReviewPostExecute calls ApiAuthorizationsV1ExportControlReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1ExportControlReviewPostExecute(r ApiApiAuthorizationsV1ExportControlReviewPostRequest) (ExportControlReview, *http.Response, error) {
	if mock.ApiAuthorizationsV1ExportControlReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1ExportControlReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1ExportControlReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1ExportControlReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1ExportControlReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1ExportControlReviewPostExecute = append(mock.calls.ApiAuthorizationsV1ExportControlReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1ExportControlReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1ExportControlReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1ExportControlReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1ExportControlReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1ExportControlReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1ExportControlReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1ExportControlReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1ExportControlReviewPostRequest
	}
	mock.lockApiAuthorizationsV1ExportControlReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1ExportControlReviewPostExecute
	mock.lockApiAuthorizationsV1ExportControlReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1ResourceReviewPost calls ApiAuthorizationsV1ResourceReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1ResourceReviewPost(ctx context.Context) ApiApiAuthorizationsV1ResourceReviewPostRequest {
	if mock.ApiAuthorizationsV1ResourceReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1ResourceReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1ResourceReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1ResourceReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1ResourceReviewPost = append(mock.calls.ApiAuthorizationsV1ResourceReviewPost, callInfo)
	mock.lockApiAuthorizationsV1ResourceReviewPost.Unlock()
	return mock.ApiAuthorizationsV1ResourceReviewPostFunc(ctx)
}

// ApiAuthorizationsV1ResourceReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1ResourceReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1ResourceReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1ResourceReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1ResourceReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1ResourceReviewPost
	mock.lockApiAuthorizationsV1ResourceReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1ResourceReviewPostExecute calls ApiAuthorizationsV1ResourceReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1ResourceReviewPostExecute(r ApiApiAuthorizationsV1ResourceReviewPostRequest) (ResourceReview, *http.Response, error) {
	if mock.ApiAuthorizationsV1ResourceReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1ResourceReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1ResourceReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1ResourceReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1ResourceReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1ResourceReviewPostExecute = append(mock.calls.ApiAuthorizationsV1ResourceReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1ResourceReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1ResourceReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1ResourceReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1ResourceReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1ResourceReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1ResourceReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1ResourceReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1ResourceReviewPostRequest
	}
	mock.lockApiAuthorizationsV1ResourceReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1ResourceReviewPostExecute
	mock.lockApiAuthorizationsV1ResourceReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1SelfAccessReviewPost calls ApiAuthorizationsV1SelfAccessReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfAccessReviewPost(ctx context.Context) ApiApiAuthorizationsV1SelfAccessReviewPostRequest {
	if mock.ApiAuthorizationsV1SelfAccessReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1SelfAccessReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1SelfAccessReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1SelfAccessReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1SelfAccessReviewPost = append(mock.calls.ApiAuthorizationsV1SelfAccessReviewPost, callInfo)
	mock.lockApiAuthorizationsV1SelfAccessReviewPost.Unlock()
	return mock.ApiAuthorizationsV1SelfAccessReviewPostFunc(ctx)
}

// ApiAuthorizationsV1SelfAccessReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1SelfAccessReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1SelfAccessReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfAccessReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1SelfAccessReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1SelfAccessReviewPost
	mock.lockApiAuthorizationsV1SelfAccessReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1SelfAccessReviewPostExecute calls ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfAccessReviewPostExecute(r ApiApiAuthorizationsV1SelfAccessReviewPostRequest) (AccessReviewResponse, *http.Response, error) {
	if mock.ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1SelfAccessReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1SelfAccessReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1SelfAccessReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1SelfAccessReviewPostExecute = append(mock.calls.ApiAuthorizationsV1SelfAccessReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1SelfAccessReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1SelfAccessReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1SelfAccessReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1SelfAccessReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1SelfAccessReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfAccessReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1SelfAccessReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1SelfAccessReviewPostRequest
	}
	mock.lockApiAuthorizationsV1SelfAccessReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1SelfAccessReviewPostExecute
	mock.lockApiAuthorizationsV1SelfAccessReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1SelfResourceReviewPost calls ApiAuthorizationsV1SelfResourceReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfResourceReviewPost(ctx context.Context) ApiApiAuthorizationsV1SelfResourceReviewPostRequest {
	if mock.ApiAuthorizationsV1SelfResourceReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1SelfResourceReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1SelfResourceReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1SelfResourceReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1SelfResourceReviewPost = append(mock.calls.ApiAuthorizationsV1SelfResourceReviewPost, callInfo)
	mock.lockApiAuthorizationsV1SelfResourceReviewPost.Unlock()
	return mock.ApiAuthorizationsV1SelfResourceReviewPostFunc(ctx)
}

// ApiAuthorizationsV1SelfResourceReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1SelfResourceReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1SelfResourceReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfResourceReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1SelfResourceReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1SelfResourceReviewPost
	mock.lockApiAuthorizationsV1SelfResourceReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1SelfResourceReviewPostExecute calls ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfResourceReviewPostExecute(r ApiApiAuthorizationsV1SelfResourceReviewPostRequest) (SelfResourceReview, *http.Response, error) {
	if mock.ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1SelfResourceReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1SelfResourceReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1SelfResourceReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1SelfResourceReviewPostExecute = append(mock.calls.ApiAuthorizationsV1SelfResourceReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1SelfResourceReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1SelfResourceReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1SelfResourceReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1SelfResourceReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1SelfResourceReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfResourceReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1SelfResourceReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1SelfResourceReviewPostRequest
	}
	mock.lockApiAuthorizationsV1SelfResourceReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1SelfResourceReviewPostExecute
	mock.lockApiAuthorizationsV1SelfResourceReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1SelfTermsReviewPost calls ApiAuthorizationsV1SelfTermsReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfTermsReviewPost(ctx context.Context) ApiApiAuthorizationsV1SelfTermsReviewPostRequest {
	if mock.ApiAuthorizationsV1SelfTermsReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1SelfTermsReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1SelfTermsReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1SelfTermsReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1SelfTermsReviewPost = append(mock.calls.ApiAuthorizationsV1SelfTermsReviewPost, callInfo)
	mock.lockApiAuthorizationsV1SelfTermsReviewPost.Unlock()
	return mock.ApiAuthorizationsV1SelfTermsReviewPostFunc(ctx)
}

// ApiAuthorizationsV1SelfTermsReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1SelfTermsReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1SelfTermsReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfTermsReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1SelfTermsReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1SelfTermsReviewPost
	mock.lockApiAuthorizationsV1SelfTermsReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1SelfTermsReviewPostExecute calls ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfTermsReviewPostExecute(r ApiApiAuthorizationsV1SelfTermsReviewPostRequest) (TermsReviewResponse, *http.Response, error) {
	if mock.ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1SelfTermsReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1SelfTermsReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1SelfTermsReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1SelfTermsReviewPostExecute = append(mock.calls.ApiAuthorizationsV1SelfTermsReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1SelfTermsReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1SelfTermsReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1SelfTermsReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1SelfTermsReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1SelfTermsReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1SelfTermsReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1SelfTermsReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1SelfTermsReviewPostRequest
	}
	mock.lockApiAuthorizationsV1SelfTermsReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1SelfTermsReviewPostExecute
	mock.lockApiAuthorizationsV1SelfTermsReviewPostExecute.RUnlock()
	return calls
}

// ApiAuthorizationsV1TermsReviewPost calls ApiAuthorizationsV1TermsReviewPostFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1TermsReviewPost(ctx context.Context) ApiApiAuthorizationsV1TermsReviewPostRequest {
	if mock.ApiAuthorizationsV1TermsReviewPostFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1TermsReviewPostFunc: method is nil but DefaultApi.ApiAuthorizationsV1TermsReviewPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockApiAuthorizationsV1TermsReviewPost.Lock()
	mock.calls.ApiAuthorizationsV1TermsReviewPost = append(mock.calls.ApiAuthorizationsV1TermsReviewPost, callInfo)
	mock.lockApiAuthorizationsV1TermsReviewPost.Unlock()
	return mock.ApiAuthorizationsV1TermsReviewPostFunc(ctx)
}

// ApiAuthorizationsV1TermsReviewPostCalls gets all the calls that were made to ApiAuthorizationsV1TermsReviewPost.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1TermsReviewPostCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1TermsReviewPostCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockApiAuthorizationsV1TermsReviewPost.RLock()
	calls = mock.calls.ApiAuthorizationsV1TermsReviewPost
	mock.lockApiAuthorizationsV1TermsReviewPost.RUnlock()
	return calls
}

// ApiAuthorizationsV1TermsReviewPostExecute calls ApiAuthorizationsV1TermsReviewPostExecuteFunc.
func (mock *DefaultApiMock) ApiAuthorizationsV1TermsReviewPostExecute(r ApiApiAuthorizationsV1TermsReviewPostRequest) (TermsReviewResponse, *http.Response, error) {
	if mock.ApiAuthorizationsV1TermsReviewPostExecuteFunc == nil {
		panic("DefaultApiMock.ApiAuthorizationsV1TermsReviewPostExecuteFunc: method is nil but DefaultApi.ApiAuthorizationsV1TermsReviewPostExecute was just called")
	}
	callInfo := struct {
		R ApiApiAuthorizationsV1TermsReviewPostRequest
	}{
		R: r,
	}
	mock.lockApiAuthorizationsV1TermsReviewPostExecute.Lock()
	mock.calls.ApiAuthorizationsV1TermsReviewPostExecute = append(mock.calls.ApiAuthorizationsV1TermsReviewPostExecute, callInfo)
	mock.lockApiAuthorizationsV1TermsReviewPostExecute.Unlock()
	return mock.ApiAuthorizationsV1TermsReviewPostExecuteFunc(r)
}

// ApiAuthorizationsV1TermsReviewPostExecuteCalls gets all the calls that were made to ApiAuthorizationsV1TermsReviewPostExecute.
// Check the length with:
//     len(mockedDefaultApi.ApiAuthorizationsV1TermsReviewPostExecuteCalls())
func (mock *DefaultApiMock) ApiAuthorizationsV1TermsReviewPostExecuteCalls() []struct {
	R ApiApiAuthorizationsV1TermsReviewPostRequest
} {
	var calls []struct {
		R ApiApiAuthorizationsV1TermsReviewPostRequest
	}
	mock.lockApiAuthorizationsV1TermsReviewPostExecute.RLock()
	calls = mock.calls.ApiAuthorizationsV1TermsReviewPostExecute
	mock.lockApiAuthorizationsV1TermsReviewPostExecute.RUnlock()
	return calls
}
