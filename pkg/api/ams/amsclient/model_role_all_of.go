/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package amsclient

import (
	"encoding/json"
)

// RoleAllOf struct for RoleAllOf
type RoleAllOf struct {
	Name        *string       `json:"name,omitempty"`
	Permissions *[]Permission `json:"permissions,omitempty"`
}

// NewRoleAllOf instantiates a new RoleAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAllOf() *RoleAllOf {
	this := RoleAllOf{}
	return &this
}

// NewRoleAllOfWithDefaults instantiates a new RoleAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAllOfWithDefaults() *RoleAllOf {
	this := RoleAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleAllOf) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *RoleAllOf) GetPermissions() []Permission {
	if o == nil || o.Permissions == nil {
		var ret []Permission
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAllOf) GetPermissionsOk() (*[]Permission, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *RoleAllOf) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *RoleAllOf) SetPermissions(v []Permission) {
	o.Permissions = &v
}

func (o RoleAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableRoleAllOf struct {
	value *RoleAllOf
	isSet bool
}

func (v NullableRoleAllOf) Get() *RoleAllOf {
	return v.value
}

func (v *NullableRoleAllOf) Set(val *RoleAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAllOf(val *RoleAllOf) *NullableRoleAllOf {
	return &NullableRoleAllOf{value: val, isSet: true}
}

func (v NullableRoleAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
