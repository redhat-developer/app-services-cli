openapi: 3.0.0
info:
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Kafka Admon REST API
  version: 0.1.0
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8001
- description: localhost
  url: http://localhost:8000
paths:
  /topics:
    get:
      description: Returns a list of all of the available topics, or the list of topics
        that meet the users URL Query Parameters.
      operationId: getTopicsList
      parameters:
      - description: Maximum number of topics to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter to apply when returning the list of topics
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The page offset when returning  the limit of requested topics.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
          description: List of topics matching the users query paramters.
        "400":
          content:
            application/json: {}
          description: Unable to retreive topics.
        "401":
          content:
            application/json: {}
          description: Unauthorized, unable to retrive topics.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: List of topics
    post:
      description: Creates a new topic for Kafka.
      operationId: createTopic
      requestBody:
        content:
          application/json:
            examples:
              NewTopicInput:
                value:
                  name: my-topic
                  settings:
                    numPartitions: 3
                    replicationFactor: 4
                    config:
                    - key: min.insync.replicas
                      value: "1"
                    - key: max.message.bytes
                      value: "1050000"
            schema:
              $ref: '#/components/schemas/NewTopicInput'
        description: Topic to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic created successfully.
        "400":
          description: Unable to create topic.
        "401":
          description: Unauthorized, Unable to create topic.
        "409":
          description: Entry already exisits
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Creates a new topic
  /topics/{topicName}:
    delete:
      description: Deletes the topic with the specified name.
      operationId: deleteTopic
      parameters:
      - description: The topic name to delete.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Topic deleted successfully.
        "401":
          description: Unathorized, unable to delete topic.
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Deletes a  topic
    get:
      description: Topic
      operationId: getTopic
      parameters:
      - description: The topic name to retrieve.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Kakfa topic details.
        "401":
          description: Unauthorized, unable to retrieve topics.
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Retrieves the topic with the specified name.
    patch:
      description: updates the topic with the new data.
      operationId: updateTopic
      parameters:
      - description: The topic name which is its unique id.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic updated successfully.
        "400":
          description: Unable to update topic.
        "401":
          description: Unauthroized, unable to update topic.
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      summary: Updates the topic with the specified name.
  /metrics:
    get:
      operationId: metrics
      responses:
        "200":
          description: Metrics
      summary: Admin server metrics
  /groups:
    get:
      operationId: getGroupsList
      responses:
        "200":
          content:
            application/json: {}
          description: OK
  /groups/{groupName}:
    delete:
      operationId: deleteGroup
      parameters:
      - description: Consumer group identificator
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: OK
    get:
      operationId: getGroup
      parameters:
      - description: Consumer group identificator
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: OK
  /api:
    get:
      operationId: openApi
      responses:
        "200":
          content:
            application/json: {}
          description: OpenAPI spec
components:
  schemas:
    Topic:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        name: my-topic
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
        partitions:
        - id: 0
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 0
        - id: 1
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 1
      properties:
        name:
          description: The name of the topic.
          type: string
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
        partitions:
          description: Partitions for this topic.
          items:
            $ref: '#/components/schemas/Partition'
          type: array
      title: Root Type for NewTopicInput
      type: object
    Partition:
      description: Kafka topic partition
      example:
        id: 0
        replicas:
        - id: 0
        - id: 1
        isr:
        - id: 0
        - id: 1
        leader:
          id: 1
      properties:
        id:
          description: Uniquie id for the partition
          type: integer
        replicas:
          description: List of replicas for the partition
          items:
            $ref: '#/components/schemas/Node'
          type: array
        isr:
          description: List isync-replicas for this partition.
          items:
            $ref: '#/components/schemas/Node'
          type: array
        leader:
          description: Kafka server / broker.
          type: object
      required:
      - id
      type: object
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a
        topic.
      example:
        key: min.insync.replicas
        value: "1"
      properties:
        key:
          description: The key indicating what configuration entry you would like
            to set for the topic.
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          type: string
      type: object
    TopicsList:
      description: A list of topics.
      example:
        items:
        - name: my-topic
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
          partitions:
          - id: 0
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 1
        offset: 25
        limit: 90
        count: 94
      properties:
        offset:
          description: The page offset
          type: integer
        limit:
          description: number of entries per page
          type: integer
        count:
          description: Total number of topics
          type: integer
        items:
          description: List of topics
          items:
            $ref: '#/components/schemas/Topic'
          type: array
      required:
      - count
      - items
      - limit
      - offset
      type: object
    TopicSettings:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        numPartitions: 2
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
      properties:
        replicationFactor:
          description: Replication factor for this topic
          type: integer
        numPartitions:
          description: Number of partitions for this topic.
          type: integer
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
      title: Root Type for NewTopicInput
      type: object
    Node:
      description: Kafka server / broker.
      type: object
    NewTopicInput:
      description: Input object to create a new topic.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
      properties:
        name:
          description: The topic name, this value must be unique.
          type: string
        settings:
          $ref: '#/components/schemas/TopicSettings'
      required:
      - name
      type: object
