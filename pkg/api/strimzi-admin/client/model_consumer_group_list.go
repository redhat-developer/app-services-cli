/*
 * Kafka Admin REST API
 *
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strimziadminclient

import (
	"encoding/json"
)

// ConsumerGroupList A list of consumer groups
type ConsumerGroupList struct {
	// Consumer group list items
	Items []ConsumerGroup `json:"items"`
	// The total number of consumer groups.
	Count float32 `json:"count"`
	// The number of consumer groups per page.
	Limit float32 `json:"limit"`
	// The page offset
	Offset int32 `json:"offset"`
}

// NewConsumerGroupList instantiates a new ConsumerGroupList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerGroupList(items []ConsumerGroup, count float32, limit float32, offset int32) *ConsumerGroupList {
	this := ConsumerGroupList{}
	this.Items = items
	this.Count = count
	this.Limit = limit
	this.Offset = offset
	return &this
}

// NewConsumerGroupListWithDefaults instantiates a new ConsumerGroupList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerGroupListWithDefaults() *ConsumerGroupList {
	this := ConsumerGroupList{}
	return &this
}

// GetItems returns the Items field value
func (o *ConsumerGroupList) GetItems() []ConsumerGroup {
	if o == nil {
		var ret []ConsumerGroup
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroupList) GetItemsOk() (*[]ConsumerGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *ConsumerGroupList) SetItems(v []ConsumerGroup) {
	o.Items = v
}

// GetCount returns the Count field value
func (o *ConsumerGroupList) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroupList) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ConsumerGroupList) SetCount(v float32) {
	o.Count = v
}

// GetLimit returns the Limit field value
func (o *ConsumerGroupList) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroupList) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ConsumerGroupList) SetLimit(v float32) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *ConsumerGroupList) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *ConsumerGroupList) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *ConsumerGroupList) SetOffset(v int32) {
	o.Offset = v
}

func (o ConsumerGroupList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableConsumerGroupList struct {
	value *ConsumerGroupList
	isSet bool
}

func (v NullableConsumerGroupList) Get() *ConsumerGroupList {
	return v.value
}

func (v *NullableConsumerGroupList) Set(val *ConsumerGroupList) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerGroupList) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerGroupList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerGroupList(val *ConsumerGroupList) *NullableConsumerGroupList {
	return &NullableConsumerGroupList{value: val, isSet: true}
}

func (v NullableConsumerGroupList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerGroupList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
