/*
 * Strimzi Kubernetes REST API
 *
 * An API to provide k8s REST endpoints for query
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package strimziadminclient

import (
	"encoding/json"
)

// TopicSettings Kafka Topic (A feed where records are stored and published)
type TopicSettings struct {
	// The name of the topic.
	Name *string `json:"name,omitempty"`
	// Number of partitions for this topic.
	NumPartitions *int32 `json:"numPartitions,omitempty"`
	// Number of replications for the topic.
	ReplicationFactor *int32 `json:"replicationFactor,omitempty"`
	// Topic configuration entry.
	Config *[]ConfigEntry `json:"config,omitempty"`
}

// NewTopicSettings instantiates a new TopicSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicSettings() *TopicSettings {
	this := TopicSettings{}
	return &this
}

// NewTopicSettingsWithDefaults instantiates a new TopicSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicSettingsWithDefaults() *TopicSettings {
	this := TopicSettings{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TopicSettings) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicSettings) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TopicSettings) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TopicSettings) SetName(v string) {
	o.Name = &v
}

// GetNumPartitions returns the NumPartitions field value if set, zero value otherwise.
func (o *TopicSettings) GetNumPartitions() int32 {
	if o == nil || o.NumPartitions == nil {
		var ret int32
		return ret
	}
	return *o.NumPartitions
}

// GetNumPartitionsOk returns a tuple with the NumPartitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicSettings) GetNumPartitionsOk() (*int32, bool) {
	if o == nil || o.NumPartitions == nil {
		return nil, false
	}
	return o.NumPartitions, true
}

// HasNumPartitions returns a boolean if a field has been set.
func (o *TopicSettings) HasNumPartitions() bool {
	if o != nil && o.NumPartitions != nil {
		return true
	}

	return false
}

// SetNumPartitions gets a reference to the given int32 and assigns it to the NumPartitions field.
func (o *TopicSettings) SetNumPartitions(v int32) {
	o.NumPartitions = &v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *TopicSettings) GetReplicationFactor() int32 {
	if o == nil || o.ReplicationFactor == nil {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicSettings) GetReplicationFactorOk() (*int32, bool) {
	if o == nil || o.ReplicationFactor == nil {
		return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *TopicSettings) HasReplicationFactor() bool {
	if o != nil && o.ReplicationFactor != nil {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int32 and assigns it to the ReplicationFactor field.
func (o *TopicSettings) SetReplicationFactor(v int32) {
	o.ReplicationFactor = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *TopicSettings) GetConfig() []ConfigEntry {
	if o == nil || o.Config == nil {
		var ret []ConfigEntry
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicSettings) GetConfigOk() (*[]ConfigEntry, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *TopicSettings) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given []ConfigEntry and assigns it to the Config field.
func (o *TopicSettings) SetConfig(v []ConfigEntry) {
	o.Config = &v
}

func (o TopicSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NumPartitions != nil {
		toSerialize["numPartitions"] = o.NumPartitions
	}
	if o.ReplicationFactor != nil {
		toSerialize["replicationFactor"] = o.ReplicationFactor
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableTopicSettings struct {
	value *TopicSettings
	isSet bool
}

func (v NullableTopicSettings) Get() *TopicSettings {
	return v.value
}

func (v *NullableTopicSettings) Set(val *TopicSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicSettings(val *TopicSettings) *NullableTopicSettings {
	return &NullableTopicSettings{value: val, isSet: true}
}

func (v NullableTopicSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
