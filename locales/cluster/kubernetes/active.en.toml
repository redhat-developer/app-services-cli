[cluster.kubernetes.log.info.statusMessage]
one = '''
This command will link your cluster with Managed Services by creating custom resources and secrets.
In case of problems please execute "rhoas cluster status" to check if your cluster is properly configured
'''

[cluster.kubernetes.statusInfo]
one = '''
Connection Details:

Apache Kafka instance:  {{.InstanceName}}
Kubernetes Namespace:   {{.Namespace}}
Service Account Secret: {{.ServiceAccountSecretName}}
'''

[cluster.kubernetes.error.missingConfigError]
one = 'missing kubeconfig file'

[cluster.kubernetes.error.loadConfigError]
one = 'failed to load kubeconfig'

[cluster.kubernetes.connect.input.confirm.message]
one = 'Do you want to continue?'

[cluster.kubernetes.connect.log.debug.cancellingConnect]
one = 'Cancelling cluster connection'

[cluster.kubernetes.createKafkaCR.error.marshalError]
one = 'Could not marshal ManagedKafkaConnection to JSON object'

[cluster.kubernetes.createKafkaCR.log.info.customResourceCreated]
one = 'ManagedKafkaConnection resource "{{.Name}}" has been created'

[cluster.kubernetes.watchForManagedKafkaStatus.error.format]
one = '''Invalid result from operator. Status object is not compatible with expected result from CLI.
'''

[cluster.kubernetes.watchForManagedKafkaStatus.error.status]
one = '''Error when processing ManagedKafkaConnection: %v
'''

[cluster.kubernetes.watchForManagedKafkaStatus.log.info.success]
one = '''
ManagedKafkaConnection successfully installed on your cluster.
To view it execute:

oc get mkc -o=yaml -n {{.Namespace}} {{.Name}}

'''

[cluster.kubernetes.watchForManagedKafkaStatus.error.timeout]
one = '''Process of watching ManagedKafkaConnection timed out'''

[cluster.kubernetes.watchForManagedKafkaStatus.log.info.wait]
one = '''
Waiting for status from ManagedKafkaConnection resource.
Created ManagedKafkaConnection can be already injected to your application
by creating Service Binding (requires ServiceBindingOperator):

apiVersion: binding.operators.coreos.com/v1alpha1
kind: ServiceBinding
metadata:
  name: kafka-config
  namespace: {{.Namespace}}
spec:
  application:
    group: apps
    name: name-of-your-application
    resource: deployments
    version: v1
    
  bindAsFiles: true
  services:
  - group: {{.Group}}
    version: {{.Version}}
    kind: {{.Kind}}
    name: {{.Name}}

For OpenShift you can also create service binding by using odo cli or directly in the UI topology view.
'''

[cluster.kubernetes.serviceaccountsecret.error.createError]
one = 'Could not create Service Account secret'

[cluster.kubernetes.tokensecret.log.info.found]
one = 'Access token already exist on the specified namespace'

[cluster.kubernetes.createTokenSecret.log.info.createSuccess]
one = 'Token Secret "{{.Name}}" created successfully'

[cluster.kubernetes.createSASecret.log.info.createSuccess]
one = 'Service Account Secret "{{.Name}}" created successfully'

[cluster.kubernetes.createTokenSecret.log.info.createFailed]
one = 'Creation of the "{{.Name}}" secret failed:'

[cluster.kubernetes.createServiceAccount.error.createError]
one = 'could not create service account'

[cluster.kubernetes.serviceaccountsecret.log.info.exist]
one = 'Service account secret already exist.'

[cluster.kubernetes.checkIfConnectionExist.existError]
one = 'ManagedKafkaConnection already exist'
