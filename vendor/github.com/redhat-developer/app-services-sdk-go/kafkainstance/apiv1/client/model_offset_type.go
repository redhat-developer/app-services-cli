/*
 * Kafka Instance API
 *
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * API version: 0.12.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
	"fmt"
)

// OffsetType the model 'OffsetType'
type OffsetType string

// List of OffsetType
const (
	OFFSETTYPE_TIMESTAMP OffsetType = "timestamp"
	OFFSETTYPE_ABSOLUTE OffsetType = "absolute"
	OFFSETTYPE_LATEST OffsetType = "latest"
	OFFSETTYPE_EARLIEST OffsetType = "earliest"
)

var allowedOffsetTypeEnumValues = []OffsetType{
	"timestamp",
	"absolute",
	"latest",
	"earliest",
}

func (v *OffsetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OffsetType(value)
	for _, existing := range allowedOffsetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OffsetType", value)
}

// NewOffsetTypeFromValue returns a pointer to a valid OffsetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOffsetTypeFromValue(v string) (*OffsetType, error) {
	ev := OffsetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OffsetType: valid values are %v", v, allowedOffsetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OffsetType) IsValid() bool {
	for _, existing := range allowedOffsetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OffsetType value
func (v OffsetType) Ptr() *OffsetType {
	return &v
}

type NullableOffsetType struct {
	value *OffsetType
	isSet bool
}

func (v NullableOffsetType) Get() *OffsetType {
	return v.value
}

func (v *NullableOffsetType) Set(val *OffsetType) {
	v.value = val
	v.isSet = true
}

func (v NullableOffsetType) IsSet() bool {
	return v.isSet
}

func (v *NullableOffsetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffsetType(val *OffsetType) *NullableOffsetType {
	return &NullableOffsetType{value: val, isSet: true}
}

func (v NullableOffsetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffsetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

