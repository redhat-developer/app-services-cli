/*
 * Kafka Instance API
 *
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * API version: 0.12.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
	"fmt"
)

// AclBindingOrderKey the model 'AclBindingOrderKey'
type AclBindingOrderKey string

// List of AclBindingOrderKey
const (
	ACLBINDINGORDERKEY_RESOURCE_TYPE AclBindingOrderKey = "resourceType"
	ACLBINDINGORDERKEY_RESOURCE_NAME AclBindingOrderKey = "resourceName"
	ACLBINDINGORDERKEY_PATTERN_TYPE AclBindingOrderKey = "patternType"
	ACLBINDINGORDERKEY_PRINCIPAL AclBindingOrderKey = "principal"
	ACLBINDINGORDERKEY_OPERATION AclBindingOrderKey = "operation"
	ACLBINDINGORDERKEY_PERMISSION AclBindingOrderKey = "permission"
)

var allowedAclBindingOrderKeyEnumValues = []AclBindingOrderKey{
	"resourceType",
	"resourceName",
	"patternType",
	"principal",
	"operation",
	"permission",
}

func (v *AclBindingOrderKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AclBindingOrderKey(value)
	for _, existing := range allowedAclBindingOrderKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AclBindingOrderKey", value)
}

// NewAclBindingOrderKeyFromValue returns a pointer to a valid AclBindingOrderKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAclBindingOrderKeyFromValue(v string) (*AclBindingOrderKey, error) {
	ev := AclBindingOrderKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AclBindingOrderKey: valid values are %v", v, allowedAclBindingOrderKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AclBindingOrderKey) IsValid() bool {
	for _, existing := range allowedAclBindingOrderKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AclBindingOrderKey value
func (v AclBindingOrderKey) Ptr() *AclBindingOrderKey {
	return &v
}

type NullableAclBindingOrderKey struct {
	value *AclBindingOrderKey
	isSet bool
}

func (v NullableAclBindingOrderKey) Get() *AclBindingOrderKey {
	return v.value
}

func (v *NullableAclBindingOrderKey) Set(val *AclBindingOrderKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAclBindingOrderKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAclBindingOrderKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclBindingOrderKey(val *AclBindingOrderKey) *NullableAclBindingOrderKey {
	return &NullableAclBindingOrderKey{value: val, isSet: true}
}

func (v NullableAclBindingOrderKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclBindingOrderKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

