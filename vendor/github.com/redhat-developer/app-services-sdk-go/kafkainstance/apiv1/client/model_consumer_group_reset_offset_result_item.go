/*
 * Kafka Instance API
 *
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * API version: 0.12.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// ConsumerGroupResetOffsetResultItem struct for ConsumerGroupResetOffsetResultItem
type ConsumerGroupResetOffsetResultItem struct {
	Topic *string `json:"topic,omitempty"`
	Partition *int32 `json:"partition,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
}

// NewConsumerGroupResetOffsetResultItem instantiates a new ConsumerGroupResetOffsetResultItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerGroupResetOffsetResultItem() *ConsumerGroupResetOffsetResultItem {
	this := ConsumerGroupResetOffsetResultItem{}
	return &this
}

// NewConsumerGroupResetOffsetResultItemWithDefaults instantiates a new ConsumerGroupResetOffsetResultItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerGroupResetOffsetResultItemWithDefaults() *ConsumerGroupResetOffsetResultItem {
	this := ConsumerGroupResetOffsetResultItem{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ConsumerGroupResetOffsetResultItem) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResultItem) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ConsumerGroupResetOffsetResultItem) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *ConsumerGroupResetOffsetResultItem) SetTopic(v string) {
	o.Topic = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *ConsumerGroupResetOffsetResultItem) GetPartition() int32 {
	if o == nil || o.Partition == nil {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResultItem) GetPartitionOk() (*int32, bool) {
	if o == nil || o.Partition == nil {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *ConsumerGroupResetOffsetResultItem) HasPartition() bool {
	if o != nil && o.Partition != nil {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *ConsumerGroupResetOffsetResultItem) SetPartition(v int32) {
	o.Partition = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ConsumerGroupResetOffsetResultItem) GetOffset() int64 {
	if o == nil || o.Offset == nil {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupResetOffsetResultItem) GetOffsetOk() (*int64, bool) {
	if o == nil || o.Offset == nil {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ConsumerGroupResetOffsetResultItem) HasOffset() bool {
	if o != nil && o.Offset != nil {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ConsumerGroupResetOffsetResultItem) SetOffset(v int64) {
	o.Offset = &v
}

func (o ConsumerGroupResetOffsetResultItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.Partition != nil {
		toSerialize["partition"] = o.Partition
	}
	if o.Offset != nil {
		toSerialize["offset"] = o.Offset
	}
	return json.Marshal(toSerialize)
}

type NullableConsumerGroupResetOffsetResultItem struct {
	value *ConsumerGroupResetOffsetResultItem
	isSet bool
}

func (v NullableConsumerGroupResetOffsetResultItem) Get() *ConsumerGroupResetOffsetResultItem {
	return v.value
}

func (v *NullableConsumerGroupResetOffsetResultItem) Set(val *ConsumerGroupResetOffsetResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerGroupResetOffsetResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerGroupResetOffsetResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerGroupResetOffsetResultItem(val *ConsumerGroupResetOffsetResultItem) *NullableConsumerGroupResetOffsetResultItem {
	return &NullableConsumerGroupResetOffsetResultItem{value: val, isSet: true}
}

func (v NullableConsumerGroupResetOffsetResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerGroupResetOffsetResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


