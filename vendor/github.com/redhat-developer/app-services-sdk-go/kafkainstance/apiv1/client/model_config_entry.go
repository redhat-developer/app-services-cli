/*
 * Kafka Instance API
 *
 * API for interacting with Kafka Instance. Includes Produce, Consume and Admin APIs
 *
 * API version: 0.12.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kafkainstanceclient

import (
	"encoding/json"
)

// ConfigEntry Key value pair indicating possible configuration options for a topic.
type ConfigEntry struct {
	// The key indicating what configuration entry you would like to set for the topic.
	Key string `json:"key"`
	// Value to indicate the setting on the topic configuration entry.
	Value string `json:"value"`
}

// NewConfigEntry instantiates a new ConfigEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigEntry(key string, value string) *ConfigEntry {
	this := ConfigEntry{}
	this.Key = key
	this.Value = value
	return &this
}

// NewConfigEntryWithDefaults instantiates a new ConfigEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigEntryWithDefaults() *ConfigEntry {
	this := ConfigEntry{}
	return &this
}

// GetKey returns the Key field value
func (o *ConfigEntry) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConfigEntry) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConfigEntry) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ConfigEntry) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConfigEntry) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ConfigEntry) SetValue(v string) {
	o.Value = v
}

func (o ConfigEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableConfigEntry struct {
	value *ConfigEntry
	isSet bool
}

func (v NullableConfigEntry) Get() *ConfigEntry {
	return v.value
}

func (v *NullableConfigEntry) Set(val *ConfigEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigEntry(val *ConfigEntry) *NullableConfigEntry {
	return &NullableConfigEntry{value: val, isSet: true}
}

func (v NullableConfigEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


