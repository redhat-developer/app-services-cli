/*
 * Service Accounts API Documentation
 *
 * This is the API documentation for Service Accounts
 *
 * API version: 5.0.19
 * Contact: it-user-team-list@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serviceaccountsclient

import (
	"encoding/json"
)

// ValidationExceptionData struct for ValidationExceptionData
type ValidationExceptionData struct {
	Fields *map[string]string `json:"fields,omitempty"`
	Error *string `json:"error,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
}

// NewValidationExceptionData instantiates a new ValidationExceptionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationExceptionData() *ValidationExceptionData {
	this := ValidationExceptionData{}
	return &this
}

// NewValidationExceptionDataWithDefaults instantiates a new ValidationExceptionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationExceptionDataWithDefaults() *ValidationExceptionData {
	this := ValidationExceptionData{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ValidationExceptionData) GetFields() map[string]string {
	if o == nil || o.Fields == nil {
		var ret map[string]string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationExceptionData) GetFieldsOk() (*map[string]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ValidationExceptionData) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]string and assigns it to the Fields field.
func (o *ValidationExceptionData) SetFields(v map[string]string) {
	o.Fields = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ValidationExceptionData) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationExceptionData) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ValidationExceptionData) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ValidationExceptionData) SetError(v string) {
	o.Error = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *ValidationExceptionData) GetErrorDescription() string {
	if o == nil || o.ErrorDescription == nil {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationExceptionData) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || o.ErrorDescription == nil {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *ValidationExceptionData) HasErrorDescription() bool {
	if o != nil && o.ErrorDescription != nil {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *ValidationExceptionData) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

func (o ValidationExceptionData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ErrorDescription != nil {
		toSerialize["error_description"] = o.ErrorDescription
	}
	return json.Marshal(toSerialize)
}

type NullableValidationExceptionData struct {
	value *ValidationExceptionData
	isSet bool
}

func (v NullableValidationExceptionData) Get() *ValidationExceptionData {
	return v.value
}

func (v *NullableValidationExceptionData) Set(val *ValidationExceptionData) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationExceptionData) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationExceptionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationExceptionData(val *ValidationExceptionData) *NullableValidationExceptionData {
	return &NullableValidationExceptionData{value: val, isSet: true}
}

func (v NullableValidationExceptionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationExceptionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


