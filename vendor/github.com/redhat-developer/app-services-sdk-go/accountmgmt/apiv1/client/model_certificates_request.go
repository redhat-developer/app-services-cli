/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
)

// CertificatesRequest struct for CertificatesRequest
type CertificatesRequest struct {
	Arch *string `json:"arch,omitempty"`
	Type string `json:"type"`
}

// NewCertificatesRequest instantiates a new CertificatesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesRequest(type_ string) *CertificatesRequest {
	this := CertificatesRequest{}
	this.Type = type_
	return &this
}

// NewCertificatesRequestWithDefaults instantiates a new CertificatesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesRequestWithDefaults() *CertificatesRequest {
	this := CertificatesRequest{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CertificatesRequest) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesRequest) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CertificatesRequest) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CertificatesRequest) SetArch(v string) {
	o.Arch = &v
}

// GetType returns the Type field value
func (o *CertificatesRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CertificatesRequest) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CertificatesRequest) SetType(v string) {
	o.Type = v
}

func (o CertificatesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCertificatesRequest struct {
	value *CertificatesRequest
	isSet bool
}

func (v NullableCertificatesRequest) Get() *CertificatesRequest {
	return v.value
}

func (v *NullableCertificatesRequest) Set(val *CertificatesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesRequest(val *CertificatesRequest) *NullableCertificatesRequest {
	return &NullableCertificatesRequest{value: val, isSet: true}
}

func (v NullableCertificatesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


