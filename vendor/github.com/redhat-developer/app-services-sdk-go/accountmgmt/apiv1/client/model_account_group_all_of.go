/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
	"time"
)

// AccountGroupAllOf struct for AccountGroupAllOf
type AccountGroupAllOf struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Description string `json:"description"`
	ManagedBy string `json:"managed_by"`
	Name string `json:"name"`
	OrganizationId string `json:"organization_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewAccountGroupAllOf instantiates a new AccountGroupAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountGroupAllOf(description string, managedBy string, name string, organizationId string) *AccountGroupAllOf {
	this := AccountGroupAllOf{}
	this.Description = description
	this.ManagedBy = managedBy
	this.Name = name
	this.OrganizationId = organizationId
	return &this
}

// NewAccountGroupAllOfWithDefaults instantiates a new AccountGroupAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountGroupAllOfWithDefaults() *AccountGroupAllOf {
	this := AccountGroupAllOf{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccountGroupAllOf) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccountGroupAllOf) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AccountGroupAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value
func (o *AccountGroupAllOf) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AccountGroupAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AccountGroupAllOf) SetDescription(v string) {
	o.Description = v
}

// GetManagedBy returns the ManagedBy field value
func (o *AccountGroupAllOf) GetManagedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagedBy
}

// GetManagedByOk returns a tuple with the ManagedBy field value
// and a boolean to check if the value has been set.
func (o *AccountGroupAllOf) GetManagedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ManagedBy, true
}

// SetManagedBy sets field value
func (o *AccountGroupAllOf) SetManagedBy(v string) {
	o.ManagedBy = v
}

// GetName returns the Name field value
func (o *AccountGroupAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AccountGroupAllOf) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AccountGroupAllOf) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *AccountGroupAllOf) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *AccountGroupAllOf) GetOrganizationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *AccountGroupAllOf) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AccountGroupAllOf) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountGroupAllOf) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AccountGroupAllOf) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AccountGroupAllOf) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o AccountGroupAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["managed_by"] = o.ManagedBy
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableAccountGroupAllOf struct {
	value *AccountGroupAllOf
	isSet bool
}

func (v NullableAccountGroupAllOf) Get() *AccountGroupAllOf {
	return v.value
}

func (v *NullableAccountGroupAllOf) Set(val *AccountGroupAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountGroupAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountGroupAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountGroupAllOf(val *AccountGroupAllOf) *NullableAccountGroupAllOf {
	return &NullableAccountGroupAllOf{value: val, isSet: true}
}

func (v NullableAccountGroupAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountGroupAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


