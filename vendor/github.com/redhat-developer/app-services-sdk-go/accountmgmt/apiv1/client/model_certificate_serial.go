/*
 * Account Management Service API
 *
 * Manage user subscriptions and clusters
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package accountmgmtclient

import (
	"encoding/json"
	"time"
)

// CertificateSerial struct for CertificateSerial
type CertificateSerial struct {
	Created time.Time `json:"created"`
	Expiration time.Time `json:"expiration"`
	Id int64 `json:"id"`
	Serial int64 `json:"serial"`
	Updated time.Time `json:"updated"`
}

// NewCertificateSerial instantiates a new CertificateSerial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateSerial(created time.Time, expiration time.Time, id int64, serial int64, updated time.Time) *CertificateSerial {
	this := CertificateSerial{}
	this.Created = created
	this.Expiration = expiration
	this.Id = id
	this.Serial = serial
	this.Updated = updated
	return &this
}

// NewCertificateSerialWithDefaults instantiates a new CertificateSerial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateSerialWithDefaults() *CertificateSerial {
	this := CertificateSerial{}
	return &this
}

// GetCreated returns the Created field value
func (o *CertificateSerial) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *CertificateSerial) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *CertificateSerial) SetCreated(v time.Time) {
	o.Created = v
}

// GetExpiration returns the Expiration field value
func (o *CertificateSerial) GetExpiration() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value
// and a boolean to check if the value has been set.
func (o *CertificateSerial) GetExpirationOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Expiration, true
}

// SetExpiration sets field value
func (o *CertificateSerial) SetExpiration(v time.Time) {
	o.Expiration = v
}

// GetId returns the Id field value
func (o *CertificateSerial) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CertificateSerial) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CertificateSerial) SetId(v int64) {
	o.Id = v
}

// GetSerial returns the Serial field value
func (o *CertificateSerial) GetSerial() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *CertificateSerial) GetSerialOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *CertificateSerial) SetSerial(v int64) {
	o.Serial = v
}

// GetUpdated returns the Updated field value
func (o *CertificateSerial) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *CertificateSerial) GetUpdatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *CertificateSerial) SetUpdated(v time.Time) {
	o.Updated = v
}

func (o CertificateSerial) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["expiration"] = o.Expiration
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["serial"] = o.Serial
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateSerial struct {
	value *CertificateSerial
	isSet bool
}

func (v NullableCertificateSerial) Get() *CertificateSerial {
	return v.value
}

func (v *NullableCertificateSerial) Set(val *CertificateSerial) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateSerial) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateSerial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateSerial(val *CertificateSerial) *NullableCertificateSerial {
	return &NullableCertificateSerial{value: val, isSet: true}
}

func (v NullableCertificateSerial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateSerial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


