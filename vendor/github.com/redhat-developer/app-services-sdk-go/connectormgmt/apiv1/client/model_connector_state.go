/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
	"fmt"
)

// ConnectorState the model 'ConnectorState'
type ConnectorState string

// List of ConnectorState
const (
	CONNECTORSTATE_ASSIGNING ConnectorState = "assigning"
	CONNECTORSTATE_ASSIGNED ConnectorState = "assigned"
	CONNECTORSTATE_UPDATING ConnectorState = "updating"
	CONNECTORSTATE_READY ConnectorState = "ready"
	CONNECTORSTATE_STOPPED ConnectorState = "stopped"
	CONNECTORSTATE_FAILED ConnectorState = "failed"
	CONNECTORSTATE_DELETING ConnectorState = "deleting"
	CONNECTORSTATE_DELETED ConnectorState = "deleted"
	CONNECTORSTATE_PROVISIONING ConnectorState = "provisioning"
	CONNECTORSTATE_DEPROVISIONING ConnectorState = "deprovisioning"
)

var allowedConnectorStateEnumValues = []ConnectorState{
	"assigning",
	"assigned",
	"updating",
	"ready",
	"stopped",
	"failed",
	"deleting",
	"deleted",
	"provisioning",
	"deprovisioning",
}

func (v *ConnectorState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorState(value)
	for _, existing := range allowedConnectorStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorState", value)
}

// NewConnectorStateFromValue returns a pointer to a valid ConnectorState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorStateFromValue(v string) (*ConnectorState, error) {
	ev := ConnectorState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorState: valid values are %v", v, allowedConnectorStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorState) IsValid() bool {
	for _, existing := range allowedConnectorStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorState value
func (v ConnectorState) Ptr() *ConnectorState {
	return &v
}

type NullableConnectorState struct {
	value *ConnectorState
	isSet bool
}

func (v NullableConnectorState) Get() *ConnectorState {
	return v.value
}

func (v *NullableConnectorState) Set(val *ConnectorState) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorState) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorState(val *ConnectorState) *NullableConnectorState {
	return &NullableConnectorState{value: val, isSet: true}
}

func (v NullableConnectorState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

