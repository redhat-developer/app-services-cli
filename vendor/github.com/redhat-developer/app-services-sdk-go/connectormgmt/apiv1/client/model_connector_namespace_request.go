/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorNamespaceRequest A connector namespace create request
type ConnectorNamespaceRequest struct {
	// Namespace name must match pattern `^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$`, or it may be empty to be auto-generated.
	Name string `json:"name"`
	// Name-value string annotations for resource
	Annotations *map[string]string `json:"annotations,omitempty"`
	ClusterId string `json:"cluster_id"`
	Kind ConnectorNamespaceTenantKind `json:"kind"`
}

// NewConnectorNamespaceRequest instantiates a new ConnectorNamespaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorNamespaceRequest(name string, clusterId string, kind ConnectorNamespaceTenantKind) *ConnectorNamespaceRequest {
	this := ConnectorNamespaceRequest{}
	this.Name = name
	this.ClusterId = clusterId
	this.Kind = kind
	return &this
}

// NewConnectorNamespaceRequestWithDefaults instantiates a new ConnectorNamespaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorNamespaceRequestWithDefaults() *ConnectorNamespaceRequest {
	this := ConnectorNamespaceRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectorNamespaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectorNamespaceRequest) SetName(v string) {
	o.Name = v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ConnectorNamespaceRequest) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceRequest) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ConnectorNamespaceRequest) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *ConnectorNamespaceRequest) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetClusterId returns the ClusterId field value
func (o *ConnectorNamespaceRequest) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceRequest) GetClusterIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ConnectorNamespaceRequest) SetClusterId(v string) {
	o.ClusterId = v
}

// GetKind returns the Kind field value
func (o *ConnectorNamespaceRequest) GetKind() ConnectorNamespaceTenantKind {
	if o == nil {
		var ret ConnectorNamespaceTenantKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceRequest) GetKindOk() (*ConnectorNamespaceTenantKind, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ConnectorNamespaceRequest) SetKind(v ConnectorNamespaceTenantKind) {
	o.Kind = v
}

func (o ConnectorNamespaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorNamespaceRequest struct {
	value *ConnectorNamespaceRequest
	isSet bool
}

func (v NullableConnectorNamespaceRequest) Get() *ConnectorNamespaceRequest {
	return v.value
}

func (v *NullableConnectorNamespaceRequest) Set(val *ConnectorNamespaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorNamespaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorNamespaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorNamespaceRequest(val *ConnectorNamespaceRequest) *NullableConnectorNamespaceRequest {
	return &NullableConnectorNamespaceRequest{value: val, isSet: true}
}

func (v NullableConnectorNamespaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorNamespaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


