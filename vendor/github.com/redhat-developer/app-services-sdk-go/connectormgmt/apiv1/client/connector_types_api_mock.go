// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package connectormgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ConnectorTypesApiMock does implement ConnectorTypesApi.
// If this is not the case, regenerate this file with moq.
var _ ConnectorTypesApi = &ConnectorTypesApiMock{}

// ConnectorTypesApiMock is a mock implementation of ConnectorTypesApi.
//
// 	func TestSomethingThatUsesConnectorTypesApi(t *testing.T) {
//
// 		// make and configure a mocked ConnectorTypesApi
// 		mockedConnectorTypesApi := &ConnectorTypesApiMock{
// 			GetConnectorTypeByIDFunc: func(ctx _context.Context, connectorTypeId string) ApiGetConnectorTypeByIDRequest {
// 				panic("mock out the GetConnectorTypeByID method")
// 			},
// 			GetConnectorTypeByIDExecuteFunc: func(r ApiGetConnectorTypeByIDRequest) (ConnectorType, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorTypeByIDExecute method")
// 			},
// 			GetConnectorTypesFunc: func(ctx _context.Context) ApiGetConnectorTypesRequest {
// 				panic("mock out the GetConnectorTypes method")
// 			},
// 			GetConnectorTypesExecuteFunc: func(r ApiGetConnectorTypesRequest) (ConnectorTypeList, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorTypesExecute method")
// 			},
// 		}
//
// 		// use mockedConnectorTypesApi in code that requires ConnectorTypesApi
// 		// and then make assertions.
//
// 	}
type ConnectorTypesApiMock struct {
	// GetConnectorTypeByIDFunc mocks the GetConnectorTypeByID method.
	GetConnectorTypeByIDFunc func(ctx _context.Context, connectorTypeId string) ApiGetConnectorTypeByIDRequest

	// GetConnectorTypeByIDExecuteFunc mocks the GetConnectorTypeByIDExecute method.
	GetConnectorTypeByIDExecuteFunc func(r ApiGetConnectorTypeByIDRequest) (ConnectorType, *_nethttp.Response, error)

	// GetConnectorTypesFunc mocks the GetConnectorTypes method.
	GetConnectorTypesFunc func(ctx _context.Context) ApiGetConnectorTypesRequest

	// GetConnectorTypesExecuteFunc mocks the GetConnectorTypesExecute method.
	GetConnectorTypesExecuteFunc func(r ApiGetConnectorTypesRequest) (ConnectorTypeList, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetConnectorTypeByID holds details about calls to the GetConnectorTypeByID method.
		GetConnectorTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorTypeId is the connectorTypeId argument value.
			ConnectorTypeId string
		}
		// GetConnectorTypeByIDExecute holds details about calls to the GetConnectorTypeByIDExecute method.
		GetConnectorTypeByIDExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorTypeByIDRequest
		}
		// GetConnectorTypes holds details about calls to the GetConnectorTypes method.
		GetConnectorTypes []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// GetConnectorTypesExecute holds details about calls to the GetConnectorTypesExecute method.
		GetConnectorTypesExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorTypesRequest
		}
	}
	lockGetConnectorTypeByID        sync.RWMutex
	lockGetConnectorTypeByIDExecute sync.RWMutex
	lockGetConnectorTypes           sync.RWMutex
	lockGetConnectorTypesExecute    sync.RWMutex
}

// GetConnectorTypeByID calls GetConnectorTypeByIDFunc.
func (mock *ConnectorTypesApiMock) GetConnectorTypeByID(ctx _context.Context, connectorTypeId string) ApiGetConnectorTypeByIDRequest {
	if mock.GetConnectorTypeByIDFunc == nil {
		panic("ConnectorTypesApiMock.GetConnectorTypeByIDFunc: method is nil but ConnectorTypesApi.GetConnectorTypeByID was just called")
	}
	callInfo := struct {
		Ctx             _context.Context
		ConnectorTypeId string
	}{
		Ctx:             ctx,
		ConnectorTypeId: connectorTypeId,
	}
	mock.lockGetConnectorTypeByID.Lock()
	mock.calls.GetConnectorTypeByID = append(mock.calls.GetConnectorTypeByID, callInfo)
	mock.lockGetConnectorTypeByID.Unlock()
	return mock.GetConnectorTypeByIDFunc(ctx, connectorTypeId)
}

// GetConnectorTypeByIDCalls gets all the calls that were made to GetConnectorTypeByID.
// Check the length with:
//     len(mockedConnectorTypesApi.GetConnectorTypeByIDCalls())
func (mock *ConnectorTypesApiMock) GetConnectorTypeByIDCalls() []struct {
	Ctx             _context.Context
	ConnectorTypeId string
} {
	var calls []struct {
		Ctx             _context.Context
		ConnectorTypeId string
	}
	mock.lockGetConnectorTypeByID.RLock()
	calls = mock.calls.GetConnectorTypeByID
	mock.lockGetConnectorTypeByID.RUnlock()
	return calls
}

// GetConnectorTypeByIDExecute calls GetConnectorTypeByIDExecuteFunc.
func (mock *ConnectorTypesApiMock) GetConnectorTypeByIDExecute(r ApiGetConnectorTypeByIDRequest) (ConnectorType, *_nethttp.Response, error) {
	if mock.GetConnectorTypeByIDExecuteFunc == nil {
		panic("ConnectorTypesApiMock.GetConnectorTypeByIDExecuteFunc: method is nil but ConnectorTypesApi.GetConnectorTypeByIDExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorTypeByIDRequest
	}{
		R: r,
	}
	mock.lockGetConnectorTypeByIDExecute.Lock()
	mock.calls.GetConnectorTypeByIDExecute = append(mock.calls.GetConnectorTypeByIDExecute, callInfo)
	mock.lockGetConnectorTypeByIDExecute.Unlock()
	return mock.GetConnectorTypeByIDExecuteFunc(r)
}

// GetConnectorTypeByIDExecuteCalls gets all the calls that were made to GetConnectorTypeByIDExecute.
// Check the length with:
//     len(mockedConnectorTypesApi.GetConnectorTypeByIDExecuteCalls())
func (mock *ConnectorTypesApiMock) GetConnectorTypeByIDExecuteCalls() []struct {
	R ApiGetConnectorTypeByIDRequest
} {
	var calls []struct {
		R ApiGetConnectorTypeByIDRequest
	}
	mock.lockGetConnectorTypeByIDExecute.RLock()
	calls = mock.calls.GetConnectorTypeByIDExecute
	mock.lockGetConnectorTypeByIDExecute.RUnlock()
	return calls
}

// GetConnectorTypes calls GetConnectorTypesFunc.
func (mock *ConnectorTypesApiMock) GetConnectorTypes(ctx _context.Context) ApiGetConnectorTypesRequest {
	if mock.GetConnectorTypesFunc == nil {
		panic("ConnectorTypesApiMock.GetConnectorTypesFunc: method is nil but ConnectorTypesApi.GetConnectorTypes was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetConnectorTypes.Lock()
	mock.calls.GetConnectorTypes = append(mock.calls.GetConnectorTypes, callInfo)
	mock.lockGetConnectorTypes.Unlock()
	return mock.GetConnectorTypesFunc(ctx)
}

// GetConnectorTypesCalls gets all the calls that were made to GetConnectorTypes.
// Check the length with:
//     len(mockedConnectorTypesApi.GetConnectorTypesCalls())
func (mock *ConnectorTypesApiMock) GetConnectorTypesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockGetConnectorTypes.RLock()
	calls = mock.calls.GetConnectorTypes
	mock.lockGetConnectorTypes.RUnlock()
	return calls
}

// GetConnectorTypesExecute calls GetConnectorTypesExecuteFunc.
func (mock *ConnectorTypesApiMock) GetConnectorTypesExecute(r ApiGetConnectorTypesRequest) (ConnectorTypeList, *_nethttp.Response, error) {
	if mock.GetConnectorTypesExecuteFunc == nil {
		panic("ConnectorTypesApiMock.GetConnectorTypesExecuteFunc: method is nil but ConnectorTypesApi.GetConnectorTypesExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorTypesRequest
	}{
		R: r,
	}
	mock.lockGetConnectorTypesExecute.Lock()
	mock.calls.GetConnectorTypesExecute = append(mock.calls.GetConnectorTypesExecute, callInfo)
	mock.lockGetConnectorTypesExecute.Unlock()
	return mock.GetConnectorTypesExecuteFunc(r)
}

// GetConnectorTypesExecuteCalls gets all the calls that were made to GetConnectorTypesExecute.
// Check the length with:
//     len(mockedConnectorTypesApi.GetConnectorTypesExecuteCalls())
func (mock *ConnectorTypesApiMock) GetConnectorTypesExecuteCalls() []struct {
	R ApiGetConnectorTypesRequest
} {
	var calls []struct {
		R ApiGetConnectorTypesRequest
	}
	mock.lockGetConnectorTypesExecute.RLock()
	calls = mock.calls.GetConnectorTypesExecute
	mock.lockGetConnectorTypesExecute.RUnlock()
	return calls
}
