/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorTypeLabelCount Represents a connector type label and the number of types with that label
type ConnectorTypeLabelCount struct {
	// Name of the connector type label.
	Label string `json:"label"`
	// Number of connector types with this label.
	Count int32 `json:"count"`
}

// NewConnectorTypeLabelCount instantiates a new ConnectorTypeLabelCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorTypeLabelCount(label string, count int32) *ConnectorTypeLabelCount {
	this := ConnectorTypeLabelCount{}
	this.Label = label
	this.Count = count
	return &this
}

// NewConnectorTypeLabelCountWithDefaults instantiates a new ConnectorTypeLabelCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorTypeLabelCountWithDefaults() *ConnectorTypeLabelCount {
	this := ConnectorTypeLabelCount{}
	return &this
}

// GetLabel returns the Label field value
func (o *ConnectorTypeLabelCount) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ConnectorTypeLabelCount) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ConnectorTypeLabelCount) SetLabel(v string) {
	o.Label = v
}

// GetCount returns the Count field value
func (o *ConnectorTypeLabelCount) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ConnectorTypeLabelCount) GetCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ConnectorTypeLabelCount) SetCount(v int32) {
	o.Count = v
}

func (o ConnectorTypeLabelCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorTypeLabelCount struct {
	value *ConnectorTypeLabelCount
	isSet bool
}

func (v NullableConnectorTypeLabelCount) Get() *ConnectorTypeLabelCount {
	return v.value
}

func (v *NullableConnectorTypeLabelCount) Set(val *ConnectorTypeLabelCount) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorTypeLabelCount) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorTypeLabelCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorTypeLabelCount(val *ConnectorTypeLabelCount) *NullableConnectorTypeLabelCount {
	return &NullableConnectorTypeLabelCount{value: val, isSet: true}
}

func (v NullableConnectorTypeLabelCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorTypeLabelCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


