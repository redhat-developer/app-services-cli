/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorTypeAllOf struct for ConnectorTypeAllOf
type ConnectorTypeAllOf struct {
	// Name of the connector type.
	Name *string `json:"name,omitempty"`
	// Version of the connector type.
	Version *string `json:"version,omitempty"`
	// Channels of the connector type.
	Channels *[]Channel `json:"channels,omitempty"`
	// A description of the connector.
	Description *string `json:"description,omitempty"`
	// URL to an icon of the connector.
	IconHref *string `json:"icon_href,omitempty"`
	// Labels used to categorize the connector
	Labels *[]string `json:"labels,omitempty"`
	// Name-value string annotations for resource
	Annotations *map[string]string `json:"annotations,omitempty"`
	// Ranking for featured connectors
	FeaturedRank *int32 `json:"featured_rank,omitempty"`
	// The capabilities supported by the connector
	Capabilities *[]string `json:"capabilities,omitempty"`
	// A json schema that can be used to validate a ConnectorRequest connector field.
	Schema *map[string]interface{} `json:"schema,omitempty"`
}

// NewConnectorTypeAllOf instantiates a new ConnectorTypeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorTypeAllOf() *ConnectorTypeAllOf {
	this := ConnectorTypeAllOf{}
	return &this
}

// NewConnectorTypeAllOfWithDefaults instantiates a new ConnectorTypeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorTypeAllOfWithDefaults() *ConnectorTypeAllOf {
	this := ConnectorTypeAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorTypeAllOf) SetName(v string) {
	o.Name = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ConnectorTypeAllOf) SetVersion(v string) {
	o.Version = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetChannels() []Channel {
	if o == nil || o.Channels == nil {
		var ret []Channel
		return ret
	}
	return *o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetChannelsOk() (*[]Channel, bool) {
	if o == nil || o.Channels == nil {
		return nil, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasChannels() bool {
	if o != nil && o.Channels != nil {
		return true
	}

	return false
}

// SetChannels gets a reference to the given []Channel and assigns it to the Channels field.
func (o *ConnectorTypeAllOf) SetChannels(v []Channel) {
	o.Channels = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectorTypeAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetIconHref returns the IconHref field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetIconHref() string {
	if o == nil || o.IconHref == nil {
		var ret string
		return ret
	}
	return *o.IconHref
}

// GetIconHrefOk returns a tuple with the IconHref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetIconHrefOk() (*string, bool) {
	if o == nil || o.IconHref == nil {
		return nil, false
	}
	return o.IconHref, true
}

// HasIconHref returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasIconHref() bool {
	if o != nil && o.IconHref != nil {
		return true
	}

	return false
}

// SetIconHref gets a reference to the given string and assigns it to the IconHref field.
func (o *ConnectorTypeAllOf) SetIconHref(v string) {
	o.IconHref = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *ConnectorTypeAllOf) SetLabels(v []string) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *ConnectorTypeAllOf) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetFeaturedRank returns the FeaturedRank field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetFeaturedRank() int32 {
	if o == nil || o.FeaturedRank == nil {
		var ret int32
		return ret
	}
	return *o.FeaturedRank
}

// GetFeaturedRankOk returns a tuple with the FeaturedRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetFeaturedRankOk() (*int32, bool) {
	if o == nil || o.FeaturedRank == nil {
		return nil, false
	}
	return o.FeaturedRank, true
}

// HasFeaturedRank returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasFeaturedRank() bool {
	if o != nil && o.FeaturedRank != nil {
		return true
	}

	return false
}

// SetFeaturedRank gets a reference to the given int32 and assigns it to the FeaturedRank field.
func (o *ConnectorTypeAllOf) SetFeaturedRank(v int32) {
	o.FeaturedRank = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetCapabilities() []string {
	if o == nil || o.Capabilities == nil {
		var ret []string
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetCapabilitiesOk() (*[]string, bool) {
	if o == nil || o.Capabilities == nil {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasCapabilities() bool {
	if o != nil && o.Capabilities != nil {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *ConnectorTypeAllOf) SetCapabilities(v []string) {
	o.Capabilities = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *ConnectorTypeAllOf) GetSchema() map[string]interface{} {
	if o == nil || o.Schema == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorTypeAllOf) GetSchemaOk() (*map[string]interface{}, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *ConnectorTypeAllOf) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]interface{} and assigns it to the Schema field.
func (o *ConnectorTypeAllOf) SetSchema(v map[string]interface{}) {
	o.Schema = &v
}

func (o ConnectorTypeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Channels != nil {
		toSerialize["channels"] = o.Channels
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IconHref != nil {
		toSerialize["icon_href"] = o.IconHref
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.FeaturedRank != nil {
		toSerialize["featured_rank"] = o.FeaturedRank
	}
	if o.Capabilities != nil {
		toSerialize["capabilities"] = o.Capabilities
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorTypeAllOf struct {
	value *ConnectorTypeAllOf
	isSet bool
}

func (v NullableConnectorTypeAllOf) Get() *ConnectorTypeAllOf {
	return v.value
}

func (v *NullableConnectorTypeAllOf) Set(val *ConnectorTypeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorTypeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorTypeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorTypeAllOf(val *ConnectorTypeAllOf) *NullableConnectorTypeAllOf {
	return &NullableConnectorTypeAllOf{value: val, isSet: true}
}

func (v NullableConnectorTypeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorTypeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


