/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorStatusStatus struct for ConnectorStatusStatus
type ConnectorStatusStatus struct {
	State *ConnectorState `json:"state,omitempty"`
	Error *string `json:"error,omitempty"`
}

// NewConnectorStatusStatus instantiates a new ConnectorStatusStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorStatusStatus() *ConnectorStatusStatus {
	this := ConnectorStatusStatus{}
	return &this
}

// NewConnectorStatusStatusWithDefaults instantiates a new ConnectorStatusStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorStatusStatusWithDefaults() *ConnectorStatusStatus {
	this := ConnectorStatusStatus{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ConnectorStatusStatus) GetState() ConnectorState {
	if o == nil || o.State == nil {
		var ret ConnectorState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStatusStatus) GetStateOk() (*ConnectorState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ConnectorStatusStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given ConnectorState and assigns it to the State field.
func (o *ConnectorStatusStatus) SetState(v ConnectorState) {
	o.State = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ConnectorStatusStatus) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStatusStatus) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ConnectorStatusStatus) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ConnectorStatusStatus) SetError(v string) {
	o.Error = &v
}

func (o ConnectorStatusStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorStatusStatus struct {
	value *ConnectorStatusStatus
	isSet bool
}

func (v NullableConnectorStatusStatus) Get() *ConnectorStatusStatus {
	return v.value
}

func (v *NullableConnectorStatusStatus) Set(val *ConnectorStatusStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorStatusStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorStatusStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorStatusStatus(val *ConnectorStatusStatus) *NullableConnectorStatusStatus {
	return &NullableConnectorStatusStatus{value: val, isSet: true}
}

func (v NullableConnectorStatusStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorStatusStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


