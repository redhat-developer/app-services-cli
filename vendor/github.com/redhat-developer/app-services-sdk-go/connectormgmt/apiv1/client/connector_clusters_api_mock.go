// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package connectormgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ConnectorClustersApiMock does implement ConnectorClustersApi.
// If this is not the case, regenerate this file with moq.
var _ ConnectorClustersApi = &ConnectorClustersApiMock{}

// ConnectorClustersApiMock is a mock implementation of ConnectorClustersApi.
//
// 	func TestSomethingThatUsesConnectorClustersApi(t *testing.T) {
//
// 		// make and configure a mocked ConnectorClustersApi
// 		mockedConnectorClustersApi := &ConnectorClustersApiMock{
// 			CreateConnectorClusterFunc: func(ctx _context.Context) ApiCreateConnectorClusterRequest {
// 				panic("mock out the CreateConnectorCluster method")
// 			},
// 			CreateConnectorClusterExecuteFunc: func(r ApiCreateConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error) {
// 				panic("mock out the CreateConnectorClusterExecute method")
// 			},
// 			DeleteConnectorClusterFunc: func(ctx _context.Context, connectorClusterId string) ApiDeleteConnectorClusterRequest {
// 				panic("mock out the DeleteConnectorCluster method")
// 			},
// 			DeleteConnectorClusterExecuteFunc: func(r ApiDeleteConnectorClusterRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the DeleteConnectorClusterExecute method")
// 			},
// 			GetConnectorClusterFunc: func(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterRequest {
// 				panic("mock out the GetConnectorCluster method")
// 			},
// 			GetConnectorClusterAddonParametersFunc: func(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterAddonParametersRequest {
// 				panic("mock out the GetConnectorClusterAddonParameters method")
// 			},
// 			GetConnectorClusterAddonParametersExecuteFunc: func(r ApiGetConnectorClusterAddonParametersRequest) ([]AddonParameter, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorClusterAddonParametersExecute method")
// 			},
// 			GetConnectorClusterExecuteFunc: func(r ApiGetConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorClusterExecute method")
// 			},
// 			GetConnectorClusterNamespacesFunc: func(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterNamespacesRequest {
// 				panic("mock out the GetConnectorClusterNamespaces method")
// 			},
// 			GetConnectorClusterNamespacesExecuteFunc: func(r ApiGetConnectorClusterNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorClusterNamespacesExecute method")
// 			},
// 			ListConnectorClustersFunc: func(ctx _context.Context) ApiListConnectorClustersRequest {
// 				panic("mock out the ListConnectorClusters method")
// 			},
// 			ListConnectorClustersExecuteFunc: func(r ApiListConnectorClustersRequest) (ConnectorClusterList, *_nethttp.Response, error) {
// 				panic("mock out the ListConnectorClustersExecute method")
// 			},
// 			UpdateConnectorClusterByIdFunc: func(ctx _context.Context, connectorClusterId string) ApiUpdateConnectorClusterByIdRequest {
// 				panic("mock out the UpdateConnectorClusterById method")
// 			},
// 			UpdateConnectorClusterByIdExecuteFunc: func(r ApiUpdateConnectorClusterByIdRequest) (*_nethttp.Response, error) {
// 				panic("mock out the UpdateConnectorClusterByIdExecute method")
// 			},
// 		}
//
// 		// use mockedConnectorClustersApi in code that requires ConnectorClustersApi
// 		// and then make assertions.
//
// 	}
type ConnectorClustersApiMock struct {
	// CreateConnectorClusterFunc mocks the CreateConnectorCluster method.
	CreateConnectorClusterFunc func(ctx _context.Context) ApiCreateConnectorClusterRequest

	// CreateConnectorClusterExecuteFunc mocks the CreateConnectorClusterExecute method.
	CreateConnectorClusterExecuteFunc func(r ApiCreateConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error)

	// DeleteConnectorClusterFunc mocks the DeleteConnectorCluster method.
	DeleteConnectorClusterFunc func(ctx _context.Context, connectorClusterId string) ApiDeleteConnectorClusterRequest

	// DeleteConnectorClusterExecuteFunc mocks the DeleteConnectorClusterExecute method.
	DeleteConnectorClusterExecuteFunc func(r ApiDeleteConnectorClusterRequest) (Error, *_nethttp.Response, error)

	// GetConnectorClusterFunc mocks the GetConnectorCluster method.
	GetConnectorClusterFunc func(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterRequest

	// GetConnectorClusterAddonParametersFunc mocks the GetConnectorClusterAddonParameters method.
	GetConnectorClusterAddonParametersFunc func(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterAddonParametersRequest

	// GetConnectorClusterAddonParametersExecuteFunc mocks the GetConnectorClusterAddonParametersExecute method.
	GetConnectorClusterAddonParametersExecuteFunc func(r ApiGetConnectorClusterAddonParametersRequest) ([]AddonParameter, *_nethttp.Response, error)

	// GetConnectorClusterExecuteFunc mocks the GetConnectorClusterExecute method.
	GetConnectorClusterExecuteFunc func(r ApiGetConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error)

	// GetConnectorClusterNamespacesFunc mocks the GetConnectorClusterNamespaces method.
	GetConnectorClusterNamespacesFunc func(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterNamespacesRequest

	// GetConnectorClusterNamespacesExecuteFunc mocks the GetConnectorClusterNamespacesExecute method.
	GetConnectorClusterNamespacesExecuteFunc func(r ApiGetConnectorClusterNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error)

	// ListConnectorClustersFunc mocks the ListConnectorClusters method.
	ListConnectorClustersFunc func(ctx _context.Context) ApiListConnectorClustersRequest

	// ListConnectorClustersExecuteFunc mocks the ListConnectorClustersExecute method.
	ListConnectorClustersExecuteFunc func(r ApiListConnectorClustersRequest) (ConnectorClusterList, *_nethttp.Response, error)

	// UpdateConnectorClusterByIdFunc mocks the UpdateConnectorClusterById method.
	UpdateConnectorClusterByIdFunc func(ctx _context.Context, connectorClusterId string) ApiUpdateConnectorClusterByIdRequest

	// UpdateConnectorClusterByIdExecuteFunc mocks the UpdateConnectorClusterByIdExecute method.
	UpdateConnectorClusterByIdExecuteFunc func(r ApiUpdateConnectorClusterByIdRequest) (*_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateConnectorCluster holds details about calls to the CreateConnectorCluster method.
		CreateConnectorCluster []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateConnectorClusterExecute holds details about calls to the CreateConnectorClusterExecute method.
		CreateConnectorClusterExecute []struct {
			// R is the r argument value.
			R ApiCreateConnectorClusterRequest
		}
		// DeleteConnectorCluster holds details about calls to the DeleteConnectorCluster method.
		DeleteConnectorCluster []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorClusterId is the connectorClusterId argument value.
			ConnectorClusterId string
		}
		// DeleteConnectorClusterExecute holds details about calls to the DeleteConnectorClusterExecute method.
		DeleteConnectorClusterExecute []struct {
			// R is the r argument value.
			R ApiDeleteConnectorClusterRequest
		}
		// GetConnectorCluster holds details about calls to the GetConnectorCluster method.
		GetConnectorCluster []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorClusterId is the connectorClusterId argument value.
			ConnectorClusterId string
		}
		// GetConnectorClusterAddonParameters holds details about calls to the GetConnectorClusterAddonParameters method.
		GetConnectorClusterAddonParameters []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorClusterId is the connectorClusterId argument value.
			ConnectorClusterId string
		}
		// GetConnectorClusterAddonParametersExecute holds details about calls to the GetConnectorClusterAddonParametersExecute method.
		GetConnectorClusterAddonParametersExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorClusterAddonParametersRequest
		}
		// GetConnectorClusterExecute holds details about calls to the GetConnectorClusterExecute method.
		GetConnectorClusterExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorClusterRequest
		}
		// GetConnectorClusterNamespaces holds details about calls to the GetConnectorClusterNamespaces method.
		GetConnectorClusterNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorClusterId is the connectorClusterId argument value.
			ConnectorClusterId string
		}
		// GetConnectorClusterNamespacesExecute holds details about calls to the GetConnectorClusterNamespacesExecute method.
		GetConnectorClusterNamespacesExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorClusterNamespacesRequest
		}
		// ListConnectorClusters holds details about calls to the ListConnectorClusters method.
		ListConnectorClusters []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListConnectorClustersExecute holds details about calls to the ListConnectorClustersExecute method.
		ListConnectorClustersExecute []struct {
			// R is the r argument value.
			R ApiListConnectorClustersRequest
		}
		// UpdateConnectorClusterById holds details about calls to the UpdateConnectorClusterById method.
		UpdateConnectorClusterById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ConnectorClusterId is the connectorClusterId argument value.
			ConnectorClusterId string
		}
		// UpdateConnectorClusterByIdExecute holds details about calls to the UpdateConnectorClusterByIdExecute method.
		UpdateConnectorClusterByIdExecute []struct {
			// R is the r argument value.
			R ApiUpdateConnectorClusterByIdRequest
		}
	}
	lockCreateConnectorCluster                    sync.RWMutex
	lockCreateConnectorClusterExecute             sync.RWMutex
	lockDeleteConnectorCluster                    sync.RWMutex
	lockDeleteConnectorClusterExecute             sync.RWMutex
	lockGetConnectorCluster                       sync.RWMutex
	lockGetConnectorClusterAddonParameters        sync.RWMutex
	lockGetConnectorClusterAddonParametersExecute sync.RWMutex
	lockGetConnectorClusterExecute                sync.RWMutex
	lockGetConnectorClusterNamespaces             sync.RWMutex
	lockGetConnectorClusterNamespacesExecute      sync.RWMutex
	lockListConnectorClusters                     sync.RWMutex
	lockListConnectorClustersExecute              sync.RWMutex
	lockUpdateConnectorClusterById                sync.RWMutex
	lockUpdateConnectorClusterByIdExecute         sync.RWMutex
}

// CreateConnectorCluster calls CreateConnectorClusterFunc.
func (mock *ConnectorClustersApiMock) CreateConnectorCluster(ctx _context.Context) ApiCreateConnectorClusterRequest {
	if mock.CreateConnectorClusterFunc == nil {
		panic("ConnectorClustersApiMock.CreateConnectorClusterFunc: method is nil but ConnectorClustersApi.CreateConnectorCluster was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateConnectorCluster.Lock()
	mock.calls.CreateConnectorCluster = append(mock.calls.CreateConnectorCluster, callInfo)
	mock.lockCreateConnectorCluster.Unlock()
	return mock.CreateConnectorClusterFunc(ctx)
}

// CreateConnectorClusterCalls gets all the calls that were made to CreateConnectorCluster.
// Check the length with:
//     len(mockedConnectorClustersApi.CreateConnectorClusterCalls())
func (mock *ConnectorClustersApiMock) CreateConnectorClusterCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateConnectorCluster.RLock()
	calls = mock.calls.CreateConnectorCluster
	mock.lockCreateConnectorCluster.RUnlock()
	return calls
}

// CreateConnectorClusterExecute calls CreateConnectorClusterExecuteFunc.
func (mock *ConnectorClustersApiMock) CreateConnectorClusterExecute(r ApiCreateConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error) {
	if mock.CreateConnectorClusterExecuteFunc == nil {
		panic("ConnectorClustersApiMock.CreateConnectorClusterExecuteFunc: method is nil but ConnectorClustersApi.CreateConnectorClusterExecute was just called")
	}
	callInfo := struct {
		R ApiCreateConnectorClusterRequest
	}{
		R: r,
	}
	mock.lockCreateConnectorClusterExecute.Lock()
	mock.calls.CreateConnectorClusterExecute = append(mock.calls.CreateConnectorClusterExecute, callInfo)
	mock.lockCreateConnectorClusterExecute.Unlock()
	return mock.CreateConnectorClusterExecuteFunc(r)
}

// CreateConnectorClusterExecuteCalls gets all the calls that were made to CreateConnectorClusterExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.CreateConnectorClusterExecuteCalls())
func (mock *ConnectorClustersApiMock) CreateConnectorClusterExecuteCalls() []struct {
	R ApiCreateConnectorClusterRequest
} {
	var calls []struct {
		R ApiCreateConnectorClusterRequest
	}
	mock.lockCreateConnectorClusterExecute.RLock()
	calls = mock.calls.CreateConnectorClusterExecute
	mock.lockCreateConnectorClusterExecute.RUnlock()
	return calls
}

// DeleteConnectorCluster calls DeleteConnectorClusterFunc.
func (mock *ConnectorClustersApiMock) DeleteConnectorCluster(ctx _context.Context, connectorClusterId string) ApiDeleteConnectorClusterRequest {
	if mock.DeleteConnectorClusterFunc == nil {
		panic("ConnectorClustersApiMock.DeleteConnectorClusterFunc: method is nil but ConnectorClustersApi.DeleteConnectorCluster was just called")
	}
	callInfo := struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}{
		Ctx:                ctx,
		ConnectorClusterId: connectorClusterId,
	}
	mock.lockDeleteConnectorCluster.Lock()
	mock.calls.DeleteConnectorCluster = append(mock.calls.DeleteConnectorCluster, callInfo)
	mock.lockDeleteConnectorCluster.Unlock()
	return mock.DeleteConnectorClusterFunc(ctx, connectorClusterId)
}

// DeleteConnectorClusterCalls gets all the calls that were made to DeleteConnectorCluster.
// Check the length with:
//     len(mockedConnectorClustersApi.DeleteConnectorClusterCalls())
func (mock *ConnectorClustersApiMock) DeleteConnectorClusterCalls() []struct {
	Ctx                _context.Context
	ConnectorClusterId string
} {
	var calls []struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}
	mock.lockDeleteConnectorCluster.RLock()
	calls = mock.calls.DeleteConnectorCluster
	mock.lockDeleteConnectorCluster.RUnlock()
	return calls
}

// DeleteConnectorClusterExecute calls DeleteConnectorClusterExecuteFunc.
func (mock *ConnectorClustersApiMock) DeleteConnectorClusterExecute(r ApiDeleteConnectorClusterRequest) (Error, *_nethttp.Response, error) {
	if mock.DeleteConnectorClusterExecuteFunc == nil {
		panic("ConnectorClustersApiMock.DeleteConnectorClusterExecuteFunc: method is nil but ConnectorClustersApi.DeleteConnectorClusterExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteConnectorClusterRequest
	}{
		R: r,
	}
	mock.lockDeleteConnectorClusterExecute.Lock()
	mock.calls.DeleteConnectorClusterExecute = append(mock.calls.DeleteConnectorClusterExecute, callInfo)
	mock.lockDeleteConnectorClusterExecute.Unlock()
	return mock.DeleteConnectorClusterExecuteFunc(r)
}

// DeleteConnectorClusterExecuteCalls gets all the calls that were made to DeleteConnectorClusterExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.DeleteConnectorClusterExecuteCalls())
func (mock *ConnectorClustersApiMock) DeleteConnectorClusterExecuteCalls() []struct {
	R ApiDeleteConnectorClusterRequest
} {
	var calls []struct {
		R ApiDeleteConnectorClusterRequest
	}
	mock.lockDeleteConnectorClusterExecute.RLock()
	calls = mock.calls.DeleteConnectorClusterExecute
	mock.lockDeleteConnectorClusterExecute.RUnlock()
	return calls
}

// GetConnectorCluster calls GetConnectorClusterFunc.
func (mock *ConnectorClustersApiMock) GetConnectorCluster(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterRequest {
	if mock.GetConnectorClusterFunc == nil {
		panic("ConnectorClustersApiMock.GetConnectorClusterFunc: method is nil but ConnectorClustersApi.GetConnectorCluster was just called")
	}
	callInfo := struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}{
		Ctx:                ctx,
		ConnectorClusterId: connectorClusterId,
	}
	mock.lockGetConnectorCluster.Lock()
	mock.calls.GetConnectorCluster = append(mock.calls.GetConnectorCluster, callInfo)
	mock.lockGetConnectorCluster.Unlock()
	return mock.GetConnectorClusterFunc(ctx, connectorClusterId)
}

// GetConnectorClusterCalls gets all the calls that were made to GetConnectorCluster.
// Check the length with:
//     len(mockedConnectorClustersApi.GetConnectorClusterCalls())
func (mock *ConnectorClustersApiMock) GetConnectorClusterCalls() []struct {
	Ctx                _context.Context
	ConnectorClusterId string
} {
	var calls []struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}
	mock.lockGetConnectorCluster.RLock()
	calls = mock.calls.GetConnectorCluster
	mock.lockGetConnectorCluster.RUnlock()
	return calls
}

// GetConnectorClusterAddonParameters calls GetConnectorClusterAddonParametersFunc.
func (mock *ConnectorClustersApiMock) GetConnectorClusterAddonParameters(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterAddonParametersRequest {
	if mock.GetConnectorClusterAddonParametersFunc == nil {
		panic("ConnectorClustersApiMock.GetConnectorClusterAddonParametersFunc: method is nil but ConnectorClustersApi.GetConnectorClusterAddonParameters was just called")
	}
	callInfo := struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}{
		Ctx:                ctx,
		ConnectorClusterId: connectorClusterId,
	}
	mock.lockGetConnectorClusterAddonParameters.Lock()
	mock.calls.GetConnectorClusterAddonParameters = append(mock.calls.GetConnectorClusterAddonParameters, callInfo)
	mock.lockGetConnectorClusterAddonParameters.Unlock()
	return mock.GetConnectorClusterAddonParametersFunc(ctx, connectorClusterId)
}

// GetConnectorClusterAddonParametersCalls gets all the calls that were made to GetConnectorClusterAddonParameters.
// Check the length with:
//     len(mockedConnectorClustersApi.GetConnectorClusterAddonParametersCalls())
func (mock *ConnectorClustersApiMock) GetConnectorClusterAddonParametersCalls() []struct {
	Ctx                _context.Context
	ConnectorClusterId string
} {
	var calls []struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}
	mock.lockGetConnectorClusterAddonParameters.RLock()
	calls = mock.calls.GetConnectorClusterAddonParameters
	mock.lockGetConnectorClusterAddonParameters.RUnlock()
	return calls
}

// GetConnectorClusterAddonParametersExecute calls GetConnectorClusterAddonParametersExecuteFunc.
func (mock *ConnectorClustersApiMock) GetConnectorClusterAddonParametersExecute(r ApiGetConnectorClusterAddonParametersRequest) ([]AddonParameter, *_nethttp.Response, error) {
	if mock.GetConnectorClusterAddonParametersExecuteFunc == nil {
		panic("ConnectorClustersApiMock.GetConnectorClusterAddonParametersExecuteFunc: method is nil but ConnectorClustersApi.GetConnectorClusterAddonParametersExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorClusterAddonParametersRequest
	}{
		R: r,
	}
	mock.lockGetConnectorClusterAddonParametersExecute.Lock()
	mock.calls.GetConnectorClusterAddonParametersExecute = append(mock.calls.GetConnectorClusterAddonParametersExecute, callInfo)
	mock.lockGetConnectorClusterAddonParametersExecute.Unlock()
	return mock.GetConnectorClusterAddonParametersExecuteFunc(r)
}

// GetConnectorClusterAddonParametersExecuteCalls gets all the calls that were made to GetConnectorClusterAddonParametersExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.GetConnectorClusterAddonParametersExecuteCalls())
func (mock *ConnectorClustersApiMock) GetConnectorClusterAddonParametersExecuteCalls() []struct {
	R ApiGetConnectorClusterAddonParametersRequest
} {
	var calls []struct {
		R ApiGetConnectorClusterAddonParametersRequest
	}
	mock.lockGetConnectorClusterAddonParametersExecute.RLock()
	calls = mock.calls.GetConnectorClusterAddonParametersExecute
	mock.lockGetConnectorClusterAddonParametersExecute.RUnlock()
	return calls
}

// GetConnectorClusterExecute calls GetConnectorClusterExecuteFunc.
func (mock *ConnectorClustersApiMock) GetConnectorClusterExecute(r ApiGetConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error) {
	if mock.GetConnectorClusterExecuteFunc == nil {
		panic("ConnectorClustersApiMock.GetConnectorClusterExecuteFunc: method is nil but ConnectorClustersApi.GetConnectorClusterExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorClusterRequest
	}{
		R: r,
	}
	mock.lockGetConnectorClusterExecute.Lock()
	mock.calls.GetConnectorClusterExecute = append(mock.calls.GetConnectorClusterExecute, callInfo)
	mock.lockGetConnectorClusterExecute.Unlock()
	return mock.GetConnectorClusterExecuteFunc(r)
}

// GetConnectorClusterExecuteCalls gets all the calls that were made to GetConnectorClusterExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.GetConnectorClusterExecuteCalls())
func (mock *ConnectorClustersApiMock) GetConnectorClusterExecuteCalls() []struct {
	R ApiGetConnectorClusterRequest
} {
	var calls []struct {
		R ApiGetConnectorClusterRequest
	}
	mock.lockGetConnectorClusterExecute.RLock()
	calls = mock.calls.GetConnectorClusterExecute
	mock.lockGetConnectorClusterExecute.RUnlock()
	return calls
}

// GetConnectorClusterNamespaces calls GetConnectorClusterNamespacesFunc.
func (mock *ConnectorClustersApiMock) GetConnectorClusterNamespaces(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterNamespacesRequest {
	if mock.GetConnectorClusterNamespacesFunc == nil {
		panic("ConnectorClustersApiMock.GetConnectorClusterNamespacesFunc: method is nil but ConnectorClustersApi.GetConnectorClusterNamespaces was just called")
	}
	callInfo := struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}{
		Ctx:                ctx,
		ConnectorClusterId: connectorClusterId,
	}
	mock.lockGetConnectorClusterNamespaces.Lock()
	mock.calls.GetConnectorClusterNamespaces = append(mock.calls.GetConnectorClusterNamespaces, callInfo)
	mock.lockGetConnectorClusterNamespaces.Unlock()
	return mock.GetConnectorClusterNamespacesFunc(ctx, connectorClusterId)
}

// GetConnectorClusterNamespacesCalls gets all the calls that were made to GetConnectorClusterNamespaces.
// Check the length with:
//     len(mockedConnectorClustersApi.GetConnectorClusterNamespacesCalls())
func (mock *ConnectorClustersApiMock) GetConnectorClusterNamespacesCalls() []struct {
	Ctx                _context.Context
	ConnectorClusterId string
} {
	var calls []struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}
	mock.lockGetConnectorClusterNamespaces.RLock()
	calls = mock.calls.GetConnectorClusterNamespaces
	mock.lockGetConnectorClusterNamespaces.RUnlock()
	return calls
}

// GetConnectorClusterNamespacesExecute calls GetConnectorClusterNamespacesExecuteFunc.
func (mock *ConnectorClustersApiMock) GetConnectorClusterNamespacesExecute(r ApiGetConnectorClusterNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error) {
	if mock.GetConnectorClusterNamespacesExecuteFunc == nil {
		panic("ConnectorClustersApiMock.GetConnectorClusterNamespacesExecuteFunc: method is nil but ConnectorClustersApi.GetConnectorClusterNamespacesExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorClusterNamespacesRequest
	}{
		R: r,
	}
	mock.lockGetConnectorClusterNamespacesExecute.Lock()
	mock.calls.GetConnectorClusterNamespacesExecute = append(mock.calls.GetConnectorClusterNamespacesExecute, callInfo)
	mock.lockGetConnectorClusterNamespacesExecute.Unlock()
	return mock.GetConnectorClusterNamespacesExecuteFunc(r)
}

// GetConnectorClusterNamespacesExecuteCalls gets all the calls that were made to GetConnectorClusterNamespacesExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.GetConnectorClusterNamespacesExecuteCalls())
func (mock *ConnectorClustersApiMock) GetConnectorClusterNamespacesExecuteCalls() []struct {
	R ApiGetConnectorClusterNamespacesRequest
} {
	var calls []struct {
		R ApiGetConnectorClusterNamespacesRequest
	}
	mock.lockGetConnectorClusterNamespacesExecute.RLock()
	calls = mock.calls.GetConnectorClusterNamespacesExecute
	mock.lockGetConnectorClusterNamespacesExecute.RUnlock()
	return calls
}

// ListConnectorClusters calls ListConnectorClustersFunc.
func (mock *ConnectorClustersApiMock) ListConnectorClusters(ctx _context.Context) ApiListConnectorClustersRequest {
	if mock.ListConnectorClustersFunc == nil {
		panic("ConnectorClustersApiMock.ListConnectorClustersFunc: method is nil but ConnectorClustersApi.ListConnectorClusters was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListConnectorClusters.Lock()
	mock.calls.ListConnectorClusters = append(mock.calls.ListConnectorClusters, callInfo)
	mock.lockListConnectorClusters.Unlock()
	return mock.ListConnectorClustersFunc(ctx)
}

// ListConnectorClustersCalls gets all the calls that were made to ListConnectorClusters.
// Check the length with:
//     len(mockedConnectorClustersApi.ListConnectorClustersCalls())
func (mock *ConnectorClustersApiMock) ListConnectorClustersCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListConnectorClusters.RLock()
	calls = mock.calls.ListConnectorClusters
	mock.lockListConnectorClusters.RUnlock()
	return calls
}

// ListConnectorClustersExecute calls ListConnectorClustersExecuteFunc.
func (mock *ConnectorClustersApiMock) ListConnectorClustersExecute(r ApiListConnectorClustersRequest) (ConnectorClusterList, *_nethttp.Response, error) {
	if mock.ListConnectorClustersExecuteFunc == nil {
		panic("ConnectorClustersApiMock.ListConnectorClustersExecuteFunc: method is nil but ConnectorClustersApi.ListConnectorClustersExecute was just called")
	}
	callInfo := struct {
		R ApiListConnectorClustersRequest
	}{
		R: r,
	}
	mock.lockListConnectorClustersExecute.Lock()
	mock.calls.ListConnectorClustersExecute = append(mock.calls.ListConnectorClustersExecute, callInfo)
	mock.lockListConnectorClustersExecute.Unlock()
	return mock.ListConnectorClustersExecuteFunc(r)
}

// ListConnectorClustersExecuteCalls gets all the calls that were made to ListConnectorClustersExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.ListConnectorClustersExecuteCalls())
func (mock *ConnectorClustersApiMock) ListConnectorClustersExecuteCalls() []struct {
	R ApiListConnectorClustersRequest
} {
	var calls []struct {
		R ApiListConnectorClustersRequest
	}
	mock.lockListConnectorClustersExecute.RLock()
	calls = mock.calls.ListConnectorClustersExecute
	mock.lockListConnectorClustersExecute.RUnlock()
	return calls
}

// UpdateConnectorClusterById calls UpdateConnectorClusterByIdFunc.
func (mock *ConnectorClustersApiMock) UpdateConnectorClusterById(ctx _context.Context, connectorClusterId string) ApiUpdateConnectorClusterByIdRequest {
	if mock.UpdateConnectorClusterByIdFunc == nil {
		panic("ConnectorClustersApiMock.UpdateConnectorClusterByIdFunc: method is nil but ConnectorClustersApi.UpdateConnectorClusterById was just called")
	}
	callInfo := struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}{
		Ctx:                ctx,
		ConnectorClusterId: connectorClusterId,
	}
	mock.lockUpdateConnectorClusterById.Lock()
	mock.calls.UpdateConnectorClusterById = append(mock.calls.UpdateConnectorClusterById, callInfo)
	mock.lockUpdateConnectorClusterById.Unlock()
	return mock.UpdateConnectorClusterByIdFunc(ctx, connectorClusterId)
}

// UpdateConnectorClusterByIdCalls gets all the calls that were made to UpdateConnectorClusterById.
// Check the length with:
//     len(mockedConnectorClustersApi.UpdateConnectorClusterByIdCalls())
func (mock *ConnectorClustersApiMock) UpdateConnectorClusterByIdCalls() []struct {
	Ctx                _context.Context
	ConnectorClusterId string
} {
	var calls []struct {
		Ctx                _context.Context
		ConnectorClusterId string
	}
	mock.lockUpdateConnectorClusterById.RLock()
	calls = mock.calls.UpdateConnectorClusterById
	mock.lockUpdateConnectorClusterById.RUnlock()
	return calls
}

// UpdateConnectorClusterByIdExecute calls UpdateConnectorClusterByIdExecuteFunc.
func (mock *ConnectorClustersApiMock) UpdateConnectorClusterByIdExecute(r ApiUpdateConnectorClusterByIdRequest) (*_nethttp.Response, error) {
	if mock.UpdateConnectorClusterByIdExecuteFunc == nil {
		panic("ConnectorClustersApiMock.UpdateConnectorClusterByIdExecuteFunc: method is nil but ConnectorClustersApi.UpdateConnectorClusterByIdExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateConnectorClusterByIdRequest
	}{
		R: r,
	}
	mock.lockUpdateConnectorClusterByIdExecute.Lock()
	mock.calls.UpdateConnectorClusterByIdExecute = append(mock.calls.UpdateConnectorClusterByIdExecute, callInfo)
	mock.lockUpdateConnectorClusterByIdExecute.Unlock()
	return mock.UpdateConnectorClusterByIdExecuteFunc(r)
}

// UpdateConnectorClusterByIdExecuteCalls gets all the calls that were made to UpdateConnectorClusterByIdExecute.
// Check the length with:
//     len(mockedConnectorClustersApi.UpdateConnectorClusterByIdExecuteCalls())
func (mock *ConnectorClustersApiMock) UpdateConnectorClusterByIdExecuteCalls() []struct {
	R ApiUpdateConnectorClusterByIdRequest
} {
	var calls []struct {
		R ApiUpdateConnectorClusterByIdRequest
	}
	mock.lockUpdateConnectorClusterByIdExecute.RLock()
	calls = mock.calls.UpdateConnectorClusterByIdExecute
	mock.lockUpdateConnectorClusterByIdExecute.RUnlock()
	return calls
}
