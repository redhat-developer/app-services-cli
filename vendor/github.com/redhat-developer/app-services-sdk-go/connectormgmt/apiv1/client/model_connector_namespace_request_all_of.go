/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorNamespaceRequestAllOf struct for ConnectorNamespaceRequestAllOf
type ConnectorNamespaceRequestAllOf struct {
	ClusterId *string `json:"cluster_id,omitempty"`
	Kind *ConnectorNamespaceTenantKind `json:"kind,omitempty"`
}

// NewConnectorNamespaceRequestAllOf instantiates a new ConnectorNamespaceRequestAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorNamespaceRequestAllOf() *ConnectorNamespaceRequestAllOf {
	this := ConnectorNamespaceRequestAllOf{}
	return &this
}

// NewConnectorNamespaceRequestAllOfWithDefaults instantiates a new ConnectorNamespaceRequestAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorNamespaceRequestAllOfWithDefaults() *ConnectorNamespaceRequestAllOf {
	this := ConnectorNamespaceRequestAllOf{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *ConnectorNamespaceRequestAllOf) GetClusterId() string {
	if o == nil || o.ClusterId == nil {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceRequestAllOf) GetClusterIdOk() (*string, bool) {
	if o == nil || o.ClusterId == nil {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *ConnectorNamespaceRequestAllOf) HasClusterId() bool {
	if o != nil && o.ClusterId != nil {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *ConnectorNamespaceRequestAllOf) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ConnectorNamespaceRequestAllOf) GetKind() ConnectorNamespaceTenantKind {
	if o == nil || o.Kind == nil {
		var ret ConnectorNamespaceTenantKind
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorNamespaceRequestAllOf) GetKindOk() (*ConnectorNamespaceTenantKind, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ConnectorNamespaceRequestAllOf) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given ConnectorNamespaceTenantKind and assigns it to the Kind field.
func (o *ConnectorNamespaceRequestAllOf) SetKind(v ConnectorNamespaceTenantKind) {
	o.Kind = &v
}

func (o ConnectorNamespaceRequestAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId != nil {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorNamespaceRequestAllOf struct {
	value *ConnectorNamespaceRequestAllOf
	isSet bool
}

func (v NullableConnectorNamespaceRequestAllOf) Get() *ConnectorNamespaceRequestAllOf {
	return v.value
}

func (v *NullableConnectorNamespaceRequestAllOf) Set(val *ConnectorNamespaceRequestAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorNamespaceRequestAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorNamespaceRequestAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorNamespaceRequestAllOf(val *ConnectorNamespaceRequestAllOf) *NullableConnectorNamespaceRequestAllOf {
	return &NullableConnectorNamespaceRequestAllOf{value: val, isSet: true}
}

func (v NullableConnectorNamespaceRequestAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorNamespaceRequestAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


