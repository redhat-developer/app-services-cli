/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ConnectorClustersApi interface {

	/*
	 * CreateConnectorCluster Create a new connector cluster
	 * Create a new connector cluster
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiCreateConnectorClusterRequest
	 */
	CreateConnectorCluster(ctx _context.Context) ApiCreateConnectorClusterRequest

	/*
	 * CreateConnectorClusterExecute executes the request
	 * @return ConnectorCluster
	 */
	CreateConnectorClusterExecute(r ApiCreateConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error)

	/*
	 * DeleteConnectorCluster Delete a connector cluster
	 * Delete a connector cluster
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param connectorClusterId The id of the connector cluster
	 * @return ApiDeleteConnectorClusterRequest
	 */
	DeleteConnectorCluster(ctx _context.Context, connectorClusterId string) ApiDeleteConnectorClusterRequest

	/*
	 * DeleteConnectorClusterExecute executes the request
	 * @return Error
	 */
	DeleteConnectorClusterExecute(r ApiDeleteConnectorClusterRequest) (Error, *_nethttp.Response, error)

	/*
	 * GetConnectorCluster Get a connector cluster
	 * Get a connector cluster
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param connectorClusterId The id of the connector cluster
	 * @return ApiGetConnectorClusterRequest
	 */
	GetConnectorCluster(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterRequest

	/*
	 * GetConnectorClusterExecute executes the request
	 * @return ConnectorCluster
	 */
	GetConnectorClusterExecute(r ApiGetConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error)

	/*
	 * GetConnectorClusterAddonParameters Get a connector cluster's addon parameters
	 * Get a connector cluster's addon parameters
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param connectorClusterId The id of the connector cluster
	 * @return ApiGetConnectorClusterAddonParametersRequest
	 */
	GetConnectorClusterAddonParameters(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterAddonParametersRequest

	/*
	 * GetConnectorClusterAddonParametersExecute executes the request
	 * @return []AddonParameter
	 */
	GetConnectorClusterAddonParametersExecute(r ApiGetConnectorClusterAddonParametersRequest) ([]AddonParameter, *_nethttp.Response, error)

	/*
	 * GetConnectorClusterNamespaces Get a connector cluster's namespaces
	 * Get a connector cluster's namespaces
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param connectorClusterId The id of the connector cluster
	 * @return ApiGetConnectorClusterNamespacesRequest
	 */
	GetConnectorClusterNamespaces(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterNamespacesRequest

	/*
	 * GetConnectorClusterNamespacesExecute executes the request
	 * @return ConnectorNamespaceList
	 */
	GetConnectorClusterNamespacesExecute(r ApiGetConnectorClusterNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error)

	/*
	 * ListConnectorClusters Returns a list of connector clusters
	 * Returns a list of connector clusters
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiListConnectorClustersRequest
	 */
	ListConnectorClusters(ctx _context.Context) ApiListConnectorClustersRequest

	/*
	 * ListConnectorClustersExecute executes the request
	 * @return ConnectorClusterList
	 */
	ListConnectorClustersExecute(r ApiListConnectorClustersRequest) (ConnectorClusterList, *_nethttp.Response, error)

	/*
	 * UpdateConnectorClusterById udpate a connector cluster
	 * udpate a connector cluster
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param connectorClusterId The id of the connector cluster
	 * @return ApiUpdateConnectorClusterByIdRequest
	 */
	UpdateConnectorClusterById(ctx _context.Context, connectorClusterId string) ApiUpdateConnectorClusterByIdRequest

	/*
	 * UpdateConnectorClusterByIdExecute executes the request
	 */
	UpdateConnectorClusterByIdExecute(r ApiUpdateConnectorClusterByIdRequest) (*_nethttp.Response, error)
}

// ConnectorClustersApiService ConnectorClustersApi service
type ConnectorClustersApiService service

type ApiCreateConnectorClusterRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	async *bool
	connectorClusterRequest *ConnectorClusterRequest
}

func (r ApiCreateConnectorClusterRequest) Async(async bool) ApiCreateConnectorClusterRequest {
	r.async = &async
	return r
}
func (r ApiCreateConnectorClusterRequest) ConnectorClusterRequest(connectorClusterRequest ConnectorClusterRequest) ApiCreateConnectorClusterRequest {
	r.connectorClusterRequest = &connectorClusterRequest
	return r
}

func (r ApiCreateConnectorClusterRequest) Execute() (ConnectorCluster, *_nethttp.Response, error) {
	return r.ApiService.CreateConnectorClusterExecute(r)
}

/*
 * CreateConnectorCluster Create a new connector cluster
 * Create a new connector cluster
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateConnectorClusterRequest
 */
func (a *ConnectorClustersApiService) CreateConnectorCluster(ctx _context.Context) ApiCreateConnectorClusterRequest {
	return ApiCreateConnectorClusterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ConnectorCluster
 */
func (a *ConnectorClustersApiService) CreateConnectorClusterExecute(r ApiCreateConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.CreateConnectorCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.async == nil {
		return localVarReturnValue, nil, reportError("async is required and must be specified")
	}
	if r.connectorClusterRequest == nil {
		return localVarReturnValue, nil, reportError("connectorClusterRequest is required and must be specified")
	}

	localVarQueryParams.Add("async", parameterToString(*r.async, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectorClusterRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConnectorClusterRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	connectorClusterId string
}


func (r ApiDeleteConnectorClusterRequest) Execute() (Error, *_nethttp.Response, error) {
	return r.ApiService.DeleteConnectorClusterExecute(r)
}

/*
 * DeleteConnectorCluster Delete a connector cluster
 * Delete a connector cluster
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectorClusterId The id of the connector cluster
 * @return ApiDeleteConnectorClusterRequest
 */
func (a *ConnectorClustersApiService) DeleteConnectorCluster(ctx _context.Context, connectorClusterId string) ApiDeleteConnectorClusterRequest {
	return ApiDeleteConnectorClusterRequest{
		ApiService: a,
		ctx: ctx,
		connectorClusterId: connectorClusterId,
	}
}

/*
 * Execute executes the request
 * @return Error
 */
func (a *ConnectorClustersApiService) DeleteConnectorClusterExecute(r ApiDeleteConnectorClusterRequest) (Error, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Error
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.DeleteConnectorCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectorClusterRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	connectorClusterId string
}


func (r ApiGetConnectorClusterRequest) Execute() (ConnectorCluster, *_nethttp.Response, error) {
	return r.ApiService.GetConnectorClusterExecute(r)
}

/*
 * GetConnectorCluster Get a connector cluster
 * Get a connector cluster
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectorClusterId The id of the connector cluster
 * @return ApiGetConnectorClusterRequest
 */
func (a *ConnectorClustersApiService) GetConnectorCluster(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterRequest {
	return ApiGetConnectorClusterRequest{
		ApiService: a,
		ctx: ctx,
		connectorClusterId: connectorClusterId,
	}
}

/*
 * Execute executes the request
 * @return ConnectorCluster
 */
func (a *ConnectorClustersApiService) GetConnectorClusterExecute(r ApiGetConnectorClusterRequest) (ConnectorCluster, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorCluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.GetConnectorCluster")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectorClusterAddonParametersRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	connectorClusterId string
	resetCredentials *bool
}

func (r ApiGetConnectorClusterAddonParametersRequest) ResetCredentials(resetCredentials bool) ApiGetConnectorClusterAddonParametersRequest {
	r.resetCredentials = &resetCredentials
	return r
}

func (r ApiGetConnectorClusterAddonParametersRequest) Execute() ([]AddonParameter, *_nethttp.Response, error) {
	return r.ApiService.GetConnectorClusterAddonParametersExecute(r)
}

/*
 * GetConnectorClusterAddonParameters Get a connector cluster's addon parameters
 * Get a connector cluster's addon parameters
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectorClusterId The id of the connector cluster
 * @return ApiGetConnectorClusterAddonParametersRequest
 */
func (a *ConnectorClustersApiService) GetConnectorClusterAddonParameters(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterAddonParametersRequest {
	return ApiGetConnectorClusterAddonParametersRequest{
		ApiService: a,
		ctx: ctx,
		connectorClusterId: connectorClusterId,
	}
}

/*
 * Execute executes the request
 * @return []AddonParameter
 */
func (a *ConnectorClustersApiService) GetConnectorClusterAddonParametersExecute(r ApiGetConnectorClusterAddonParametersRequest) ([]AddonParameter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []AddonParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.GetConnectorClusterAddonParameters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/addon_parameters"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.resetCredentials != nil {
		localVarQueryParams.Add("reset_credentials", parameterToString(*r.resetCredentials, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectorClusterNamespacesRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	connectorClusterId string
	page *string
	size *string
	orderBy *string
	search *string
}

func (r ApiGetConnectorClusterNamespacesRequest) Page(page string) ApiGetConnectorClusterNamespacesRequest {
	r.page = &page
	return r
}
func (r ApiGetConnectorClusterNamespacesRequest) Size(size string) ApiGetConnectorClusterNamespacesRequest {
	r.size = &size
	return r
}
func (r ApiGetConnectorClusterNamespacesRequest) OrderBy(orderBy string) ApiGetConnectorClusterNamespacesRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiGetConnectorClusterNamespacesRequest) Search(search string) ApiGetConnectorClusterNamespacesRequest {
	r.search = &search
	return r
}

func (r ApiGetConnectorClusterNamespacesRequest) Execute() (ConnectorNamespaceList, *_nethttp.Response, error) {
	return r.ApiService.GetConnectorClusterNamespacesExecute(r)
}

/*
 * GetConnectorClusterNamespaces Get a connector cluster's namespaces
 * Get a connector cluster's namespaces
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectorClusterId The id of the connector cluster
 * @return ApiGetConnectorClusterNamespacesRequest
 */
func (a *ConnectorClustersApiService) GetConnectorClusterNamespaces(ctx _context.Context, connectorClusterId string) ApiGetConnectorClusterNamespacesRequest {
	return ApiGetConnectorClusterNamespacesRequest{
		ApiService: a,
		ctx: ctx,
		connectorClusterId: connectorClusterId,
	}
}

/*
 * Execute executes the request
 * @return ConnectorNamespaceList
 */
func (a *ConnectorClustersApiService) GetConnectorClusterNamespacesExecute(r ApiGetConnectorClusterNamespacesRequest) (ConnectorNamespaceList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorNamespaceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.GetConnectorClusterNamespaces")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/namespaces"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListConnectorClustersRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	page *string
	size *string
	orderBy *string
	search *string
}

func (r ApiListConnectorClustersRequest) Page(page string) ApiListConnectorClustersRequest {
	r.page = &page
	return r
}
func (r ApiListConnectorClustersRequest) Size(size string) ApiListConnectorClustersRequest {
	r.size = &size
	return r
}
func (r ApiListConnectorClustersRequest) OrderBy(orderBy string) ApiListConnectorClustersRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiListConnectorClustersRequest) Search(search string) ApiListConnectorClustersRequest {
	r.search = &search
	return r
}

func (r ApiListConnectorClustersRequest) Execute() (ConnectorClusterList, *_nethttp.Response, error) {
	return r.ApiService.ListConnectorClustersExecute(r)
}

/*
 * ListConnectorClusters Returns a list of connector clusters
 * Returns a list of connector clusters
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListConnectorClustersRequest
 */
func (a *ConnectorClustersApiService) ListConnectorClusters(ctx _context.Context) ApiListConnectorClustersRequest {
	return ApiListConnectorClustersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ConnectorClusterList
 */
func (a *ConnectorClustersApiService) ListConnectorClustersExecute(r ApiListConnectorClustersRequest) (ConnectorClusterList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectorClusterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.ListConnectorClusters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.size != nil {
		localVarQueryParams.Add("size", parameterToString(*r.size, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("orderBy", parameterToString(*r.orderBy, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateConnectorClusterByIdRequest struct {
	ctx _context.Context
	ApiService ConnectorClustersApi
	connectorClusterId string
	connectorClusterRequest *ConnectorClusterRequest
}

func (r ApiUpdateConnectorClusterByIdRequest) ConnectorClusterRequest(connectorClusterRequest ConnectorClusterRequest) ApiUpdateConnectorClusterByIdRequest {
	r.connectorClusterRequest = &connectorClusterRequest
	return r
}

func (r ApiUpdateConnectorClusterByIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateConnectorClusterByIdExecute(r)
}

/*
 * UpdateConnectorClusterById udpate a connector cluster
 * udpate a connector cluster
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param connectorClusterId The id of the connector cluster
 * @return ApiUpdateConnectorClusterByIdRequest
 */
func (a *ConnectorClustersApiService) UpdateConnectorClusterById(ctx _context.Context, connectorClusterId string) ApiUpdateConnectorClusterByIdRequest {
	return ApiUpdateConnectorClusterByIdRequest{
		ApiService: a,
		ctx: ctx,
		connectorClusterId: connectorClusterId,
	}
}

/*
 * Execute executes the request
 */
func (a *ConnectorClustersApiService) UpdateConnectorClusterByIdExecute(r ApiUpdateConnectorClusterByIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorClustersApiService.UpdateConnectorClusterById")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.connectorClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.connectorClusterRequest == nil {
		return nil, reportError("connectorClusterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectorClusterRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
