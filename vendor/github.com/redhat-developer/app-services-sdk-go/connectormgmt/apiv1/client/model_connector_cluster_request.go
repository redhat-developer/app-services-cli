/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorClusterRequest Schema for the request to update a data plane cluster's name
type ConnectorClusterRequest struct {
	Name *string `json:"name,omitempty"`
	// Name-value string annotations for resource
	Annotations *map[string]string `json:"annotations,omitempty"`
}

// NewConnectorClusterRequest instantiates a new ConnectorClusterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorClusterRequest() *ConnectorClusterRequest {
	this := ConnectorClusterRequest{}
	return &this
}

// NewConnectorClusterRequestWithDefaults instantiates a new ConnectorClusterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorClusterRequestWithDefaults() *ConnectorClusterRequest {
	this := ConnectorClusterRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorClusterRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorClusterRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorClusterRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorClusterRequest) SetName(v string) {
	o.Name = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *ConnectorClusterRequest) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorClusterRequest) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *ConnectorClusterRequest) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *ConnectorClusterRequest) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

func (o ConnectorClusterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorClusterRequest struct {
	value *ConnectorClusterRequest
	isSet bool
}

func (v NullableConnectorClusterRequest) Get() *ConnectorClusterRequest {
	return v.value
}

func (v *NullableConnectorClusterRequest) Set(val *ConnectorClusterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorClusterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorClusterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorClusterRequest(val *ConnectorClusterRequest) *NullableConnectorClusterRequest {
	return &NullableConnectorClusterRequest{value: val, isSet: true}
}

func (v NullableConnectorClusterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorClusterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


