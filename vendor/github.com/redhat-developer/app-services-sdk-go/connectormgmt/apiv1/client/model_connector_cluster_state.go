/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
	"fmt"
)

// ConnectorClusterState the model 'ConnectorClusterState'
type ConnectorClusterState string

// List of ConnectorClusterState
const (
	CONNECTORCLUSTERSTATE_DISCONNECTED ConnectorClusterState = "disconnected"
	CONNECTORCLUSTERSTATE_READY ConnectorClusterState = "ready"
	CONNECTORCLUSTERSTATE_DELETING ConnectorClusterState = "deleting"
)

var allowedConnectorClusterStateEnumValues = []ConnectorClusterState{
	"disconnected",
	"ready",
	"deleting",
}

func (v *ConnectorClusterState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorClusterState(value)
	for _, existing := range allowedConnectorClusterStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorClusterState", value)
}

// NewConnectorClusterStateFromValue returns a pointer to a valid ConnectorClusterState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorClusterStateFromValue(v string) (*ConnectorClusterState, error) {
	ev := ConnectorClusterState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorClusterState: valid values are %v", v, allowedConnectorClusterStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorClusterState) IsValid() bool {
	for _, existing := range allowedConnectorClusterStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorClusterState value
func (v ConnectorClusterState) Ptr() *ConnectorClusterState {
	return &v
}

type NullableConnectorClusterState struct {
	value *ConnectorClusterState
	isSet bool
}

func (v NullableConnectorClusterState) Get() *ConnectorClusterState {
	return v.value
}

func (v *NullableConnectorClusterState) Set(val *ConnectorClusterState) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorClusterState) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorClusterState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorClusterState(val *ConnectorClusterState) *NullableConnectorClusterState {
	return &NullableConnectorClusterState{value: val, isSet: true}
}

func (v NullableConnectorClusterState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorClusterState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

