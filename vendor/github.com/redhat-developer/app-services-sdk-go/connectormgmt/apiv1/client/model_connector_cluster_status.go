/*
 * Connector Management API
 *
 * Connector Management API is a REST API to manage connectors.
 *
 * API version: 0.1.0
 * Contact: rhosak-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
)

// ConnectorClusterStatus struct for ConnectorClusterStatus
type ConnectorClusterStatus struct {
	Status *ConnectorClusterStatusStatus `json:"status,omitempty"`
}

// NewConnectorClusterStatus instantiates a new ConnectorClusterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorClusterStatus() *ConnectorClusterStatus {
	this := ConnectorClusterStatus{}
	return &this
}

// NewConnectorClusterStatusWithDefaults instantiates a new ConnectorClusterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorClusterStatusWithDefaults() *ConnectorClusterStatus {
	this := ConnectorClusterStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectorClusterStatus) GetStatus() ConnectorClusterStatusStatus {
	if o == nil || o.Status == nil {
		var ret ConnectorClusterStatusStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorClusterStatus) GetStatusOk() (*ConnectorClusterStatusStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectorClusterStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ConnectorClusterStatusStatus and assigns it to the Status field.
func (o *ConnectorClusterStatus) SetStatus(v ConnectorClusterStatusStatus) {
	o.Status = &v
}

func (o ConnectorClusterStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorClusterStatus struct {
	value *ConnectorClusterStatus
	isSet bool
}

func (v NullableConnectorClusterStatus) Get() *ConnectorClusterStatus {
	return v.value
}

func (v *NullableConnectorClusterStatus) Set(val *ConnectorClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorClusterStatus(val *ConnectorClusterStatus) *NullableConnectorClusterStatus {
	return &NullableConnectorClusterStatus{value: val, isSet: true}
}

func (v NullableConnectorClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


