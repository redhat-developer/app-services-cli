// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package connectormgmtclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ConnectorsApiMock does implement ConnectorsApi.
// If this is not the case, regenerate this file with moq.
var _ ConnectorsApi = &ConnectorsApiMock{}

// ConnectorsApiMock is a mock implementation of ConnectorsApi.
//
// 	func TestSomethingThatUsesConnectorsApi(t *testing.T) {
//
// 		// make and configure a mocked ConnectorsApi
// 		mockedConnectorsApi := &ConnectorsApiMock{
// 			CreateConnectorFunc: func(ctx _context.Context) ApiCreateConnectorRequest {
// 				panic("mock out the CreateConnector method")
// 			},
// 			CreateConnectorExecuteFunc: func(r ApiCreateConnectorRequest) (Connector, *_nethttp.Response, error) {
// 				panic("mock out the CreateConnectorExecute method")
// 			},
// 			DeleteConnectorFunc: func(ctx _context.Context, id string) ApiDeleteConnectorRequest {
// 				panic("mock out the DeleteConnector method")
// 			},
// 			DeleteConnectorExecuteFunc: func(r ApiDeleteConnectorRequest) (Error, *_nethttp.Response, error) {
// 				panic("mock out the DeleteConnectorExecute method")
// 			},
// 			GetConnectorFunc: func(ctx _context.Context, id string) ApiGetConnectorRequest {
// 				panic("mock out the GetConnector method")
// 			},
// 			GetConnectorExecuteFunc: func(r ApiGetConnectorRequest) (Connector, *_nethttp.Response, error) {
// 				panic("mock out the GetConnectorExecute method")
// 			},
// 			ListConnectorsFunc: func(ctx _context.Context) ApiListConnectorsRequest {
// 				panic("mock out the ListConnectors method")
// 			},
// 			ListConnectorsExecuteFunc: func(r ApiListConnectorsRequest) (ConnectorList, *_nethttp.Response, error) {
// 				panic("mock out the ListConnectorsExecute method")
// 			},
// 			PatchConnectorFunc: func(ctx _context.Context, id string) ApiPatchConnectorRequest {
// 				panic("mock out the PatchConnector method")
// 			},
// 			PatchConnectorExecuteFunc: func(r ApiPatchConnectorRequest) (Connector, *_nethttp.Response, error) {
// 				panic("mock out the PatchConnectorExecute method")
// 			},
// 		}
//
// 		// use mockedConnectorsApi in code that requires ConnectorsApi
// 		// and then make assertions.
//
// 	}
type ConnectorsApiMock struct {
	// CreateConnectorFunc mocks the CreateConnector method.
	CreateConnectorFunc func(ctx _context.Context) ApiCreateConnectorRequest

	// CreateConnectorExecuteFunc mocks the CreateConnectorExecute method.
	CreateConnectorExecuteFunc func(r ApiCreateConnectorRequest) (Connector, *_nethttp.Response, error)

	// DeleteConnectorFunc mocks the DeleteConnector method.
	DeleteConnectorFunc func(ctx _context.Context, id string) ApiDeleteConnectorRequest

	// DeleteConnectorExecuteFunc mocks the DeleteConnectorExecute method.
	DeleteConnectorExecuteFunc func(r ApiDeleteConnectorRequest) (Error, *_nethttp.Response, error)

	// GetConnectorFunc mocks the GetConnector method.
	GetConnectorFunc func(ctx _context.Context, id string) ApiGetConnectorRequest

	// GetConnectorExecuteFunc mocks the GetConnectorExecute method.
	GetConnectorExecuteFunc func(r ApiGetConnectorRequest) (Connector, *_nethttp.Response, error)

	// ListConnectorsFunc mocks the ListConnectors method.
	ListConnectorsFunc func(ctx _context.Context) ApiListConnectorsRequest

	// ListConnectorsExecuteFunc mocks the ListConnectorsExecute method.
	ListConnectorsExecuteFunc func(r ApiListConnectorsRequest) (ConnectorList, *_nethttp.Response, error)

	// PatchConnectorFunc mocks the PatchConnector method.
	PatchConnectorFunc func(ctx _context.Context, id string) ApiPatchConnectorRequest

	// PatchConnectorExecuteFunc mocks the PatchConnectorExecute method.
	PatchConnectorExecuteFunc func(r ApiPatchConnectorRequest) (Connector, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateConnector holds details about calls to the CreateConnector method.
		CreateConnector []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateConnectorExecute holds details about calls to the CreateConnectorExecute method.
		CreateConnectorExecute []struct {
			// R is the r argument value.
			R ApiCreateConnectorRequest
		}
		// DeleteConnector holds details about calls to the DeleteConnector method.
		DeleteConnector []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteConnectorExecute holds details about calls to the DeleteConnectorExecute method.
		DeleteConnectorExecute []struct {
			// R is the r argument value.
			R ApiDeleteConnectorRequest
		}
		// GetConnector holds details about calls to the GetConnector method.
		GetConnector []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetConnectorExecute holds details about calls to the GetConnectorExecute method.
		GetConnectorExecute []struct {
			// R is the r argument value.
			R ApiGetConnectorRequest
		}
		// ListConnectors holds details about calls to the ListConnectors method.
		ListConnectors []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// ListConnectorsExecute holds details about calls to the ListConnectorsExecute method.
		ListConnectorsExecute []struct {
			// R is the r argument value.
			R ApiListConnectorsRequest
		}
		// PatchConnector holds details about calls to the PatchConnector method.
		PatchConnector []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// PatchConnectorExecute holds details about calls to the PatchConnectorExecute method.
		PatchConnectorExecute []struct {
			// R is the r argument value.
			R ApiPatchConnectorRequest
		}
	}
	lockCreateConnector        sync.RWMutex
	lockCreateConnectorExecute sync.RWMutex
	lockDeleteConnector        sync.RWMutex
	lockDeleteConnectorExecute sync.RWMutex
	lockGetConnector           sync.RWMutex
	lockGetConnectorExecute    sync.RWMutex
	lockListConnectors         sync.RWMutex
	lockListConnectorsExecute  sync.RWMutex
	lockPatchConnector         sync.RWMutex
	lockPatchConnectorExecute  sync.RWMutex
}

// CreateConnector calls CreateConnectorFunc.
func (mock *ConnectorsApiMock) CreateConnector(ctx _context.Context) ApiCreateConnectorRequest {
	if mock.CreateConnectorFunc == nil {
		panic("ConnectorsApiMock.CreateConnectorFunc: method is nil but ConnectorsApi.CreateConnector was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateConnector.Lock()
	mock.calls.CreateConnector = append(mock.calls.CreateConnector, callInfo)
	mock.lockCreateConnector.Unlock()
	return mock.CreateConnectorFunc(ctx)
}

// CreateConnectorCalls gets all the calls that were made to CreateConnector.
// Check the length with:
//     len(mockedConnectorsApi.CreateConnectorCalls())
func (mock *ConnectorsApiMock) CreateConnectorCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateConnector.RLock()
	calls = mock.calls.CreateConnector
	mock.lockCreateConnector.RUnlock()
	return calls
}

// CreateConnectorExecute calls CreateConnectorExecuteFunc.
func (mock *ConnectorsApiMock) CreateConnectorExecute(r ApiCreateConnectorRequest) (Connector, *_nethttp.Response, error) {
	if mock.CreateConnectorExecuteFunc == nil {
		panic("ConnectorsApiMock.CreateConnectorExecuteFunc: method is nil but ConnectorsApi.CreateConnectorExecute was just called")
	}
	callInfo := struct {
		R ApiCreateConnectorRequest
	}{
		R: r,
	}
	mock.lockCreateConnectorExecute.Lock()
	mock.calls.CreateConnectorExecute = append(mock.calls.CreateConnectorExecute, callInfo)
	mock.lockCreateConnectorExecute.Unlock()
	return mock.CreateConnectorExecuteFunc(r)
}

// CreateConnectorExecuteCalls gets all the calls that were made to CreateConnectorExecute.
// Check the length with:
//     len(mockedConnectorsApi.CreateConnectorExecuteCalls())
func (mock *ConnectorsApiMock) CreateConnectorExecuteCalls() []struct {
	R ApiCreateConnectorRequest
} {
	var calls []struct {
		R ApiCreateConnectorRequest
	}
	mock.lockCreateConnectorExecute.RLock()
	calls = mock.calls.CreateConnectorExecute
	mock.lockCreateConnectorExecute.RUnlock()
	return calls
}

// DeleteConnector calls DeleteConnectorFunc.
func (mock *ConnectorsApiMock) DeleteConnector(ctx _context.Context, id string) ApiDeleteConnectorRequest {
	if mock.DeleteConnectorFunc == nil {
		panic("ConnectorsApiMock.DeleteConnectorFunc: method is nil but ConnectorsApi.DeleteConnector was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteConnector.Lock()
	mock.calls.DeleteConnector = append(mock.calls.DeleteConnector, callInfo)
	mock.lockDeleteConnector.Unlock()
	return mock.DeleteConnectorFunc(ctx, id)
}

// DeleteConnectorCalls gets all the calls that were made to DeleteConnector.
// Check the length with:
//     len(mockedConnectorsApi.DeleteConnectorCalls())
func (mock *ConnectorsApiMock) DeleteConnectorCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockDeleteConnector.RLock()
	calls = mock.calls.DeleteConnector
	mock.lockDeleteConnector.RUnlock()
	return calls
}

// DeleteConnectorExecute calls DeleteConnectorExecuteFunc.
func (mock *ConnectorsApiMock) DeleteConnectorExecute(r ApiDeleteConnectorRequest) (Error, *_nethttp.Response, error) {
	if mock.DeleteConnectorExecuteFunc == nil {
		panic("ConnectorsApiMock.DeleteConnectorExecuteFunc: method is nil but ConnectorsApi.DeleteConnectorExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteConnectorRequest
	}{
		R: r,
	}
	mock.lockDeleteConnectorExecute.Lock()
	mock.calls.DeleteConnectorExecute = append(mock.calls.DeleteConnectorExecute, callInfo)
	mock.lockDeleteConnectorExecute.Unlock()
	return mock.DeleteConnectorExecuteFunc(r)
}

// DeleteConnectorExecuteCalls gets all the calls that were made to DeleteConnectorExecute.
// Check the length with:
//     len(mockedConnectorsApi.DeleteConnectorExecuteCalls())
func (mock *ConnectorsApiMock) DeleteConnectorExecuteCalls() []struct {
	R ApiDeleteConnectorRequest
} {
	var calls []struct {
		R ApiDeleteConnectorRequest
	}
	mock.lockDeleteConnectorExecute.RLock()
	calls = mock.calls.DeleteConnectorExecute
	mock.lockDeleteConnectorExecute.RUnlock()
	return calls
}

// GetConnector calls GetConnectorFunc.
func (mock *ConnectorsApiMock) GetConnector(ctx _context.Context, id string) ApiGetConnectorRequest {
	if mock.GetConnectorFunc == nil {
		panic("ConnectorsApiMock.GetConnectorFunc: method is nil but ConnectorsApi.GetConnector was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetConnector.Lock()
	mock.calls.GetConnector = append(mock.calls.GetConnector, callInfo)
	mock.lockGetConnector.Unlock()
	return mock.GetConnectorFunc(ctx, id)
}

// GetConnectorCalls gets all the calls that were made to GetConnector.
// Check the length with:
//     len(mockedConnectorsApi.GetConnectorCalls())
func (mock *ConnectorsApiMock) GetConnectorCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetConnector.RLock()
	calls = mock.calls.GetConnector
	mock.lockGetConnector.RUnlock()
	return calls
}

// GetConnectorExecute calls GetConnectorExecuteFunc.
func (mock *ConnectorsApiMock) GetConnectorExecute(r ApiGetConnectorRequest) (Connector, *_nethttp.Response, error) {
	if mock.GetConnectorExecuteFunc == nil {
		panic("ConnectorsApiMock.GetConnectorExecuteFunc: method is nil but ConnectorsApi.GetConnectorExecute was just called")
	}
	callInfo := struct {
		R ApiGetConnectorRequest
	}{
		R: r,
	}
	mock.lockGetConnectorExecute.Lock()
	mock.calls.GetConnectorExecute = append(mock.calls.GetConnectorExecute, callInfo)
	mock.lockGetConnectorExecute.Unlock()
	return mock.GetConnectorExecuteFunc(r)
}

// GetConnectorExecuteCalls gets all the calls that were made to GetConnectorExecute.
// Check the length with:
//     len(mockedConnectorsApi.GetConnectorExecuteCalls())
func (mock *ConnectorsApiMock) GetConnectorExecuteCalls() []struct {
	R ApiGetConnectorRequest
} {
	var calls []struct {
		R ApiGetConnectorRequest
	}
	mock.lockGetConnectorExecute.RLock()
	calls = mock.calls.GetConnectorExecute
	mock.lockGetConnectorExecute.RUnlock()
	return calls
}

// ListConnectors calls ListConnectorsFunc.
func (mock *ConnectorsApiMock) ListConnectors(ctx _context.Context) ApiListConnectorsRequest {
	if mock.ListConnectorsFunc == nil {
		panic("ConnectorsApiMock.ListConnectorsFunc: method is nil but ConnectorsApi.ListConnectors was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListConnectors.Lock()
	mock.calls.ListConnectors = append(mock.calls.ListConnectors, callInfo)
	mock.lockListConnectors.Unlock()
	return mock.ListConnectorsFunc(ctx)
}

// ListConnectorsCalls gets all the calls that were made to ListConnectors.
// Check the length with:
//     len(mockedConnectorsApi.ListConnectorsCalls())
func (mock *ConnectorsApiMock) ListConnectorsCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockListConnectors.RLock()
	calls = mock.calls.ListConnectors
	mock.lockListConnectors.RUnlock()
	return calls
}

// ListConnectorsExecute calls ListConnectorsExecuteFunc.
func (mock *ConnectorsApiMock) ListConnectorsExecute(r ApiListConnectorsRequest) (ConnectorList, *_nethttp.Response, error) {
	if mock.ListConnectorsExecuteFunc == nil {
		panic("ConnectorsApiMock.ListConnectorsExecuteFunc: method is nil but ConnectorsApi.ListConnectorsExecute was just called")
	}
	callInfo := struct {
		R ApiListConnectorsRequest
	}{
		R: r,
	}
	mock.lockListConnectorsExecute.Lock()
	mock.calls.ListConnectorsExecute = append(mock.calls.ListConnectorsExecute, callInfo)
	mock.lockListConnectorsExecute.Unlock()
	return mock.ListConnectorsExecuteFunc(r)
}

// ListConnectorsExecuteCalls gets all the calls that were made to ListConnectorsExecute.
// Check the length with:
//     len(mockedConnectorsApi.ListConnectorsExecuteCalls())
func (mock *ConnectorsApiMock) ListConnectorsExecuteCalls() []struct {
	R ApiListConnectorsRequest
} {
	var calls []struct {
		R ApiListConnectorsRequest
	}
	mock.lockListConnectorsExecute.RLock()
	calls = mock.calls.ListConnectorsExecute
	mock.lockListConnectorsExecute.RUnlock()
	return calls
}

// PatchConnector calls PatchConnectorFunc.
func (mock *ConnectorsApiMock) PatchConnector(ctx _context.Context, id string) ApiPatchConnectorRequest {
	if mock.PatchConnectorFunc == nil {
		panic("ConnectorsApiMock.PatchConnectorFunc: method is nil but ConnectorsApi.PatchConnector was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockPatchConnector.Lock()
	mock.calls.PatchConnector = append(mock.calls.PatchConnector, callInfo)
	mock.lockPatchConnector.Unlock()
	return mock.PatchConnectorFunc(ctx, id)
}

// PatchConnectorCalls gets all the calls that were made to PatchConnector.
// Check the length with:
//     len(mockedConnectorsApi.PatchConnectorCalls())
func (mock *ConnectorsApiMock) PatchConnectorCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockPatchConnector.RLock()
	calls = mock.calls.PatchConnector
	mock.lockPatchConnector.RUnlock()
	return calls
}

// PatchConnectorExecute calls PatchConnectorExecuteFunc.
func (mock *ConnectorsApiMock) PatchConnectorExecute(r ApiPatchConnectorRequest) (Connector, *_nethttp.Response, error) {
	if mock.PatchConnectorExecuteFunc == nil {
		panic("ConnectorsApiMock.PatchConnectorExecuteFunc: method is nil but ConnectorsApi.PatchConnectorExecute was just called")
	}
	callInfo := struct {
		R ApiPatchConnectorRequest
	}{
		R: r,
	}
	mock.lockPatchConnectorExecute.Lock()
	mock.calls.PatchConnectorExecute = append(mock.calls.PatchConnectorExecute, callInfo)
	mock.lockPatchConnectorExecute.Unlock()
	return mock.PatchConnectorExecuteFunc(r)
}

// PatchConnectorExecuteCalls gets all the calls that were made to PatchConnectorExecute.
// Check the length with:
//     len(mockedConnectorsApi.PatchConnectorExecuteCalls())
func (mock *ConnectorsApiMock) PatchConnectorExecuteCalls() []struct {
	R ApiPatchConnectorRequest
} {
	var calls []struct {
		R ApiPatchConnectorRequest
	}
	mock.lockPatchConnectorExecute.RLock()
	calls = mock.calls.PatchConnectorExecute
	mock.lockPatchConnectorExecute.RUnlock()
	return calls
}
