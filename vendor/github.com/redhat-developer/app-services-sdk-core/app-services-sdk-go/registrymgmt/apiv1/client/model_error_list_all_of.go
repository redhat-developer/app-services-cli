/*
 * Service Registry Management API
 *
 * Service Registry Management API is a REST API for managing Service Registry instances. Service Registry is a datastore for event schemas and API designs, which is based on the open source Apicurio Registry project.
 *
 * API version: 1.0.0
 * Contact: rhosak-eval-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registrymgmtclient

import (
	"encoding/json"
)

// ErrorListAllOf struct for ErrorListAllOf
type ErrorListAllOf struct {
	Items []Error `json:"items"`
}

// NewErrorListAllOf instantiates a new ErrorListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorListAllOf(items []Error) *ErrorListAllOf {
	this := ErrorListAllOf{}
	this.Items = items
	return &this
}

// NewErrorListAllOfWithDefaults instantiates a new ErrorListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorListAllOfWithDefaults() *ErrorListAllOf {
	this := ErrorListAllOf{}
	return &this
}

// GetItems returns the Items field value
func (o *ErrorListAllOf) GetItems() []Error {
	if o == nil {
		var ret []Error
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *ErrorListAllOf) GetItemsOk() (*[]Error, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *ErrorListAllOf) SetItems(v []Error) {
	o.Items = v
}

func (o ErrorListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableErrorListAllOf struct {
	value *ErrorListAllOf
	isSet bool
}

func (v NullableErrorListAllOf) Get() *ErrorListAllOf {
	return v.value
}

func (v *NullableErrorListAllOf) Set(val *ErrorListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorListAllOf(val *ErrorListAllOf) *NullableErrorListAllOf {
	return &NullableErrorListAllOf{value: val, isSet: true}
}

func (v NullableErrorListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


