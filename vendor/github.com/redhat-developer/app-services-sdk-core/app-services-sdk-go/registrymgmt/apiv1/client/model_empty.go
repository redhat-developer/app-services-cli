/*
 * Service Registry Management API
 *
 * Service Registry Management API is a REST API for managing Service Registry instances. Service Registry is a datastore for event schemas and API designs, which is based on the open source Apicurio Registry project.
 *
 * API version: 1.0.0
 * Contact: rhosak-eval-support@redhat.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registrymgmtclient

import (
	"encoding/json"
	"fmt"
)

// Empty Represents an empty response
type Empty string

// List of Empty
const (
	EMPTY_EMPTY Empty = ""
)

var allowedEmptyEnumValues = []Empty{
	"",
}

func (v *Empty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Empty(value)
	for _, existing := range allowedEmptyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Empty", value)
}

// NewEmptyFromValue returns a pointer to a valid Empty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmptyFromValue(v string) (*Empty, error) {
	ev := Empty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Empty: valid values are %v", v, allowedEmptyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Empty) IsValid() bool {
	for _, existing := range allowedEmptyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Empty value
func (v Empty) Ptr() *Empty {
	return &v
}

type NullableEmpty struct {
	value *Empty
	isSet bool
}

func (v NullableEmpty) Get() *Empty {
	return v.value
}

func (v *NullableEmpty) Set(val *Empty) {
	v.value = val
	v.isSet = true
}

func (v NullableEmpty) IsSet() bool {
	return v.isSet
}

func (v *NullableEmpty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmpty(val *Empty) *NullableEmpty {
	return &NullableEmpty{value: val, isSet: true}
}

func (v NullableEmpty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmpty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

