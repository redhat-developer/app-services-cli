openapi: 3.0.0
info:
  title: Kafka Admon REST API
  version: 0.1.0
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "https://api.openshift.com"
    description: Main (production) server
  - url: "https://api.stage.openshift.com"
    description: Staging server
  - url: "http://localhost:8001"
    description: localhost
  - url: "http://localhost:8000"
    description: localhost
paths:
  /topics:
    get:
      parameters:
        - name: limit
          description: Maximum number of topics to return
          schema:
            format: int32
            type: integer
          in: query
          required: false
        - name: filter
          description: Filter to apply when returning the list of topics
          schema:
            type: string
          in: query
        - name: offset
          description: The page offset when returning  the limit of requested topics.
          schema:
            format: int32
            type: integer
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicsList"
          description: List of topics matching the users query paramters.
        "400":
          content:
            application/json: {}
          description: Unable to retreive topics.
        "401":
          content:
            application/json: {}
          description: "Unauthorized, unable to retrive topics."
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      operationId: getTopicsList
      summary: List of topics
      description: >-
        Returns a list of all of the available topics, or the list of topics that meet the users URL
        Query Parameters.
    post:
      requestBody:
        description: Topic to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTopicInput"
            examples:
              NewTopicInput:
                value:
                  name: my-topic
                  settings:
                    numPartitions: 3
                    replicationFactor: 4
                    config:
                      - key: min.insync.replicas
                        value: "1"
                      - key: max.message.bytes
                        value: "1050000"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Topic created successfully.
        "400":
          description: Unable to create topic.
        "401":
          description: "Unauthorized, Unable to create topic."
        "409":
          description: Entry already exisits
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      operationId: createTopic
      summary: Creates a new topic
      description: Creates a new topic for Kafka.
  "/topics/{topicName}":
    get:
      parameters:
        - name: topicName
          description: The topic name to retrieve.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Kakfa topic details.
        "401":
          description: "Unauthorized, unable to retrieve topics."
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      operationId: getTopic
      summary: Retrieves the topic with the specified name.
      description: Topic
    delete:
      parameters:
        - name: topicName
          description: The topic name to delete.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Topic deleted successfully.
        "401":
          description: "Unathorized, unable to delete topic."
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      operationId: deleteTopic
      summary: Deletes a  topic
      description: Deletes the topic with the specified name.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicSettings"
        required: true
      parameters:
        - name: topicName
          description: The topic name which is its unique id.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Topic updated successfully.
        "400":
          description: Unable to update topic.
        "401":
          description: "Unauthroized, unable to update topic."
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      operationId: updateTopic
      summary: Updates the topic with the specified name.
      description: updates the topic with the new data.
    parameters:
      - name: topicName
        description: The topic name which is its unique id.
        schema:
          type: string
        in: path
        required: true
  /metrics:
    get:
      responses:
        "200":
          description: Metrics
      operationId: metrics
      summary: Admin server metrics
  /groups:
    get:
      responses:
        "200":
          content:
            application/json: {}
          description: OK
      operationId: getGroupsList
  "/groups/{groupName}":
    get:
      responses:
        "200":
          content:
            application/json: {}
          description: OK
      operationId: getGroup
    delete:
      responses:
        "200":
          content:
            application/json: {}
          description: OK
      operationId: deleteGroup
    parameters:
      - name: groupName
        description: Consumer group identificator
        schema:
          type: string
        in: path
        required: true
  /api:
    get:
      responses:
        "200":
          content:
            application/json: {}
          description: OpenAPI spec
      operationId: openApi
components:
  schemas:
    Topic:
      title: Root Type for NewTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      type: object
      properties:
        name:
          description: The name of the topic.
          type: string
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: "#/components/schemas/ConfigEntry"
        partitions:
          description: Partitions for this topic.
          type: array
          items:
            $ref: "#/components/schemas/Partition"
      example:
        name: my-topic
        config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
        partitions:
          - id: 0
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 1
    Partition:
      description: Kafka topic partition
      required:
        - id
      type: object
      properties:
        id:
          description: Uniquie id for the partition
          type: integer
        replicas:
          description: List of replicas for the partition
          type: array
          items:
            $ref: "#/components/schemas/Node"
        isr:
          description: List isync-replicas for this partition.
          type: array
          items:
            $ref: "#/components/schemas/Node"
        leader:
          $ref: "#/components/schemas/Node"
          description: Node that is the leader for this partition.
      example:
        id: 0
        replicas:
          - id: 0
          - id: 1
        isr:
          - id: 0
          - id: 1
        leader:
          id: 1
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a topic.
      type: object
      properties:
        key:
          description: The key indicating what configuration entry you would like to set for the topic.
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          type: string
      example:
        key: min.insync.replicas
        value: "1"
    TopicsList:
      description: A list of topics.
      required:
        - items
        - offset
        - limit
        - count
      type: object
      properties:
        offset:
          description: The page offset
          type: integer
        limit:
          description: number of entries per page
          type: integer
        count:
          description: Total number of topics
          type: integer
        items:
          description: List of topics
          type: array
          items:
            $ref: "#/components/schemas/Topic"
      example:
        items:
          - name: my-topic
            config:
              - key: min.insync.replicas
                value: "1"
              - key: max.message.bytes
                value: "1050000"
            partitions:
              - id: 0
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 0
              - id: 1
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 1
        offset: 25
        limit: 90
        count: 94
    TopicSettings:
      title: Root Type for NewTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      type: object
      properties:
        replicationFactor:
          description: Replication factor for this topic
          type: integer
        numPartitions:
          description: Number of partitions for this topic.
          type: integer
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: "#/components/schemas/ConfigEntry"
      example:
        numPartitions: 2
        config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
    Node:
      description: Kafka server / broker.
      type: object
    NewTopicInput:
      description: Input object to create a new topic.
      required:
        - name
      type: object
      properties:
        name:
          description: "The topic name, this value must be unique."
          type: string
        settings:
          $ref: "#/components/schemas/TopicSettings"
          description: >-
            The settings that are applicable to this topic.  This includes partitions,
            configuration information, and number of replicas.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
            - key: min.insync.replicas
              value: "1"
            - key: max.message.bytes
              value: "1050000"
