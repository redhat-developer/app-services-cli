openapi: 3.0.0
info:
  title: Kafka Admin REST API
  version: 0.1.0
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "https://api.openshift.com"
    description: Main (production) server
  - url: "https://api.stage.openshift.com"
    description: Staging server
  - url: "http://localhost:8000"
    description: localhost
paths:
  /topics:
    get:
      parameters:
        - name: limit
          description: Maximum number of topics to return
          schema:
            format: int32
            type: integer
          in: query
          required: false
        - name: filter
          description: Filter to apply when returning the list of topics
          schema:
            type: string
          in: query
        - name: offset
          description: The page offset when returning  the limit of requested topics.
          schema:
            format: int32
            type: integer
          in: query
        - name: order
          description: >-
            Order of the items sorting. If "asc" is set as a value, ascending order is used,
            descending otherwise.
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicsList"
          description: List of topics matching the users query paramters.
        "400":
          content:
            application/json: {}
          description: Unable to retreive topics.
        "401":
          content:
            application/json: {}
          description: "Unauthorized, unable to retrive topics."
        "500":
          content:
            application/json: {}
          description: Internal server error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: getTopicsList
      summary: List of topics
      description: >-
        Returns a list of all of the available topics, or the list of topics that meet the users URL
        Query Parameters.
    post:
      requestBody:
        description: Topic to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTopicInput"
            examples:
              NewTopicInput:
                value:
                  name: my-topic
                  settings:
                    numPartitions: 3
                    replicationFactor: 4
                    config:
                      - key: min.insync.replicas
                        value: "1"
                      - key: max.message.bytes
                        value: "1050000"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Topic created successfully.
        "400":
          description: Unable to create topic.
        "401":
          description: "Unauthorized, Unable to create topic."
        "409":
          description: Entry already exisits
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: createTopic
      summary: Creates a new topic
      description: Creates a new topic for Kafka.
  "/topics/{topicName}":
    get:
      parameters:
        - name: topicName
          description: The topic name to retrieve.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Kakfa topic details.
        "401":
          content:
            application/json: {}
          description: "Unauthorized, unable to retrieve topics."
        "404":
          content:
            application/json: {}
          description: Topic not found.
        "500":
          content:
            application/json: {}
          description: Internal server error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: getTopic
      summary: Retrieves the topic with the specified name.
      description: Topic
    delete:
      parameters:
        - name: topicName
          description: The topic name to delete.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          description: Topic deleted successfully.
        "401":
          description: "Unathorized, unable to delete topic."
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: deleteTopic
      summary: Deletes a  topic
      description: Deletes the topic with the specified name.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTopicInput"
        required: true
      parameters:
        - name: topicName
          description: The topic name which is its unique id.
          schema:
            type: string
          in: path
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: Topic updated successfully.
        "400":
          description: Unable to update topic.
        "401":
          description: "Unauthroized, unable to update topic."
        "404":
          description: Topic not found.
        "500":
          description: Internal server error.
        "503":
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: updateTopic
      summary: Updates the topic with the specified name.
      description: updates the topic with the new data.
    parameters:
      - name: topicName
        description: The topic name which is its unique id.
        schema:
          type: string
        in: path
        required: true
  /metrics:
    get:
      responses:
        "200":
          description: Metrics
      operationId: metrics
      summary: Admin server metrics
  /api:
    get:
      responses:
        "200":
          content:
            application/json: {}
          description: OpenAPI spec
      # security:
      # - Bearer: []
      operationId: openApi
  "/consumer-groups/{consumerGroupId}":
    get:
      parameters:
        - name: consumerGroupId
          description: The unique ID of the consumer group
          schema:
            type: string
          in: path
          required: true
        - examples:
            Consumer group:
              value:
                groupId: consumer_group_1
                consumers:
                  - groupId: consumer_group_1
                    topic: topic-1
                    partition: 0
                    memberId: consumer_group_member1
                    offset: 5
                    lag: 0
                    logEndOffset: 5
                  - groupId: consumer_group_1
                    topic: topic-1
                    partition: 1
                    memberId: consumer_group_member2
                    offset: 3
                    lag: 0
                    logEndOffset: 3
                  - groupId: consumer_group_1
                    topic: topic-1
                    partition: 2
                    memberId: consumer_group_member3
                    offset: 6
                    lag: 1
                    logEndOffset: 5
          name: topic
          description: Filter consumer groups for a specific topic
          schema:
            type: string
          in: query
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerGroup"
          description: Consumer group details.
        "401":
          content:
            application/json: {}
          description: >-
            Unauthorized, request has not been applied because it lacks valid authentication
            credentials.
        "403":
          content:
            application/json: {}
          description: User is forbidden this view this consumer group.
        "404":
          content:
            application/json: {}
          description: Consumer group not found.
        "500":
          content:
            application/json: {}
          description: Internal server error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: getConsumerGroupById
      summary: Get a single consumer group by its unique ID.
    delete:
      parameters:
        - name: consumerGroupId
          description: The unique ID of the cobsumer group.
          schema:
            type: string
          in: path
          required: true
      responses:
        "204":
          description: The consumer group was deleted successfully.
        "401":
          content:
            application/json: {}
          description: >-
            Unauthorized, request has not been applied because it lacks valid authentication
            credentials.
        "403":
          content:
            application/json: {}
          description: Forbidden to delete this consumer group.
        "404":
          content:
            application/json: {}
          description: The consumer group does not exist.
        "423":
          content:
            application/json: {}
          description: User cannot delete consumer group with active members.
        "500":
          content:
            application/json: {}
          description: Internal Server Error.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: deleteConsumerGroupById
      summary: Delete a consumer group.
      description: "Delete a consumer group, along with its consumers."
    parameters:
      - name: consumerGroupId
        description: The unique name of the topic.
        schema:
          type: string
        in: path
        required: true
  /consumer-groups:
    summary: API endpoints for consumer groups under a Kafka topic
    get:
      parameters:
        - name: limit
          description: Maximum number of consumer groups to returnd
          schema:
            type: integer
          in: query
        - name: offset
          description: The page offset when returning the list of consumer groups
          schema:
            type: integer
          in: query
        - name: topic
          description: Filter to apply when returning the list of consumer groups
          schema:
            type: string
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsumerGroupList"
              examples:
                List of consumer groups:
                  value:
                    count: 1
                    limit: 10
                    offset: 0
                    items:
                      - groupId: consumer_group_1
                        consumers:
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 0
                            memberId: consumer_group_member1
                            offset: 5
                            lag: 0
                            logEndOffset: 5
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 1
                            memberId: consumer_group_member2
                            offset: 3
                            lag: 0
                            logEndOffset: 3
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 2
                            memberId: consumer_group_member3
                            offset: 6
                            lag: 1
                            logEndOffset: 5
          description: List of consumer groups matching the request parameters.
        "400":
          content:
            application/json: {}
          description: >-
            The server cannot or will not process the request due to something that is perceived
            to be a client error such as malformed request syntax.
        "401":
          content:
            application/json: {}
          description: >-
            Unauthorized, request has not been applied because it lacks valid authentication
            credentials.
        "403":
          content:
            application/json: {}
          description: User is forbidden to retrieve the list of consumer groups.
        "500":
          content:
            application/json: {}
          description: An internal server error occurred.
        "503":
          content:
            application/json: {}
          description: Unable to connect to the Kafka cluster.
      # security:
      # - Bearer: []
      operationId: getConsumerGroupList
      summary: List of consumer groups in the Kafka instance.
      description: Returns a list of all consumer groups for a particular Kafka instance.
  /: {}
components:
  schemas:
    Topic:
      title: Root Type for NewTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      type: object
      properties:
        name:
          description: The name of the topic.
          type: string
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: "#/components/schemas/ConfigEntry"
        partitions:
          description: Partitions for this topic.
          type: array
          items:
            $ref: "#/components/schemas/Partition"
      example:
        name: my-topic
        config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
        partitions:
          - id: 0
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 1
    Partition:
      description: Kafka topic partition
      required:
        - id
      type: object
      properties:
        id:
          description: Uniquie id for the partition
          type: integer
        replicas:
          description: List of replicas for the partition
          type: array
          items:
            $ref: "#/components/schemas/Node"
        isr:
          description: List isync-replicas for this partition.
          type: array
          items:
            $ref: "#/components/schemas/Node"
        leader:
          $ref: "#/components/schemas/Node"
          description: Node that is the leader for this partition.
      example:
        id: 0
        replicas:
          - id: 0
          - id: 1
        isr:
          - id: 0
          - id: 1
        leader:
          id: 1
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a topic.
      type: object
      properties:
        key:
          description: The key indicating what configuration entry you would like to set for the topic.
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          type: string
      example:
        key: min.insync.replicas
        value: "1"
    TopicsList:
      description: A list of topics.
      required:
        - items
        - offset
        - limit
        - count
      type: object
      properties:
        offset:
          description: The page offset
          type: integer
        limit:
          description: number of entries per page
          type: integer
        count:
          description: Total number of topics
          type: integer
        items:
          description: List of topics
          type: array
          items:
            $ref: "#/components/schemas/Topic"
      example:
        items:
          - name: my-topic
            config:
              - key: min.insync.replicas
                value: "1"
              - key: max.message.bytes
                value: "1050000"
            partitions:
              - id: 0
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 0
              - id: 1
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 1
        offset: 25
        limit: 90
        count: 94
    TopicSettings:
      title: Root Type for NewTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      required:
        - numPartitions
      type: object
      properties:
        numPartitions:
          description: Number of partitions for this topic.
          type: integer
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: "#/components/schemas/ConfigEntry"
      example:
        numPartitions: 2
        config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
    Node:
      description: Kafka server / broker.
      type: object
    NewTopicInput:
      description: Input object to create a new topic.
      required:
        - name
        - settings
      type: object
      properties:
        name:
          description: "The topic name, this value must be unique."
          type: string
        settings:
          $ref: "#/components/schemas/TopicSettings"
          description: >-
            The settings that are applicable to this topic.  This includes partitions,
            configuration information, and number of replicas.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
            - key: min.insync.replicas
              value: "1"
            - key: max.message.bytes
              value: "1050000"
    ConsumerGroup:
      description: A group of Kafka consumers
      required:
        - groupId
        - consumers
      type: object
      properties:
        groupId:
          description: Unique identifier for the consumer group
          type: string
        consumers:
          description: The list of consumers associated with this consumer group
          type: array
          items:
            $ref: "#/components/schemas/Consumer"
      example:
        id: consumer_group_1
        consumers:
          - groupId: consumer_group_1
            topic: topic-1
            partition: 0
            memberId: consumer_group_member1
            offset: 5
            lag: 0
            logEndOffset: 5
          - groupId: consumer_group_1
            topic: topic-1
            partition: 1
            memberId: consumer_group_member2
            offset: 3
            lag: 0
            logEndOffset: 3
          - groupId: consumer_group_1
            topic: topic-1
            partition: 2
            memberId: consumer_group_member3
            offset: 6
            lag: 1
            logEndOffset: 5
    Consumer:
      description: >-
        A Kafka consumer is responsible for reading records from one or more topics and one or more
        partitions of a topic.
      required:
        - groupId
        - topic
        - partition
        - offset
        - lag
      type: object
      properties:
        groupId:
          description: Unique identifier for the consumer group to which this consumer belongs.
          type: string
        topic:
          description: The unique topic name to which this consumer belongs
          type: string
        partition:
          description: The partition number to which this consumer group is assigned to.
          type: integer
        offset:
          description: Offset denotes the position of the consumer in a partition.
          type: number
        logEndOffset:
          description: The log end offset is the offset of the last message written to a log.
          type: number
        lag:
          description: >-
            Offset Lag is the delta between the last produced message and the last consumer's
            committed offset.
          type: integer
        memberId:
          description: >-
            The member ID is a unique identifier given to a consumer by the coordinator upon
            initially joining the group.
          type: string
      example:
        groupId: consumer_group_1
        topic: topic-1
        partition: 0
        memberId: consumer_group_1-0
        offset: 5
        lag: 0
        logEndOffset: 5
    ConsumerGroupList:
      description: A list of consumer groups
      required:
        - items
        - count
        - limit
        - offset
      type: object
      properties:
        items:
          description: Consumer group list items
          type: array
          items:
            $ref: "#/components/schemas/ConsumerGroup"
        count:
          description: The total number of consumer groups.
          type: number
        limit:
          description: The number of consumer groups per page.
          type: number
        offset:
          description: The page offset
          type: integer
      example:
        count: 1
        limit: 10
        offset: 0
        items:
          - groupId: consumer_group_1
            consumers:
              - groupId: consumer_group_1
                topic: topic-1
                partition: 0
                memberId: consumer_group_member1
                offset: 5
                lag: 0
                logEndOffset: 5
              - groupId: consumer_group_1
                topic: topic-1
                partition: 1
                memberId: consumer_group_member2
                offset: 3
                lag: 0
                logEndOffset: 3
              - groupId: consumer_group_1
                topic: topic-1
                partition: 2
                memberId: consumer_group_member3
                offset: 6
                lag: 1
                logEndOffset: 5
    UpdateTopicInput:
      title: Root Type for UpdateTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      type: object
      properties:
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: "#/components/schemas/ConfigEntry"
      example:
        config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
  securitySchemes:
    Bearer:
      flows: {}
      type: oauth2
      description: Access token used with OAuth 2.0
