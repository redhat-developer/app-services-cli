openapi: 3.0.0
info:
  title: Managed Service API
  version: 0.0.1
  description: Managed Service API
servers:
  - url: https://api.openshift.com
    description: Main (production) server
  - url: https://api.stage.openshift.com
    description: Staging server
  - url: http://localhost:8000
    description: localhost
  - url: /
    description: current domain
paths:
  /api/managed-services-api/v1/kafkas/{id}:
    get:
      operationId: getKafkaById
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
          description: Kafka request found by id
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: No kafka request with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      summary: Get a kafka request by id
    delete:
      operationId: deleteKafkaById
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
              #No Content
          description: Deleted
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404DeleteExample:
                  $ref: '#/components/examples/404DeleteExample'
          description: No kafka request with specified id exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500DeleteExample:
                  $ref: '#/components/examples/500DeleteExample'
          description: Unexpected error occurred
      summary: Delete a kafka request by id
      security:
        - Bearer: []
    parameters:
      - $ref: "#/components/parameters/id"
  /api/managed-services-api/v1/kafkas:
    post:
      operationId: createKafka
      parameters:
        - in: query
          name: async
          description: Perform the action in an asynchronous manner
          schema:
            type: boolean
          required: true
      requestBody:
        description: Kafka data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaRequestPayload'
            examples:
              USRegion:
                $ref: '#/components/examples/USRegionExample'
              EURegion:
                $ref: '#/components/examples/EURegionExample'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
              examples:
                KafkaRequestPostResponseExample:
                  $ref: '#/components/examples/KafkaRequestExample'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                400CreationExample:
                  $ref: '#/components/examples/400CreationExample'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
                403MaxAllowedInstanceReachedExample:
                  $ref: '#/components/examples/403MaxAllowedInstanceReachedExample'
          description: User forbidden either because the user is not authorized to access the service or because the maximum number of instances that can be created by this user has been reached.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                404Example:
                  $ref: '#/components/examples/404Example'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: An unexpected error occurred creating the Kafka Request
      security:
        - Bearer: []
      summary: Create a new kafka Request
    get:
      summary: Returns a list of Kafka requests
      operationId: listKafkas
      security:
        - Bearer: []
      responses:
        "200":
          description: A list of Kafka requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequestList'
        "401":
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service.
        "500":
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  /api/managed-services-api/v1/cloud_providers:
    get:
      summary: Retrieves the list of supported cloud providers.
      operationId: listCloudProviders
      security:
        - Bearer: []
      responses:
        '200':
          description: Retrieved list of supported cloud providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudProviderList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  /api/managed-services-api/v1/cloud_providers/{id}/regions:
    get:
      summary: Retrieves the list of supported regions of the supported cloud provider.
      operationId: listCloudProviderRegions
      security:
        - Bearer: []
      responses:
        '200':
          description: Retrieved list of supported cloud providers regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudRegionList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  /api/managed-services-api/v1/serviceaccounts:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccountList'
          description: List of service accounts
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: listServiceAccounts
      summary: List service accounts
    post:
      requestBody:
        description: service account request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAccountRequest'
            examples:
              sa:
                $ref: '#/components/examples/ServiceAccountRequestExample'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                serviceaccount:
                  $ref: '#/components/examples/ServiceAccountExample'
          description: service account created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: Auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                403Example:
                  $ref: '#/components/examples/403Example'
          description: list of service account
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: createServiceAccount
      summary: Create a service account
  '/api/managed-services-api/v1/serviceaccounts/{id}':
    summary: Delete a service account
    description: Delete the service account with the given id
    delete:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/401Example'
          description: auth token is invalid
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                401Example:
                  $ref: '#/components/examples/403Example'
          description: User not authorized to access the service
        '500':
          content:
            application/json:
              schema: {}
              examples:
                500Example:
                  $ref: '#/components/examples/500Example'
          description: Unexpected error occurred
      security:
        - Bearer: []
      operationId: deleteServiceAccount
      summary: Delete service account
  '/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials':
    post:
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAccount'
              examples:
                sa-reset:
                  $ref: '#/components/examples/ServiceAccountExample'
          description: reset credentials
      security:
        - Bearer: []
      operationId: resetServiceAccountCreds
      summary: reset credentials for the service account
components:
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      required:
        - kind
        - page
        - size
        - total
        - items
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
    Error:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Error"
    KafkaRequest:
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            status:
              type: string
            cloud_provider:
              type: string
            multi_az:
              type: boolean
            region:
              type: string
            owner:
              type: string
            name:
              type: string
            bootstrapServerHost:
              type: string
            created_at:
              format: date-time
              type: string
            updated_at:
              format: date-time
              type: string
          example:
            $ref: "#/components/examples/KafkaRequestExample"
    KafkaRequestList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          example:
            kind: "KafkaRequestList"
            page: "1"
            size: "1"
            total: "1"
            item:
              $ref: '#/components/examples/KafkaRequestExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/KafkaRequest"
    KafkaRequestPayload:
      description: Schema for the request body sent to /kafkas POST
      required:
        - name
      type: object
      properties:
        cloud_provider:
          description: The cloud provider where the Kafka cluster will be created in
          type: string
        multi_az:
          description: Set this to true to configure the Kafka cluster to be multiAZ
          type: boolean
        name:
          description: 'The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or ''-'', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.'
          type: string
        region:
          description: The region where the Kafka cluster will be created in
          type: string
    CloudProviderList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          example:
            kind: "CloudProviderList"
            page: "1"
            size: "1"
            total: "1"
            item:
              $ref: '#/components/examples/CloudProviderExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/CloudProvider"
    CloudRegionList:
      allOf:
        - $ref: "#/components/schemas/List"
        - type: object
          example:
            kind: "CloudRegionList"
            page: "1"
            size: "1"
            total: "1"
            item:
              $ref: '#/components/examples/CloudRegionExample'
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/CloudRegion"
    CloudProvider:
      description: 'Cloud provider.'
      properties:
        kind:
          description: 'Indicates the type of this object. Will be ''CloudProvider'' link.'
          type: string
        id:
          description: 'Unique identifier of the object.'
          type: string
        display_name:
          description: 'Name of the cloud provider for display purposes.'
          type: string
        name:
          description: 'Human friendly identifier of the cloud provider, for example `aws`.'
          type: string
        enabled:
          description: 'Whether the cloud provider is enabled for deploying an OSD cluster.'
          type: boolean
      required:
        - enabled
    CloudRegion:
      description: 'Description of a region of a cloud provider.'
      properties:
        kind:
          description: 'Indicates the type of this object. Will be ''CloudRegion''.'
          type: string
        id:
          description: 'Unique identifier of the object.'
          type: string
        display_name:
          description: 'Name of the region for display purposes, for example `N. Virginia`.'
          type: string
        enabled:
          description: 'Whether the region is enabled for deploying an OSD cluster.'
          type: boolean
          default: false
      required:
        - enabled
    ServiceAccount:
      description: 'Service Account created in MAS-SSO for the Kafka Cluster for authentication'
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            id:
              description: 'server generated unique id of the service account'
              type: string
            name:
              description: ''
              type: string
            description:
              description: ''
              type: string
            clientID:
              type: string
            clientSecret:
              type: string
          example:
            $ref: "#/components/examples/ServiceAccountExample"
    ServiceAccountRequest:
      description: 'Schema for the request to create a service account'
      required:
        - name
      type: object
      properties:
        name:
          description: 'The name of the service account'
          type: string
        description:
          description: 'A description for the service account'
          type: string
      example:
        $ref: "#/components/examples/ServiceAccountRequestExample"
    ServiceAccountListItem:
      description: ''
      allOf:
        - $ref: "#/components/schemas/ObjectReference"
        - type: object
          properties:
            id:
              description: 'server generated unique id of the service account'
              type: string
            clientID:
              description: ''
              type: string
            name:
              description: ''
              type: string
            description:
              description: ''
    ServiceAccountList:
      allOf:
        - type: object
          example:
            kind: "ServiceAccountList"
            items:
              $ref: '#/components/examples/ServiceAccountListItemExample'
          properties:
            kind:
              type: string
            items:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/ServiceAccountListItem"
  parameters:
    id:
      name: id
      description: The id of record
      schema:
        type: string
      in: path
      required: true
    page:
      name: page
      in: query
      description: Page index
      required: false
      schema:
        type: string
      examples:
        page:
          value: "1"
    size:
      name: size
      in: query
      description: Number of items in each page
      required: false
      schema:
        type: string
      examples:
        size:
          value: "100"
  securitySchemes:
    Bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  examples:
    USRegionExample:
      value:
        region: "us-east-1"
        cloud_provider: "aws"
        name: "serviceapitest"
    EURegionExample:
      value:
        region: "eu-west-1"
        cloud_provider: "aws"
        name: "serviceapitest"
    KafkaRequestExample:
      value:
        id: "1iSY6RQ3JKI8Q0OTmjQFd3ocFRg"
        kind: "kafka"
        href: "/api/managed-services-api/v1/kafkas/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg"
        status: "complete"
        cloud_provider: "aws"
        multi_az: true
        region: "us-east-1"
        owner:  "api_kafka_service"
        name: "serviceapi"
        bootstrapServerHost: "serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.apps.ms-bttg0jn170hp.x5u8.s1.devshift.org"
        created_at: "2020-10-05T12:51:24.053142Z"
        updated_at: "2020-10-05T12:56:36.362208Z"
    CloudProviderExample:
      value:
        kind: "CloudProvider"
        id: "aws"
        name: "aws"
        display_name: "Amazon Web Services"
        enabled: true
    CloudRegionExample:
      value:
        kind: "CloudRegion"
        id: "us-east-1"
        display_name: "US East, N. Virginia"
        enabled: true
    ServiceAccountRequestExample:
      value:
        name: "my-app-sa"
        description: "service account for my app"
    ServiceAccountExample:
      value:
        id: "1"
        kind: "ServiceAccount"
        href: "/api/managed-services-api/v1/serviceaccounts/1"
        name: "my-app-sa"
        description: "service account for my app"
        clientID: "SA-121212"
        clientSecret: "secret"
    ServiceAccountListItemExample:
      value:
        id: "1"
        kind: "ServiceAccountListItem"
        href: "/api/managed-services-api/v1/serviceaccounts/1"
        name: "my-app-sa"
        description: "service account for my app"
        clientID: "SA-121212"
    400CreationExample:
      value:
        id: "103"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/103"
        code: "OCM-EX-103"
        reason: "Synchronous action (creating kafka requests) is unsupported, use async=true parameter"
        operation_id: "1iWIimqGcrDuL61aUxIZqBTqNRa"
    404Example:
      value:
        id: "404"
        kind: "Error"
        href: "/api/gateway/v1/errors/404"
        code: "GATEWAY-404"
        reason: "The requested resource doesn't exist"
    404DeleteExample:
      value:
        id: '7'
        kind: Error
        href: "/api/managed-services-api/v1/errors/7"
        code: OCM-EX-7
        reason: KafkaResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
    401Example:
      value:
        id: "11"
        kind: "Error"
        href: "/api/managed-services-api/v1/errors/11"
        code: "OCM-EX-11"
        reason: "Unable to verify JWT token: Required authorization token not found"
        operation_id: "1iY3UhEhwmXBpWPfI2lNekpd4ZD"
    403Example:
      value:
        id: '4'
        kind: Error
        href: /api/managed-services-api/v1/errors/4
        code: MGD-SERV-API-4
        reason: User 'foo-bar' is not authorized to access the service.
        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC
    403MaxAllowedInstanceReachedExample:
      value:
        id: '4'
        kind: Error
        href: /api/managed-services-api/v1/errors/4
        code: MGD-SERV-API-4
        reason: User 'foo-bar' has reached a maximum number of 6 allowed instances.
        operation_id: 1lY3UiEkxnXBpVPeI2oNejd3XB
    500Example:
      value:
        id: '9'
        kind: Error
        href: "/api/managed-services-api/v1/errors/9"
        code: MGD-SERV-API-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    500DeleteExample:
      value:
        id: '9'
        kind: Error
        href: "/api/managed-services-api/v1/errors/9"
        code: OCM-EX-9
        reason: 'error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is ''404'', code is ''CLUSTERS-MGMT-404'' and operation identifier is ''1g5or50viu07oealuehrkc26dgftj1ac'':
          Cluster ''1g5d88q0lrcdv4g7alb7slfgnj3dhbsj'' not found)'
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca